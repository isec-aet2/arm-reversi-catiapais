
ArmReversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f88  08009f88  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f90  08009f90  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08009f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200000a0  0800a038  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800a038  00020610  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2ec  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031f9  00000000  00000000  0003b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  0003e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  0003fb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ebe9  00000000  00000000  00040f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b78  00000000  00000000  0006faf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012229c  00000000  00000000  00081671  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a390d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da8  00000000  00000000  001a3988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a0 	.word	0x200000a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08007da8 	.word	0x08007da8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a4 	.word	0x200000a4
 800023c:	08007da8 	.word	0x08007da8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005ea:	49be      	ldr	r1, [pc, #760]	; (80008e4 <OTM8009A_Init+0x304>)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 ff2f 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80005f2:	49bd      	ldr	r1, [pc, #756]	; (80008e8 <OTM8009A_Init+0x308>)
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 ff2b 	bl	8001450 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80005fa:	49bc      	ldr	r1, [pc, #752]	; (80008ec <OTM8009A_Init+0x30c>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 ff27 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000602:	49bb      	ldr	r1, [pc, #748]	; (80008f0 <OTM8009A_Init+0x310>)
 8000604:	2002      	movs	r0, #2
 8000606:	f000 ff23 	bl	8001450 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800060a:	49b8      	ldr	r1, [pc, #736]	; (80008ec <OTM8009A_Init+0x30c>)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 ff1f 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000612:	49b8      	ldr	r1, [pc, #736]	; (80008f4 <OTM8009A_Init+0x314>)
 8000614:	2000      	movs	r0, #0
 8000616:	f000 ff1b 	bl	8001450 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800061a:	200a      	movs	r0, #10
 800061c:	f000 faba 	bl	8000b94 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000620:	49b5      	ldr	r1, [pc, #724]	; (80008f8 <OTM8009A_Init+0x318>)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 ff14 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000628:	49b4      	ldr	r1, [pc, #720]	; (80008fc <OTM8009A_Init+0x31c>)
 800062a:	2000      	movs	r0, #0
 800062c:	f000 ff10 	bl	8001450 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 faaf 	bl	8000b94 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000636:	49b2      	ldr	r1, [pc, #712]	; (8000900 <OTM8009A_Init+0x320>)
 8000638:	2000      	movs	r0, #0
 800063a:	f000 ff09 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800063e:	49b1      	ldr	r1, [pc, #708]	; (8000904 <OTM8009A_Init+0x324>)
 8000640:	2000      	movs	r0, #0
 8000642:	f000 ff05 	bl	8001450 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000646:	49b0      	ldr	r1, [pc, #704]	; (8000908 <OTM8009A_Init+0x328>)
 8000648:	2000      	movs	r0, #0
 800064a:	f000 ff01 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800064e:	49af      	ldr	r1, [pc, #700]	; (800090c <OTM8009A_Init+0x32c>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fefd 	bl	8001450 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000656:	49ae      	ldr	r1, [pc, #696]	; (8000910 <OTM8009A_Init+0x330>)
 8000658:	2000      	movs	r0, #0
 800065a:	f000 fef9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800065e:	49ad      	ldr	r1, [pc, #692]	; (8000914 <OTM8009A_Init+0x334>)
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fef5 	bl	8001450 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000666:	499f      	ldr	r1, [pc, #636]	; (80008e4 <OTM8009A_Init+0x304>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fef1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800066e:	49aa      	ldr	r1, [pc, #680]	; (8000918 <OTM8009A_Init+0x338>)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 feed 	bl	8001450 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000676:	49a9      	ldr	r1, [pc, #676]	; (800091c <OTM8009A_Init+0x33c>)
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fee9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800067e:	49a8      	ldr	r1, [pc, #672]	; (8000920 <OTM8009A_Init+0x340>)
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fee5 	bl	8001450 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000686:	49a7      	ldr	r1, [pc, #668]	; (8000924 <OTM8009A_Init+0x344>)
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fee1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800068e:	49a6      	ldr	r1, [pc, #664]	; (8000928 <OTM8009A_Init+0x348>)
 8000690:	2000      	movs	r0, #0
 8000692:	f000 fedd 	bl	8001450 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000696:	49a5      	ldr	r1, [pc, #660]	; (800092c <OTM8009A_Init+0x34c>)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fed9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800069e:	49a4      	ldr	r1, [pc, #656]	; (8000930 <OTM8009A_Init+0x350>)
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fed5 	bl	8001450 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <OTM8009A_Init+0x354>)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fed1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80006ae:	4997      	ldr	r1, [pc, #604]	; (800090c <OTM8009A_Init+0x32c>)
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fecd 	bl	8001450 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80006b6:	498b      	ldr	r1, [pc, #556]	; (80008e4 <OTM8009A_Init+0x304>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fec9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80006be:	499e      	ldr	r1, [pc, #632]	; (8000938 <OTM8009A_Init+0x358>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 fec5 	bl	8001450 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80006c6:	499d      	ldr	r1, [pc, #628]	; (800093c <OTM8009A_Init+0x35c>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fec1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80006ce:	499c      	ldr	r1, [pc, #624]	; (8000940 <OTM8009A_Init+0x360>)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 febd 	bl	8001450 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80006d6:	499b      	ldr	r1, [pc, #620]	; (8000944 <OTM8009A_Init+0x364>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 feb9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80006de:	499a      	ldr	r1, [pc, #616]	; (8000948 <OTM8009A_Init+0x368>)
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 feb5 	bl	8001450 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80006e6:	4999      	ldr	r1, [pc, #612]	; (800094c <OTM8009A_Init+0x36c>)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 feb1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80006ee:	4998      	ldr	r1, [pc, #608]	; (8000950 <OTM8009A_Init+0x370>)
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 fead 	bl	8001450 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80006f6:	4989      	ldr	r1, [pc, #548]	; (800091c <OTM8009A_Init+0x33c>)
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fea9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80006fe:	4995      	ldr	r1, [pc, #596]	; (8000954 <OTM8009A_Init+0x374>)
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fea5 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000706:	4987      	ldr	r1, [pc, #540]	; (8000924 <OTM8009A_Init+0x344>)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fea1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800070e:	4992      	ldr	r1, [pc, #584]	; (8000958 <OTM8009A_Init+0x378>)
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fe9d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000716:	4991      	ldr	r1, [pc, #580]	; (800095c <OTM8009A_Init+0x37c>)
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fe99 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800071e:	4990      	ldr	r1, [pc, #576]	; (8000960 <OTM8009A_Init+0x380>)
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fe95 	bl	8001450 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000726:	4971      	ldr	r1, [pc, #452]	; (80008ec <OTM8009A_Init+0x30c>)
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fe91 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800072e:	498d      	ldr	r1, [pc, #564]	; (8000964 <OTM8009A_Init+0x384>)
 8000730:	2006      	movs	r0, #6
 8000732:	f000 fe8d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000736:	498c      	ldr	r1, [pc, #560]	; (8000968 <OTM8009A_Init+0x388>)
 8000738:	2000      	movs	r0, #0
 800073a:	f000 fe89 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800073e:	498b      	ldr	r1, [pc, #556]	; (800096c <OTM8009A_Init+0x38c>)
 8000740:	200e      	movs	r0, #14
 8000742:	f000 fe85 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000746:	498a      	ldr	r1, [pc, #552]	; (8000970 <OTM8009A_Init+0x390>)
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fe81 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800074e:	4989      	ldr	r1, [pc, #548]	; (8000974 <OTM8009A_Init+0x394>)
 8000750:	200e      	movs	r0, #14
 8000752:	f000 fe7d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000756:	4988      	ldr	r1, [pc, #544]	; (8000978 <OTM8009A_Init+0x398>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fe79 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800075e:	4987      	ldr	r1, [pc, #540]	; (800097c <OTM8009A_Init+0x39c>)
 8000760:	200a      	movs	r0, #10
 8000762:	f000 fe75 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000766:	4986      	ldr	r1, [pc, #536]	; (8000980 <OTM8009A_Init+0x3a0>)
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fe71 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800076e:	4985      	ldr	r1, [pc, #532]	; (8000984 <OTM8009A_Init+0x3a4>)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fe6d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000776:	495d      	ldr	r1, [pc, #372]	; (80008ec <OTM8009A_Init+0x30c>)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fe69 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800077e:	4982      	ldr	r1, [pc, #520]	; (8000988 <OTM8009A_Init+0x3a8>)
 8000780:	200a      	movs	r0, #10
 8000782:	f000 fe65 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000786:	4981      	ldr	r1, [pc, #516]	; (800098c <OTM8009A_Init+0x3ac>)
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fe61 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800078e:	4980      	ldr	r1, [pc, #512]	; (8000990 <OTM8009A_Init+0x3b0>)
 8000790:	200f      	movs	r0, #15
 8000792:	f000 fe5d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000796:	4974      	ldr	r1, [pc, #464]	; (8000968 <OTM8009A_Init+0x388>)
 8000798:	2000      	movs	r0, #0
 800079a:	f000 fe59 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800079e:	497d      	ldr	r1, [pc, #500]	; (8000994 <OTM8009A_Init+0x3b4>)
 80007a0:	200f      	movs	r0, #15
 80007a2:	f000 fe55 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80007a6:	4972      	ldr	r1, [pc, #456]	; (8000970 <OTM8009A_Init+0x390>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fe51 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80007ae:	497a      	ldr	r1, [pc, #488]	; (8000998 <OTM8009A_Init+0x3b8>)
 80007b0:	200a      	movs	r0, #10
 80007b2:	f000 fe4d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80007b6:	4970      	ldr	r1, [pc, #448]	; (8000978 <OTM8009A_Init+0x398>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fe49 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80007be:	4977      	ldr	r1, [pc, #476]	; (800099c <OTM8009A_Init+0x3bc>)
 80007c0:	200f      	movs	r0, #15
 80007c2:	f000 fe45 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80007c6:	496e      	ldr	r1, [pc, #440]	; (8000980 <OTM8009A_Init+0x3a0>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fe41 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80007ce:	4974      	ldr	r1, [pc, #464]	; (80009a0 <OTM8009A_Init+0x3c0>)
 80007d0:	200f      	movs	r0, #15
 80007d2:	f000 fe3d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80007d6:	4973      	ldr	r1, [pc, #460]	; (80009a4 <OTM8009A_Init+0x3c4>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fe39 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <OTM8009A_Init+0x3c8>)
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 fe35 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80007e6:	4971      	ldr	r1, [pc, #452]	; (80009ac <OTM8009A_Init+0x3cc>)
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fe31 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80007ee:	4970      	ldr	r1, [pc, #448]	; (80009b0 <OTM8009A_Init+0x3d0>)
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fe2d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80007f6:	493d      	ldr	r1, [pc, #244]	; (80008ec <OTM8009A_Init+0x30c>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fe29 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80007fe:	496d      	ldr	r1, [pc, #436]	; (80009b4 <OTM8009A_Init+0x3d4>)
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fe25 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000806:	4961      	ldr	r1, [pc, #388]	; (800098c <OTM8009A_Init+0x3ac>)
 8000808:	2000      	movs	r0, #0
 800080a:	f000 fe21 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800080e:	496a      	ldr	r1, [pc, #424]	; (80009b8 <OTM8009A_Init+0x3d8>)
 8000810:	200f      	movs	r0, #15
 8000812:	f000 fe1d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000816:	4954      	ldr	r1, [pc, #336]	; (8000968 <OTM8009A_Init+0x388>)
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fe19 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800081e:	4967      	ldr	r1, [pc, #412]	; (80009bc <OTM8009A_Init+0x3dc>)
 8000820:	200f      	movs	r0, #15
 8000822:	f000 fe15 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000826:	4952      	ldr	r1, [pc, #328]	; (8000970 <OTM8009A_Init+0x390>)
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fe11 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800082e:	4964      	ldr	r1, [pc, #400]	; (80009c0 <OTM8009A_Init+0x3e0>)
 8000830:	200a      	movs	r0, #10
 8000832:	f000 fe0d 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000836:	4950      	ldr	r1, [pc, #320]	; (8000978 <OTM8009A_Init+0x398>)
 8000838:	2000      	movs	r0, #0
 800083a:	f000 fe09 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800083e:	4961      	ldr	r1, [pc, #388]	; (80009c4 <OTM8009A_Init+0x3e4>)
 8000840:	200f      	movs	r0, #15
 8000842:	f000 fe05 	bl	8001450 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000846:	494e      	ldr	r1, [pc, #312]	; (8000980 <OTM8009A_Init+0x3a0>)
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fe01 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800084e:	495e      	ldr	r1, [pc, #376]	; (80009c8 <OTM8009A_Init+0x3e8>)
 8000850:	200f      	movs	r0, #15
 8000852:	f000 fdfd 	bl	8001450 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000856:	4931      	ldr	r1, [pc, #196]	; (800091c <OTM8009A_Init+0x33c>)
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fdf9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800085e:	495b      	ldr	r1, [pc, #364]	; (80009cc <OTM8009A_Init+0x3ec>)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fdf5 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000866:	495a      	ldr	r1, [pc, #360]	; (80009d0 <OTM8009A_Init+0x3f0>)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 fdf1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800086e:	4959      	ldr	r1, [pc, #356]	; (80009d4 <OTM8009A_Init+0x3f4>)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fded 	bl	8001450 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000876:	4958      	ldr	r1, [pc, #352]	; (80009d8 <OTM8009A_Init+0x3f8>)
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fde9 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800087e:	4957      	ldr	r1, [pc, #348]	; (80009dc <OTM8009A_Init+0x3fc>)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fde5 	bl	8001450 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000886:	4917      	ldr	r1, [pc, #92]	; (80008e4 <OTM8009A_Init+0x304>)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fde1 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800088e:	4954      	ldr	r1, [pc, #336]	; (80009e0 <OTM8009A_Init+0x400>)
 8000890:	2003      	movs	r0, #3
 8000892:	f000 fddd 	bl	8001450 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000896:	4913      	ldr	r1, [pc, #76]	; (80008e4 <OTM8009A_Init+0x304>)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fdd9 	bl	8001450 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800089e:	4911      	ldr	r1, [pc, #68]	; (80008e4 <OTM8009A_Init+0x304>)
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fdd5 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80008a6:	494f      	ldr	r1, [pc, #316]	; (80009e4 <OTM8009A_Init+0x404>)
 80008a8:	2010      	movs	r0, #16
 80008aa:	f000 fdd1 	bl	8001450 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <OTM8009A_Init+0x304>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fdcd 	bl	8001450 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80008b6:	494c      	ldr	r1, [pc, #304]	; (80009e8 <OTM8009A_Init+0x408>)
 80008b8:	2010      	movs	r0, #16
 80008ba:	f000 fdc9 	bl	8001450 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80008be:	494b      	ldr	r1, [pc, #300]	; (80009ec <OTM8009A_Init+0x40c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fdc5 	bl	8001450 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80008c6:	2078      	movs	r0, #120	; 0x78
 80008c8:	f000 f964 	bl	8000b94 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 8090 	beq.w	80009f4 <OTM8009A_Init+0x414>
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d000      	beq.n	80008da <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 80008d8:	e091      	b.n	80009fe <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80008da:	4945      	ldr	r1, [pc, #276]	; (80009f0 <OTM8009A_Init+0x410>)
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fdb7 	bl	8001450 <DSI_IO_WriteCmd>
    break;
 80008e2:	e08c      	b.n	80009fe <OTM8009A_Init+0x41e>
 80008e4:	08007f44 	.word	0x08007f44
 80008e8:	08007dfc 	.word	0x08007dfc
 80008ec:	08007f48 	.word	0x08007f48
 80008f0:	08007e00 	.word	0x08007e00
 80008f4:	08007f4c 	.word	0x08007f4c
 80008f8:	08007f50 	.word	0x08007f50
 80008fc:	08007f54 	.word	0x08007f54
 8000900:	08007f58 	.word	0x08007f58
 8000904:	08007f5c 	.word	0x08007f5c
 8000908:	08007f60 	.word	0x08007f60
 800090c:	08007f64 	.word	0x08007f64
 8000910:	08007f68 	.word	0x08007f68
 8000914:	08007f6c 	.word	0x08007f6c
 8000918:	08007f70 	.word	0x08007f70
 800091c:	08007f74 	.word	0x08007f74
 8000920:	08007f78 	.word	0x08007f78
 8000924:	08007f7c 	.word	0x08007f7c
 8000928:	08007f80 	.word	0x08007f80
 800092c:	08007f84 	.word	0x08007f84
 8000930:	08007f88 	.word	0x08007f88
 8000934:	08007f8c 	.word	0x08007f8c
 8000938:	08007e2c 	.word	0x08007e2c
 800093c:	08007f90 	.word	0x08007f90
 8000940:	08007f94 	.word	0x08007f94
 8000944:	08007f98 	.word	0x08007f98
 8000948:	08007f9c 	.word	0x08007f9c
 800094c:	08007fa0 	.word	0x08007fa0
 8000950:	08007fa4 	.word	0x08007fa4
 8000954:	08007fa8 	.word	0x08007fa8
 8000958:	08007fac 	.word	0x08007fac
 800095c:	08007fb0 	.word	0x08007fb0
 8000960:	08007e30 	.word	0x08007e30
 8000964:	08007e34 	.word	0x08007e34
 8000968:	08007fb4 	.word	0x08007fb4
 800096c:	08007e3c 	.word	0x08007e3c
 8000970:	08007fb8 	.word	0x08007fb8
 8000974:	08007e4c 	.word	0x08007e4c
 8000978:	08007fbc 	.word	0x08007fbc
 800097c:	08007e5c 	.word	0x08007e5c
 8000980:	08007fc0 	.word	0x08007fc0
 8000984:	08007ff8 	.word	0x08007ff8
 8000988:	08007e68 	.word	0x08007e68
 800098c:	08007fc4 	.word	0x08007fc4
 8000990:	08007e74 	.word	0x08007e74
 8000994:	08007e84 	.word	0x08007e84
 8000998:	08007e94 	.word	0x08007e94
 800099c:	08007ea0 	.word	0x08007ea0
 80009a0:	08007eb0 	.word	0x08007eb0
 80009a4:	08007fc8 	.word	0x08007fc8
 80009a8:	08007ec0 	.word	0x08007ec0
 80009ac:	08007fcc 	.word	0x08007fcc
 80009b0:	08007ecc 	.word	0x08007ecc
 80009b4:	08007ed8 	.word	0x08007ed8
 80009b8:	08007ee4 	.word	0x08007ee4
 80009bc:	08007ef4 	.word	0x08007ef4
 80009c0:	08007f04 	.word	0x08007f04
 80009c4:	08007f10 	.word	0x08007f10
 80009c8:	08007f20 	.word	0x08007f20
 80009cc:	08007ffc 	.word	0x08007ffc
 80009d0:	08008000 	.word	0x08008000
 80009d4:	08008004 	.word	0x08008004
 80009d8:	08008008 	.word	0x08008008
 80009dc:	0800800c 	.word	0x0800800c
 80009e0:	08007f30 	.word	0x08007f30
 80009e4:	08007e04 	.word	0x08007e04
 80009e8:	08007e18 	.word	0x08007e18
 80009ec:	08007fd0 	.word	0x08007fd0
 80009f0:	08007fd4 	.word	0x08007fd4
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80009f4:	491a      	ldr	r1, [pc, #104]	; (8000a60 <OTM8009A_Init+0x480>)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fd2a 	bl	8001450 <DSI_IO_WriteCmd>
    break;
 80009fc:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10b      	bne.n	8000a1c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000a04:	4917      	ldr	r1, [pc, #92]	; (8000a64 <OTM8009A_Init+0x484>)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fd22 	bl	8001450 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000a0c:	4916      	ldr	r1, [pc, #88]	; (8000a68 <OTM8009A_Init+0x488>)
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f000 fd1e 	bl	8001450 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000a14:	4915      	ldr	r1, [pc, #84]	; (8000a6c <OTM8009A_Init+0x48c>)
 8000a16:	2004      	movs	r0, #4
 8000a18:	f000 fd1a 	bl	8001450 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000a1c:	4914      	ldr	r1, [pc, #80]	; (8000a70 <OTM8009A_Init+0x490>)
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 fd16 	bl	8001450 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000a24:	4913      	ldr	r1, [pc, #76]	; (8000a74 <OTM8009A_Init+0x494>)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fd12 	bl	8001450 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000a2c:	4912      	ldr	r1, [pc, #72]	; (8000a78 <OTM8009A_Init+0x498>)
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fd0e 	bl	8001450 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <OTM8009A_Init+0x49c>)
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 fd0a 	bl	8001450 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <OTM8009A_Init+0x4a0>)
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fd06 	bl	8001450 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a44:	490f      	ldr	r1, [pc, #60]	; (8000a84 <OTM8009A_Init+0x4a4>)
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 fd02 	bl	8001450 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000a4c:	490e      	ldr	r1, [pc, #56]	; (8000a88 <OTM8009A_Init+0x4a8>)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fcfe 	bl	8001450 <DSI_IO_WriteCmd>

  return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08007fd8 	.word	0x08007fd8
 8000a64:	08007fdc 	.word	0x08007fdc
 8000a68:	08007f34 	.word	0x08007f34
 8000a6c:	08007f3c 	.word	0x08007f3c
 8000a70:	08007fe0 	.word	0x08007fe0
 8000a74:	08007fe4 	.word	0x08007fe4
 8000a78:	08007fe8 	.word	0x08007fe8
 8000a7c:	08007fec 	.word	0x08007fec
 8000a80:	08007ff0 	.word	0x08007ff0
 8000a84:	08007f44 	.word	0x08007f44
 8000a88:	08007ff4 	.word	0x08007ff4

08000a8c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <BSP_LED_Init+0x54>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <BSP_LED_Init+0x54>)
 8000a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <BSP_LED_Init+0x54>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <BSP_LED_Init+0x58>)
 8000ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <BSP_LED_Init+0x5c>)
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	f107 020c 	add.w	r2, r7, #12
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 f9cc 	bl	8003e70 <HAL_GPIO_Init>

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008

08000aec <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	460a      	mov	r2, r1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <BSP_PB_Init+0x9c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <BSP_PB_Init+0x9c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <BSP_PB_Init+0x9c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d111      	bne.n	8000b3e <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <BSP_PB_Init+0xa0>)
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	f107 020c 	add.w	r2, r7, #12
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f999 	bl	8003e70 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000b3e:	79bb      	ldrb	r3, [r7, #6]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d11d      	bne.n	8000b80 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000b44:	2301      	movs	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <BSP_PB_Init+0xa4>)
 8000b52:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <BSP_PB_Init+0xa0>)
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	f107 020c 	add.w	r2, r7, #12
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 f984 	bl	8003e70 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000b68:	2306      	movs	r3, #6
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	210f      	movs	r1, #15
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fc72 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000b76:	2306      	movs	r3, #6
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fc89 	bl	8002492 <HAL_NVIC_EnableIRQ>
  }
}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	10110000 	.word	0x10110000

08000b94 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f001 f81f 	bl	8001be0 <HAL_Delay>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f000 f804 	bl	8000bbc <BSP_LCD_InitEx>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b090      	sub	sp, #64	; 0x40
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000bc6:	f646 3325 	movw	r3, #27429	; 0x6b25
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000bd4:	f000 f936 	bl	8000e44 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000bd8:	f000 fc64 	bl	80014a4 <LCD_IO_GetID>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000be2:	2b11      	cmp	r3, #17
 8000be4:	d001      	beq.n	8000bea <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000be6:	2301      	movs	r3, #1
 8000be8:	e113      	b.n	8000e12 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8000bea:	f000 fc63 	bl	80014b4 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8000bee:	4b8b      	ldr	r3, [pc, #556]	; (8000e1c <BSP_LCD_InitEx+0x260>)
 8000bf0:	4a8b      	ldr	r2, [pc, #556]	; (8000e20 <BSP_LCD_InitEx+0x264>)
 8000bf2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000bf4:	4889      	ldr	r0, [pc, #548]	; (8000e1c <BSP_LCD_InitEx+0x260>)
 8000bf6:	f002 fa2d 	bl	8003054 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000c06:	f24f 4324 	movw	r3, #62500	; 0xf424
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000c0c:	4b83      	ldr	r3, [pc, #524]	; (8000e1c <BSP_LCD_InitEx+0x260>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	4a83      	ldr	r2, [pc, #524]	; (8000e24 <BSP_LCD_InitEx+0x268>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	0a9b      	lsrs	r3, r3, #10
 8000c1e:	4a7f      	ldr	r2, [pc, #508]	; (8000e1c <BSP_LCD_InitEx+0x260>)
 8000c20:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4619      	mov	r1, r3
 8000c28:	487c      	ldr	r0, [pc, #496]	; (8000e1c <BSP_LCD_InitEx+0x260>)
 8000c2a:	f002 f8f9 	bl	8002e20 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d108      	bne.n	8000c46 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000c34:	4b7c      	ldr	r3, [pc, #496]	; (8000e28 <BSP_LCD_InitEx+0x26c>)
 8000c36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c3a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000c3c:	4b7b      	ldr	r3, [pc, #492]	; (8000e2c <BSP_LCD_InitEx+0x270>)
 8000c3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	e007      	b.n	8000c56 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000c46:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <BSP_LCD_InitEx+0x26c>)
 8000c48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c4c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000c4e:	4b77      	ldr	r3, [pc, #476]	; (8000e2c <BSP_LCD_InitEx+0x270>)
 8000c50:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c54:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000c56:	4b74      	ldr	r3, [pc, #464]	; (8000e28 <BSP_LCD_InitEx+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8000c5c:	4b73      	ldr	r3, [pc, #460]	; (8000e2c <BSP_LCD_InitEx+0x270>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000c66:	230f      	movs	r3, #15
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8000c72:	2322      	movs	r3, #34	; 0x22
 8000c74:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8000c76:	2322      	movs	r3, #34	; 0x22
 8000c78:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000c7a:	4b6d      	ldr	r3, [pc, #436]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000c80:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000c82:	2205      	movs	r2, #5
 8000c84:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c86:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000c8c:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000c92:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000c98:	4b65      	ldr	r3, [pc, #404]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000c9e:	4b64      	ldr	r3, [pc, #400]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000ca0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ca4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000ca6:	4b62      	ldr	r3, [pc, #392]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000cac:	4a60      	ldr	r2, [pc, #384]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cb6:	fb02 f203 	mul.w	r2, r2, r3
 8000cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	4a5b      	ldr	r2, [pc, #364]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000cc2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cc8:	fb02 f203 	mul.w	r2, r2, r3
 8000ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4a57      	ldr	r2, [pc, #348]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	441a      	add	r2, r3
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	441a      	add	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ce6:	fb02 f203 	mul.w	r2, r2, r3
 8000cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf0:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000cf4:	4a4e      	ldr	r2, [pc, #312]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000cfa:	4a4d      	ldr	r2, [pc, #308]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000d00:	4a4b      	ldr	r2, [pc, #300]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000d06:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000d0c:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000d14:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000d20:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000d28:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d36:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000d38:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000d40:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d46:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000d50:	4937      	ldr	r1, [pc, #220]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000d52:	4832      	ldr	r0, [pc, #200]	; (8000e1c <BSP_LCD_InitEx+0x260>)
 8000d54:	f002 fad6 	bl	8003304 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a35      	ldr	r2, [pc, #212]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000d5e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4413      	add	r3, r2
 8000d66:	3b01      	subs	r3, #1
 8000d68:	4a32      	ldr	r2, [pc, #200]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000d6a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <BSP_LCD_InitEx+0x26c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	441a      	add	r2, r3
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4413      	add	r3, r2
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4a2e      	ldr	r2, [pc, #184]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000d7c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <BSP_LCD_InitEx+0x26c>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	441a      	add	r2, r3
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	441a      	add	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4a28      	ldr	r2, [pc, #160]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000d92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <BSP_LCD_InitEx+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000d9a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <BSP_LCD_InitEx+0x270>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a24      	ldr	r2, [pc, #144]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000da2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <BSP_LCD_InitEx+0x27c>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <BSP_LCD_InitEx+0x27c>)
 8000dac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000db0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <BSP_LCD_InitEx+0x27c>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <BSP_LCD_InitEx+0x27c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000dbe:	481e      	ldr	r0, [pc, #120]	; (8000e38 <BSP_LCD_InitEx+0x27c>)
 8000dc0:	f004 fa78 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <BSP_LCD_InitEx+0x280>)
 8000de6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000de8:	4911      	ldr	r1, [pc, #68]	; (8000e30 <BSP_LCD_InitEx+0x274>)
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000dec:	f003 fdb6 	bl	800495c <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <BSP_LCD_InitEx+0x278>)
 8000df2:	f003 fb0b 	bl	800440c <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000df6:	4809      	ldr	r0, [pc, #36]	; (8000e1c <BSP_LCD_InitEx+0x260>)
 8000df8:	f002 ff16 	bl	8003c28 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000dfc:	f000 fcda 	bl	80017b4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <BSP_LCD_InitEx+0x284>)
 8000e02:	f000 f901 	bl	8001008 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fbe8 	bl	80005e0 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3740      	adds	r7, #64	; 0x40
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000378 	.word	0x20000378
 8000e20:	40016c00 	.word	0x40016c00
 8000e24:	43215e57 	.word	0x43215e57
 8000e28:	20000024 	.word	0x20000024
 8000e2c:	20000028 	.word	0x20000028
 8000e30:	200000bc 	.word	0x200000bc
 8000e34:	200002d0 	.word	0x200002d0
 8000e38:	20000144 	.word	0x20000144
 8000e3c:	40016800 	.word	0x40016800
 8000e40:	20000014 	.word	0x20000014

08000e44 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <BSP_LCD_Reset+0x68>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <BSP_LCD_Reset+0x68>)
 8000e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <BSP_LCD_Reset+0x68>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8000e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e66:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <BSP_LCD_Reset+0x6c>)
 8000e7a:	f002 fff9 	bl	8003e70 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <BSP_LCD_Reset+0x6c>)
 8000e86:	f003 faa7 	bl	80043d8 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000e8a:	2014      	movs	r0, #20
 8000e8c:	f000 fea8 	bl	8001be0 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <BSP_LCD_Reset+0x6c>)
 8000e98:	f003 fa9e 	bl	80043d8 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8000e9c:	200a      	movs	r0, #10
 8000e9e:	f000 fe9f 	bl	8001be0 <HAL_Delay>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40022400 	.word	0x40022400

08000eb4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <BSP_LCD_GetXSize+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000024 	.word	0x20000024

08000ecc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <BSP_LCD_GetYSize+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000028 	.word	0x20000028

08000ee4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b090      	sub	sp, #64	; 0x40
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000ef4:	f7ff ffde 	bl	8000eb4 <BSP_LCD_GetXSize>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000f00:	f7ff ffe4 	bl	8000ecc <BSP_LCD_GetYSize>
 8000f04:	4603      	mov	r3, r0
 8000f06:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000f10:	23ff      	movs	r3, #255	; 0xff
 8000f12:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f30:	2307      	movs	r3, #7
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000f34:	f7ff ffbe 	bl	8000eb4 <BSP_LCD_GetXSize>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000f3c:	f7ff ffc6 	bl	8000ecc <BSP_LCD_GetYSize>
 8000f40:	4603      	mov	r3, r0
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000f44:	88fa      	ldrh	r2, [r7, #6]
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4812      	ldr	r0, [pc, #72]	; (8000f98 <BSP_LCD_LayerDefaultInit+0xb4>)
 8000f4e:	f003 fb2d 	bl	80045ac <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000f52:	88fa      	ldrh	r2, [r7, #6]
 8000f54:	4911      	ldr	r1, [pc, #68]	; (8000f9c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	3304      	adds	r3, #4
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000f68:	88fa      	ldrh	r2, [r7, #6]
 8000f6a:	490c      	ldr	r1, [pc, #48]	; (8000f9c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	3308      	adds	r3, #8
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8000f7a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000f7c:	88fa      	ldrh	r2, [r7, #6]
 8000f7e:	4907      	ldr	r1, [pc, #28]	; (8000f9c <BSP_LCD_LayerDefaultInit+0xb8>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3740      	adds	r7, #64	; 0x40
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200002d0 	.word	0x200002d0
 8000f9c:	2000012c 	.word	0x2000012c
 8000fa0:	20000014 	.word	0x20000014

08000fa4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <BSP_LCD_SetTextColor+0x28>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <BSP_LCD_SetTextColor+0x2c>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	20000128 	.word	0x20000128
 8000fd0:	2000012c 	.word	0x2000012c

08000fd4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <BSP_LCD_SetBackColor+0x2c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4908      	ldr	r1, [pc, #32]	; (8001004 <BSP_LCD_SetBackColor+0x30>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	3304      	adds	r3, #4
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000128 	.word	0x20000128
 8001004:	2000012c 	.word	0x2000012c

08001008 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <BSP_LCD_SetFont+0x2c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <BSP_LCD_SetFont+0x30>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3308      	adds	r3, #8
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000128 	.word	0x20000128
 8001038:	2000012c 	.word	0x2000012c

0800103c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <BSP_LCD_Clear+0x48>)
 8001046:	681c      	ldr	r4, [r3, #0]
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <BSP_LCD_Clear+0x48>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <BSP_LCD_Clear+0x4c>)
 800104e:	2134      	movs	r1, #52	; 0x34
 8001050:	fb01 f303 	mul.w	r3, r1, r3
 8001054:	4413      	add	r3, r2
 8001056:	335c      	adds	r3, #92	; 0x5c
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	461d      	mov	r5, r3
 800105c:	f7ff ff2a 	bl	8000eb4 <BSP_LCD_GetXSize>
 8001060:	4606      	mov	r6, r0
 8001062:	f7ff ff33 	bl	8000ecc <BSP_LCD_GetYSize>
 8001066:	4602      	mov	r2, r0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2300      	movs	r3, #0
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	4632      	mov	r2, r6
 8001074:	4629      	mov	r1, r5
 8001076:	4620      	mov	r0, r4
 8001078:	f000 fb64 	bl	8001744 <LL_FillBuffer>
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001084:	20000128 	.word	0x20000128
 8001088:	200002d0 	.word	0x200002d0

0800108c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	80bb      	strh	r3, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	491b      	ldr	r1, [pc, #108]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3308      	adds	r3, #8
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4c14      	ldr	r4, [pc, #80]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4423      	add	r3, r4
 80010ca:	3308      	adds	r3, #8
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010d0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <BSP_LCD_DisplayChar+0x80>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4c0d      	ldr	r4, [pc, #52]	; (8001110 <BSP_LCD_DisplayChar+0x84>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4423      	add	r3, r4
 80010e4:	3308      	adds	r3, #8
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	889b      	ldrh	r3, [r3, #4]
 80010ea:	3307      	adds	r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da00      	bge.n	80010f2 <BSP_LCD_DisplayChar+0x66>
 80010f0:	3307      	adds	r3, #7
 80010f2:	10db      	asrs	r3, r3, #3
 80010f4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010f8:	18ca      	adds	r2, r1, r3
 80010fa:	88b9      	ldrh	r1, [r7, #4]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fa68 	bl	80015d4 <DrawChar>
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	20000128 	.word	0x20000128
 8001110:	2000012c 	.word	0x2000012c

08001114 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
 8001122:	460b      	mov	r3, r1
 8001124:	81bb      	strh	r3, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800112a:	2301      	movs	r3, #1
 800112c:	83fb      	strh	r3, [r7, #30]
 800112e:	2300      	movs	r3, #0
 8001130:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800113e:	e002      	b.n	8001146 <BSP_LCD_DisplayStringAt+0x32>
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	3301      	adds	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	617a      	str	r2, [r7, #20]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f6      	bne.n	8001140 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001152:	f7ff feaf 	bl	8000eb4 <BSP_LCD_GetXSize>
 8001156:	4b4f      	ldr	r3, [pc, #316]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	494f      	ldr	r1, [pc, #316]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3308      	adds	r3, #8
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001170:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d01c      	beq.n	80011b2 <BSP_LCD_DisplayStringAt+0x9e>
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <BSP_LCD_DisplayStringAt+0x98>
 800117c:	2b01      	cmp	r3, #1
 800117e:	d12e      	bne.n	80011de <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad1      	subs	r1, r2, r3
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4843      	ldr	r0, [pc, #268]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4403      	add	r3, r0
 8001196:	3308      	adds	r3, #8
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	889b      	ldrh	r3, [r3, #4]
 800119c:	fb03 f301 	mul.w	r3, r3, r1
 80011a0:	085b      	lsrs	r3, r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	4413      	add	r3, r2
 80011a8:	83fb      	strh	r3, [r7, #30]
      break;
 80011aa:	e01b      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	83fb      	strh	r3, [r7, #30]
      break;
 80011b0:	e018      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	b299      	uxth	r1, r3
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4836      	ldr	r0, [pc, #216]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4403      	add	r3, r0
 80011ca:	3308      	adds	r3, #8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	889b      	ldrh	r3, [r3, #4]
 80011d0:	fb11 f303 	smulbb	r3, r1, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	83fb      	strh	r3, [r7, #30]
      break;
 80011dc:	e002      	b.n	80011e4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	83fb      	strh	r3, [r7, #30]
      break;
 80011e2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80011e4:	8bfb      	ldrh	r3, [r7, #30]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <BSP_LCD_DisplayStringAt+0xde>
 80011ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da1d      	bge.n	800122e <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80011f6:	e01a      	b.n	800122e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	89b9      	ldrh	r1, [r7, #12]
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff43 	bl	800108c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4923      	ldr	r1, [pc, #140]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3308      	adds	r3, #8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	889a      	ldrh	r2, [r3, #4]
 800121c:	8bfb      	ldrh	r3, [r7, #30]
 800121e:	4413      	add	r3, r2
 8001220:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3301      	adds	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
    i++;
 8001228:	8bbb      	ldrh	r3, [r7, #28]
 800122a:	3301      	adds	r3, #1
 800122c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2dc      	uxtb	r4, r3
 800123c:	f7ff fe3a 	bl	8000eb4 <BSP_LCD_GetXSize>
 8001240:	4605      	mov	r5, r0
 8001242:	8bb9      	ldrh	r1, [r7, #28]
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4403      	add	r3, r0
 8001254:	3308      	adds	r3, #8
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	fb03 f301 	mul.w	r3, r3, r1
 800125e:	1aeb      	subs	r3, r5, r3
 8001260:	b299      	uxth	r1, r3
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <BSP_LCD_DisplayStringAt+0x180>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <BSP_LCD_DisplayStringAt+0x184>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4403      	add	r3, r0
 8001272:	3308      	adds	r3, #8
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	889b      	ldrh	r3, [r3, #4]
 8001278:	4299      	cmp	r1, r3
 800127a:	bf2c      	ite	cs
 800127c:	2301      	movcs	r3, #1
 800127e:	2300      	movcc	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4023      	ands	r3, r4
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1b6      	bne.n	80011f8 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	20000128 	.word	0x20000128
 8001298:	2000012c 	.word	0x2000012c

0800129c <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <BSP_LCD_DrawHLine+0x70>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <BSP_LCD_DrawHLine+0x74>)
 80012b8:	2134      	movs	r1, #52	; 0x34
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4413      	add	r3, r2
 80012c0:	335c      	adds	r3, #92	; 0x5c
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	f7ff fdf6 	bl	8000eb4 <BSP_LCD_GetXSize>
 80012c8:	4602      	mov	r2, r0
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	fb03 f202 	mul.w	r2, r3, r2
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4423      	add	r3, r4
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <BSP_LCD_DrawHLine+0x70>)
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	68fc      	ldr	r4, [r7, #12]
 80012e0:	887d      	ldrh	r5, [r7, #2]
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <BSP_LCD_DrawHLine+0x70>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	490b      	ldr	r1, [pc, #44]	; (8001314 <BSP_LCD_DrawHLine+0x78>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	462a      	mov	r2, r5
 80012fe:	4621      	mov	r1, r4
 8001300:	f000 fa20 	bl	8001744 <LL_FillBuffer>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bdb0      	pop	{r4, r5, r7, pc}
 800130c:	20000128 	.word	0x20000128
 8001310:	200002d0 	.word	0x200002d0
 8001314:	2000012c 	.word	0x2000012c

08001318 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b087      	sub	sp, #28
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	460b      	mov	r3, r1
 8001324:	80bb      	strh	r3, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <BSP_LCD_DrawVLine+0x78>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <BSP_LCD_DrawVLine+0x7c>)
 8001334:	2134      	movs	r1, #52	; 0x34
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	335c      	adds	r3, #92	; 0x5c
 800133e:	681c      	ldr	r4, [r3, #0]
 8001340:	f7ff fdb8 	bl	8000eb4 <BSP_LCD_GetXSize>
 8001344:	4602      	mov	r2, r0
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	fb03 f202 	mul.w	r2, r3, r2
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4423      	add	r3, r4
 8001354:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <BSP_LCD_DrawVLine+0x78>)
 8001358:	681c      	ldr	r4, [r3, #0]
 800135a:	68fd      	ldr	r5, [r7, #12]
 800135c:	887e      	ldrh	r6, [r7, #2]
 800135e:	f7ff fda9 	bl	8000eb4 <BSP_LCD_GetXSize>
 8001362:	4603      	mov	r3, r0
 8001364:	1e59      	subs	r1, r3, #1
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <BSP_LCD_DrawVLine+0x78>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <BSP_LCD_DrawVLine+0x80>)
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4403      	add	r3, r0
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	9100      	str	r1, [sp, #0]
 800137c:	4633      	mov	r3, r6
 800137e:	2201      	movs	r2, #1
 8001380:	4629      	mov	r1, r5
 8001382:	4620      	mov	r0, r4
 8001384:	f000 f9de 	bl	8001744 <LL_FillBuffer>
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001390:	20000128 	.word	0x20000128
 8001394:	200002d0 	.word	0x200002d0
 8001398:	2000012c 	.word	0x2000012c

0800139c <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af02      	add	r7, sp, #8
 80013a4:	4604      	mov	r4, r0
 80013a6:	4608      	mov	r0, r1
 80013a8:	4611      	mov	r1, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	4623      	mov	r3, r4
 80013ae:	80fb      	strh	r3, [r7, #6]
 80013b0:	4603      	mov	r3, r0
 80013b2:	80bb      	strh	r3, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <BSP_LCD_FillRect+0xa8>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4920      	ldr	r1, [pc, #128]	; (8001448 <BSP_LCD_FillRect+0xac>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fde6 	bl	8000fa4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <BSP_LCD_FillRect+0xa8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <BSP_LCD_FillRect+0xb0>)
 80013de:	2134      	movs	r1, #52	; 0x34
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	335c      	adds	r3, #92	; 0x5c
 80013e8:	681c      	ldr	r4, [r3, #0]
 80013ea:	f7ff fd63 	bl	8000eb4 <BSP_LCD_GetXSize>
 80013ee:	4602      	mov	r2, r0
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	fb03 f202 	mul.w	r2, r3, r2
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4423      	add	r3, r4
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <BSP_LCD_FillRect+0xa8>)
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	68fd      	ldr	r5, [r7, #12]
 8001406:	887e      	ldrh	r6, [r7, #2]
 8001408:	f8b7 8000 	ldrh.w	r8, [r7]
 800140c:	f7ff fd52 	bl	8000eb4 <BSP_LCD_GetXSize>
 8001410:	4602      	mov	r2, r0
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	1ad1      	subs	r1, r2, r3
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <BSP_LCD_FillRect+0xa8>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <BSP_LCD_FillRect+0xac>)
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4403      	add	r3, r0
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	9100      	str	r1, [sp, #0]
 800142c:	4643      	mov	r3, r8
 800142e:	4632      	mov	r2, r6
 8001430:	4629      	mov	r1, r5
 8001432:	4620      	mov	r0, r4
 8001434:	f000 f986 	bl	8001744 <LL_FillBuffer>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001442:	bf00      	nop
 8001444:	20000128 	.word	0x20000128
 8001448:	2000012c 	.word	0x2000012c
 800144c:	200002d0 	.word	0x200002d0

08001450 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af02      	add	r7, sp, #8
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d80d      	bhi.n	800147c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	2215      	movs	r2, #21
 8001472:	2100      	movs	r1, #0
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <DSI_IO_WriteCmd+0x50>)
 8001476:	f002 fc13 	bl	8003ca0 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 800147a:	e00d      	b.n	8001498 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	9200      	str	r2, [sp, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2239      	movs	r2, #57	; 0x39
 8001490:	2100      	movs	r1, #0
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <DSI_IO_WriteCmd+0x50>)
 8001494:	f002 fc26 	bl	8003ce4 <HAL_DSI_LongWrite>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000378 	.word	0x20000378

080014a4 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80014a8:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a31      	ldr	r2, [pc, #196]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014dc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	4a28      	ldr	r2, [pc, #160]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80014e8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a25      	ldr	r2, [pc, #148]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800150c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001514:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001518:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a19      	ldr	r2, [pc, #100]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001520:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800153c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <BSP_LCD_MspInit+0xd0>)
 8001544:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001548:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2103      	movs	r1, #3
 800154e:	2058      	movs	r0, #88	; 0x58
 8001550:	f000 ff83 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001554:	2058      	movs	r0, #88	; 0x58
 8001556:	f000 ff9c 	bl	8002492 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2103      	movs	r1, #3
 800155e:	205a      	movs	r0, #90	; 0x5a
 8001560:	f000 ff7b 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001564:	205a      	movs	r0, #90	; 0x5a
 8001566:	f000 ff94 	bl	8002492 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2103      	movs	r1, #3
 800156e:	2062      	movs	r0, #98	; 0x62
 8001570:	f000 ff73 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001574:	2062      	movs	r0, #98	; 0x62
 8001576:	f000 ff8c 	bl	8002492 <HAL_NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	603a      	str	r2, [r7, #0]
 8001592:	80fb      	strh	r3, [r7, #6]
 8001594:	460b      	mov	r3, r1
 8001596:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <BSP_LCD_DrawPixel+0x44>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <BSP_LCD_DrawPixel+0x48>)
 800159e:	2134      	movs	r1, #52	; 0x34
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	335c      	adds	r3, #92	; 0x5c
 80015a8:	681c      	ldr	r4, [r3, #0]
 80015aa:	88bd      	ldrh	r5, [r7, #4]
 80015ac:	f7ff fc82 	bl	8000eb4 <BSP_LCD_GetXSize>
 80015b0:	4603      	mov	r3, r0
 80015b2:	fb03 f205 	mul.w	r2, r3, r5
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4423      	add	r3, r4
 80015be:	461a      	mov	r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	20000128 	.word	0x20000128
 80015d0:	200002d0 	.word	0x200002d0

080015d4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	603a      	str	r2, [r7, #0]
 80015de:	80fb      	strh	r3, [r7, #6]
 80015e0:	460b      	mov	r3, r1
 80015e2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <DrawChar+0x168>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4953      	ldr	r1, [pc, #332]	; (8001740 <DrawChar+0x16c>)
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	3308      	adds	r3, #8
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	88db      	ldrh	r3, [r3, #6]
 8001602:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001604:	4b4d      	ldr	r3, [pc, #308]	; (800173c <DrawChar+0x168>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	494d      	ldr	r1, [pc, #308]	; (8001740 <DrawChar+0x16c>)
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3308      	adds	r3, #8
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	889b      	ldrh	r3, [r3, #4]
 800161a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800161c:	8a3b      	ldrh	r3, [r7, #16]
 800161e:	3307      	adds	r3, #7
 8001620:	2b00      	cmp	r3, #0
 8001622:	da00      	bge.n	8001626 <DrawChar+0x52>
 8001624:	3307      	adds	r3, #7
 8001626:	10db      	asrs	r3, r3, #3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	b2da      	uxtb	r2, r3
 800162e:	8a3b      	ldrh	r3, [r7, #16]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e076      	b.n	800172a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800163c:	8a3b      	ldrh	r3, [r7, #16]
 800163e:	3307      	adds	r3, #7
 8001640:	2b00      	cmp	r3, #0
 8001642:	da00      	bge.n	8001646 <DrawChar+0x72>
 8001644:	3307      	adds	r3, #7
 8001646:	10db      	asrs	r3, r3, #3
 8001648:	461a      	mov	r2, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fb03 f302 	mul.w	r3, r3, r2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001656:	8a3b      	ldrh	r3, [r7, #16]
 8001658:	3307      	adds	r3, #7
 800165a:	2b00      	cmp	r3, #0
 800165c:	da00      	bge.n	8001660 <DrawChar+0x8c>
 800165e:	3307      	adds	r3, #7
 8001660:	10db      	asrs	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d002      	beq.n	800166c <DrawChar+0x98>
 8001666:	2b02      	cmp	r3, #2
 8001668:	d004      	beq.n	8001674 <DrawChar+0xa0>
 800166a:	e00c      	b.n	8001686 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	617b      	str	r3, [r7, #20]
      break;
 8001672:	e016      	b.n	80016a2 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	3201      	adds	r2, #1
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
      break;
 8001684:	e00d      	b.n	80016a2 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	3301      	adds	r3, #1
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	4313      	orrs	r3, r2
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	3202      	adds	r2, #2
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	4313      	orrs	r3, r2
 800169e:	617b      	str	r3, [r7, #20]
      break;
 80016a0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e036      	b.n	8001716 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80016a8:	8a3a      	ldrh	r2, [r7, #16]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4413      	add	r3, r2
 80016b2:	3b01      	subs	r3, #1
 80016b4:	2201      	movs	r2, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d012      	beq.n	80016ea <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	4413      	add	r3, r2
 80016cc:	b298      	uxth	r0, r3
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <DrawChar+0x168>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	491b      	ldr	r1, [pc, #108]	; (8001740 <DrawChar+0x16c>)
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff ff50 	bl	8001588 <BSP_LCD_DrawPixel>
 80016e8:	e012      	b.n	8001710 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4413      	add	r3, r2
 80016f2:	b298      	uxth	r0, r3
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <DrawChar+0x168>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4911      	ldr	r1, [pc, #68]	; (8001740 <DrawChar+0x16c>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3304      	adds	r3, #4
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	88bb      	ldrh	r3, [r7, #4]
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff ff3c 	bl	8001588 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	3301      	adds	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	8a3b      	ldrh	r3, [r7, #16]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3c4      	bcc.n	80016a8 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	8a7b      	ldrh	r3, [r7, #18]
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	429a      	cmp	r2, r3
 8001730:	d384      	bcc.n	800163c <DrawChar+0x68>
  }
}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000128 	.word	0x20000128
 8001740:	2000012c 	.word	0x2000012c

08001744 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <LL_FillBuffer+0x68>)
 8001754:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001758:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <LL_FillBuffer+0x68>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <LL_FillBuffer+0x68>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <LL_FillBuffer+0x68>)
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <LL_FillBuffer+0x6c>)
 800176a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <LL_FillBuffer+0x68>)
 800176e:	f001 f867 	bl	8002840 <HAL_DMA2D_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d115      	bne.n	80017a4 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <LL_FillBuffer+0x68>)
 800177c:	f001 f9ce 	bl	8002b1c <HAL_DMA2D_ConfigLayer>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69f9      	ldr	r1, [r7, #28]
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <LL_FillBuffer+0x68>)
 8001792:	f001 f8af 	bl	80028f4 <HAL_DMA2D_Start>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800179c:	210a      	movs	r1, #10
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <LL_FillBuffer+0x68>)
 80017a0:	f001 f8d3 	bl	800294a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80017a4:	bf00      	nop
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000278 	.word	0x20000278
 80017b0:	4002b000 	.word	0x4002b000

080017b4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <BSP_SDRAM_Init+0xac>)
 80017ba:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <BSP_SDRAM_Init+0xb0>)
 80017bc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 80017c0:	2202      	movs	r2, #2
 80017c2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 80017c6:	2207      	movs	r2, #7
 80017c8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 80017cc:	2204      	movs	r2, #4
 80017ce:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 80017d2:	2207      	movs	r2, #7
 80017d4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 80017d8:	2202      	movs	r2, #2
 80017da:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 80017de:	2202      	movs	r2, #2
 80017e0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <BSP_SDRAM_Init+0xac>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <BSP_SDRAM_Init+0xac>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <BSP_SDRAM_Init+0xac>)
 80017f6:	2204      	movs	r2, #4
 80017f8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <BSP_SDRAM_Init+0xac>)
 80017fc:	2220      	movs	r2, #32
 80017fe:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <BSP_SDRAM_Init+0xac>)
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <BSP_SDRAM_Init+0xac>)
 8001808:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800180c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <BSP_SDRAM_Init+0xac>)
 8001810:	2200      	movs	r2, #0
 8001812:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <BSP_SDRAM_Init+0xac>)
 8001816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800181a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <BSP_SDRAM_Init+0xac>)
 800181e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <BSP_SDRAM_Init+0xac>)
 8001826:	2200      	movs	r2, #0
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800182a:	2100      	movs	r1, #0
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <BSP_SDRAM_Init+0xac>)
 800182e:	f000 f87f 	bl	8001930 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <BSP_SDRAM_Init+0xb4>)
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <BSP_SDRAM_Init+0xac>)
 8001836:	f004 f963 	bl	8005b00 <HAL_SDRAM_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <BSP_SDRAM_Init+0xb8>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e002      	b.n	800184e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <BSP_SDRAM_Init+0xb8>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800184e:	f240 6003 	movw	r0, #1539	; 0x603
 8001852:	f000 f80d 	bl	8001870 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <BSP_SDRAM_Init+0xb8>)
 8001858:	781b      	ldrb	r3, [r3, #0]
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000394 	.word	0x20000394
 8001864:	a0000140 	.word	0xa0000140
 8001868:	200001d4 	.word	0x200001d4
 800186c:	2000002c 	.word	0x2000002c

08001870 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001884:	2210      	movs	r2, #16
 8001886:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800188a:	2201      	movs	r2, #1
 800188c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001898:	4923      	ldr	r1, [pc, #140]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800189a:	4824      	ldr	r0, [pc, #144]	; (800192c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800189c:	f004 f964 	bl	8005b68 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f000 f99d 	bl	8001be0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ae:	2210      	movs	r2, #16
 80018b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80018be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c2:	4919      	ldr	r1, [pc, #100]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018c4:	4819      	ldr	r0, [pc, #100]	; (800192c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018c6:	f004 f94f 	bl	8005b68 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018cc:	2203      	movs	r2, #3
 80018ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d2:	2210      	movs	r2, #16
 80018d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d8:	2208      	movs	r2, #8
 80018da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e6:	4910      	ldr	r1, [pc, #64]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018e8:	4810      	ldr	r0, [pc, #64]	; (800192c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018ea:	f004 f93d 	bl	8005b68 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80018ee:	f44f 730c 	mov.w	r3, #560	; 0x230
 80018f2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018fc:	2210      	movs	r2, #16
 80018fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001902:	2201      	movs	r2, #1
 8001904:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800190a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800190c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001910:	4905      	ldr	r1, [pc, #20]	; (8001928 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001914:	f004 f928 	bl	8005b68 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4804      	ldr	r0, [pc, #16]	; (800192c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800191c:	f004 f94f 	bl	8005bbe <HAL_SDRAM_ProgramRefreshRate>
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001f0 	.word	0x200001f0
 800192c:	20000394 	.word	0x20000394

08001930 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001930:	b580      	push	{r7, lr}
 8001932:	b090      	sub	sp, #64	; 0x40
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800193a:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	4a70      	ldr	r2, [pc, #448]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6393      	str	r3, [r2, #56]	; 0x38
 8001946:	4b6e      	ldr	r3, [pc, #440]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001952:	4b6b      	ldr	r3, [pc, #428]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a6a      	ldr	r2, [pc, #424]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a64      	ldr	r2, [pc, #400]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b62      	ldr	r3, [pc, #392]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	623b      	str	r3, [r7, #32]
 8001980:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ca:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <BSP_SDRAM_MspInit+0x1d0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001a06:	230c      	movs	r3, #12
 8001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001a0a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	483b      	ldr	r0, [pc, #236]	; (8001b04 <BSP_SDRAM_MspInit+0x1d4>)
 8001a18:	f002 fa2a 	bl	8003e70 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001a1c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	4837      	ldr	r0, [pc, #220]	; (8001b08 <BSP_SDRAM_MspInit+0x1d8>)
 8001a2a:	f002 fa21 	bl	8003e70 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001a2e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4834      	ldr	r0, [pc, #208]	; (8001b0c <BSP_SDRAM_MspInit+0x1dc>)
 8001a3c:	f002 fa18 	bl	8003e70 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001a40:	f248 1337 	movw	r3, #33079	; 0x8137
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4830      	ldr	r0, [pc, #192]	; (8001b10 <BSP_SDRAM_MspInit+0x1e0>)
 8001a4e:	f002 fa0f 	bl	8003e70 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001a52:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	482d      	ldr	r0, [pc, #180]	; (8001b14 <BSP_SDRAM_MspInit+0x1e4>)
 8001a60:	f002 fa06 	bl	8003e70 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001a64:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4829      	ldr	r0, [pc, #164]	; (8001b18 <BSP_SDRAM_MspInit+0x1e8>)
 8001a72:	f002 f9fd 	bl	8003e70 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001a76:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a88:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a90:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a98:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001a9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aae:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001ab8:	2203      	movs	r2, #3
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <BSP_SDRAM_MspInit+0x1f0>)
 8001acc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001ada:	4810      	ldr	r0, [pc, #64]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001adc:	f000 fda2 	bl	8002624 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001ae0:	480e      	ldr	r0, [pc, #56]	; (8001b1c <BSP_SDRAM_MspInit+0x1ec>)
 8001ae2:	f000 fcf1 	bl	80024c8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	210f      	movs	r1, #15
 8001aea:	2038      	movs	r0, #56	; 0x38
 8001aec:	f000 fcb5 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001af0:	2038      	movs	r0, #56	; 0x38
 8001af2:	f000 fcce 	bl	8002492 <HAL_NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3740      	adds	r7, #64	; 0x40
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40021400 	.word	0x40021400
 8001b10:	40021800 	.word	0x40021800
 8001b14:	40021c00 	.word	0x40021c00
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	20000200 	.word	0x20000200
 8001b20:	40026410 	.word	0x40026410

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 fc8b 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 f806 	bl	8001b40 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f005 fa82 	bl	800703c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x54>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x58>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fca5 	bl	80024ae <HAL_SYSTICK_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00e      	b.n	8001b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d80a      	bhi.n	8001b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 fc6d 	bl	800245a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_InitTick+0x5c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000038 	.word	0x20000038
 8001b98:	20000034 	.word	0x20000034
 8001b9c:	20000030 	.word	0x20000030

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000034 	.word	0x20000034
 8001bc4:	200003c8 	.word	0x200003c8

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200003c8 	.word	0x200003c8

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_Delay+0x40>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000034 	.word	0x20000034

08001c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e031      	b.n	8001c9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f005 fa1e 	bl	8007084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_ADC_Init+0x84>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fa1c 	bl	80020b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c8e:	e001      	b.n	8001c94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	ffffeefd 	.word	0xffffeefd

08001cac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Start+0x1a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e0a0      	b.n	8001e08 <HAL_ADC_Start+0x15c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d018      	beq.n	8001d0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_ADC_Start+0x168>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <HAL_ADC_Start+0x16c>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9a      	lsrs	r2, r3, #18
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d174      	bne.n	8001e06 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d20:	4b3e      	ldr	r3, [pc, #248]	; (8001e1c <HAL_ADC_Start+0x170>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d56:	d106      	bne.n	8001d66 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	f023 0206 	bic.w	r2, r3, #6
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_ADC_Start+0x174>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d136      	bne.n	8001e06 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	e02d      	b.n	8001e06 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_ADC_Start+0x178>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d10e      	bne.n	8001dd2 <HAL_ADC_Start+0x126>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d107      	bne.n	8001dd2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dd0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_ADC_Start+0x174>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d113      	bne.n	8001e06 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_ADC_Start+0x17c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d10e      	bne.n	8001e06 <HAL_ADC_Start+0x15a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d107      	bne.n	8001e06 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e04:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	20000038 	.word	0x20000038
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	fffff8fe 	.word	0xfffff8fe
 8001e20:	40012300 	.word	0x40012300
 8001e24:	40012000 	.word	0x40012000
 8001e28:	40012200 	.word	0x40012200

08001e2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1c>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e115      	b.n	8002090 <HAL_ADC_ConfigChannel+0x248>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d935      	bls.n	8001ee0 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68d9      	ldr	r1, [r3, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	3b1e      	subs	r3, #30
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43da      	mvns	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	400a      	ands	r2, r1
 8001e98:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7f      	ldr	r2, [pc, #508]	; (800209c <HAL_ADC_ConfigChannel+0x254>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d10a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	061a      	lsls	r2, r3, #24
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	e035      	b.n	8001f26 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68d9      	ldr	r1, [r3, #12]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4603      	mov	r3, r0
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4403      	add	r3, r0
 8001ed2:	3b1e      	subs	r3, #30
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	e022      	b.n	8001f26 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	400a      	ands	r2, r1
 8001f02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6919      	ldr	r1, [r3, #16]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4403      	add	r3, r0
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d824      	bhi.n	8001f78 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b05      	subs	r3, #5
 8001f40:	221f      	movs	r2, #31
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	3b05      	subs	r3, #5
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34
 8001f76:	e04c      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d824      	bhi.n	8001fca <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b23      	subs	r3, #35	; 0x23
 8001f92:	221f      	movs	r2, #31
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b23      	subs	r3, #35	; 0x23
 8001fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc8:	e023      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b41      	subs	r3, #65	; 0x41
 8001fdc:	221f      	movs	r2, #31
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b41      	subs	r3, #65	; 0x41
 8002006:	fa00 f203 	lsl.w	r2, r0, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <HAL_ADC_ConfigChannel+0x258>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d109      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1e8>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d105      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_ADC_ConfigChannel+0x25c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <HAL_ADC_ConfigChannel+0x25c>)
 800202a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800202e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_ADC_ConfigChannel+0x258>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d125      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x23e>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_ADC_ConfigChannel+0x254>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <HAL_ADC_ConfigChannel+0x204>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b11      	cmp	r3, #17
 800204a:	d11c      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_ADC_ConfigChannel+0x25c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <HAL_ADC_ConfigChannel+0x25c>)
 8002052:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002056:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_ADC_ConfigChannel+0x254>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d111      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_ADC_ConfigChannel+0x260>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_ADC_ConfigChannel+0x264>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9a      	lsrs	r2, r3, #18
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002078:	e002      	b.n	8002080 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3b01      	subs	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	10000012 	.word	0x10000012
 80020a0:	40012000 	.word	0x40012000
 80020a4:	40012300 	.word	0x40012300
 80020a8:	20000038 	.word	0x20000038
 80020ac:	431bde83 	.word	0x431bde83

080020b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020b8:	4b78      	ldr	r3, [pc, #480]	; (800229c <ADC_Init+0x1ec>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a77      	ldr	r2, [pc, #476]	; (800229c <ADC_Init+0x1ec>)
 80020be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020c4:	4b75      	ldr	r3, [pc, #468]	; (800229c <ADC_Init+0x1ec>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4973      	ldr	r1, [pc, #460]	; (800229c <ADC_Init+0x1ec>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	021a      	lsls	r2, r3, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <ADC_Init+0x1f0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002152:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e00f      	b.n	80021aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0202 	bic.w	r2, r2, #2
 80021b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	005a      	lsls	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01b      	beq.n	8002210 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	3b01      	subs	r3, #1
 8002204:	035a      	lsls	r2, r3, #13
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	e007      	b.n	8002220 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	3b01      	subs	r3, #1
 800223c:	051a      	lsls	r2, r3, #20
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002262:	025a      	lsls	r2, r3, #9
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6899      	ldr	r1, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	029a      	lsls	r2, r3, #10
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40012300 	.word	0x40012300
 80022a0:	0f000001 	.word	0x0f000001

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <__NVIC_SetPriorityGrouping+0x40>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <__NVIC_SetPriorityGrouping+0x40>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00
 80022e8:	05fa0000 	.word	0x05fa0000

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <__NVIC_EnableIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff8e 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff29 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246c:	f7ff ff3e 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff8e 	bl	8002398 <NVIC_EncodePriority>
 800247c:	4602      	mov	r2, r0
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5d 	bl	8002344 <__NVIC_SetPriority>
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff31 	bl	8002308 <__NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa2 	bl	8002400 <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff fb78 	bl	8001bc8 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e099      	b.n	8002618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002504:	e00f      	b.n	8002526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002506:	f7ff fb5f 	bl	8001bc8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b05      	cmp	r3, #5
 8002512:	d908      	bls.n	8002526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e078      	b.n	8002618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e8      	bne.n	8002506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_DMA_Init+0x158>)
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4313      	orrs	r3, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f023 0307 	bic.w	r3, r3, #7
 80025a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d117      	bne.n	80025ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f8bd 	bl	800274c <DMA_CheckFifoParam>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025e6:	2301      	movs	r3, #1
 80025e8:	e016      	b.n	8002618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f874 	bl	80026e0 <DMA_CalcBaseAndBitshift>
 80025f8:	4603      	mov	r3, r0
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	223f      	movs	r2, #63	; 0x3f
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	e010803f 	.word	0xe010803f

08002624 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e050      	b.n	80026d8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d101      	bne.n	8002646 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	e048      	b.n	80026d8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2221      	movs	r2, #33	; 0x21
 8002684:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f82a 	bl	80026e0 <DMA_CalcBaseAndBitshift>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	223f      	movs	r2, #63	; 0x3f
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3b10      	subs	r3, #16
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <DMA_CalcBaseAndBitshift+0x60>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <DMA_CalcBaseAndBitshift+0x64>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d908      	bls.n	8002720 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <DMA_CalcBaseAndBitshift+0x68>)
 8002716:	4013      	ands	r3, r2
 8002718:	1d1a      	adds	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	659a      	str	r2, [r3, #88]	; 0x58
 800271e:	e006      	b.n	800272e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <DMA_CalcBaseAndBitshift+0x68>)
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	aaaaaaab 	.word	0xaaaaaaab
 8002744:	08009f3c 	.word	0x08009f3c
 8002748:	fffffc00 	.word	0xfffffc00

0800274c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11f      	bne.n	80027a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d855      	bhi.n	8002818 <DMA_CheckFifoParam+0xcc>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <DMA_CheckFifoParam+0x28>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	08002785 	.word	0x08002785
 8002778:	08002797 	.word	0x08002797
 800277c:	08002785 	.word	0x08002785
 8002780:	08002819 	.word	0x08002819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d045      	beq.n	800281c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e042      	b.n	800281c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800279e:	d13f      	bne.n	8002820 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a4:	e03c      	b.n	8002820 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	d121      	bne.n	80027f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d836      	bhi.n	8002824 <DMA_CheckFifoParam+0xd8>
 80027b6:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <DMA_CheckFifoParam+0x70>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d3 	.word	0x080027d3
 80027c4:	080027cd 	.word	0x080027cd
 80027c8:	080027e5 	.word	0x080027e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      break;
 80027d0:	e02f      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d024      	beq.n	8002828 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e2:	e021      	b.n	8002828 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ec:	d11e      	bne.n	800282c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027f2:	e01b      	b.n	800282c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <DMA_CheckFifoParam+0xb4>
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d003      	beq.n	8002806 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027fe:	e018      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e015      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      break;
 8002816:	e00b      	b.n	8002830 <DMA_CheckFifoParam+0xe4>
      break;
 8002818:	bf00      	nop
 800281a:	e00a      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;
 800281c:	bf00      	nop
 800281e:	e008      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;
 8002820:	bf00      	nop
 8002822:	e006      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;
 8002824:	bf00      	nop
 8002826:	e004      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;
 8002828:	bf00      	nop
 800282a:	e002      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;   
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <DMA_CheckFifoParam+0xe6>
      break;
 8002830:	bf00      	nop
    }
  } 
  
  return status; 
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e049      	b.n	80028e6 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f004 fc2c 	bl	80070c4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	f023 0107 	bic.w	r1, r3, #7
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_DMA2D_Init+0xb0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68d1      	ldr	r1, [r2, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	430b      	orrs	r3, r1
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	051a      	lsls	r2, r3, #20
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	055b      	lsls	r3, r3, #21
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	ffffc000 	.word	0xffffc000

080028f4 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_DMA2D_Start+0x1c>
 800290c:	2302      	movs	r3, #2
 800290e:	e018      	b.n	8002942 <HAL_DMA2D_Start+0x4e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f994 	bl	8002c58 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d056      	beq.n	8002a14 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002966:	f7ff f92f 	bl	8001bc8 <HAL_GetTick>
 800296a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800296c:	e04b      	b.n	8002a06 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f043 0202 	orr.w	r2, r3, #2
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2221      	movs	r2, #33	; 0x21
 80029b2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0a5      	b.n	8002b14 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d01a      	beq.n	8002a06 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80029d0:	f7ff f8fa 	bl	8001bc8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <HAL_DMA2D_PollForTransfer+0x9c>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2203      	movs	r2, #3
 80029f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e086      	b.n	8002b14 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ac      	beq.n	800296e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d061      	beq.n	8002afa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a36:	f7ff f8c7 	bl	8001bc8 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a3c:	e056      	b.n	8002aec <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d02e      	beq.n	8002aae <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0202 	orr.w	r2, r3, #2
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2229      	movs	r2, #41	; 0x29
 8002a98:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e032      	b.n	8002b14 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d01a      	beq.n	8002aec <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002ab6:	f7ff f887 	bl	8001bc8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <HAL_DMA2D_PollForTransfer+0x182>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e013      	b.n	8002b14 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0a1      	beq.n	8002a3e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2212      	movs	r2, #18
 8002b00:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA2D_ConfigLayer+0x20>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e084      	b.n	8002c46 <HAL_DMA2D_ConfigLayer+0x12a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	3320      	adds	r3, #32
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002b70:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_DMA2D_ConfigLayer+0x138>)
 8002b7e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b0a      	cmp	r3, #10
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA2D_ConfigLayer+0x74>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e005      	b.n	8002bac <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d120      	bne.n	8002bf4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	ea02 0103 	and.w	r1, r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b0a      	cmp	r3, #10
 8002bda:	d003      	beq.n	8002be4 <HAL_DMA2D_ConfigLayer+0xc8>
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	d127      	bne.n	8002c34 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf2:	e01f      	b.n	8002c34 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	ea02 0103 	and.w	r1, r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d003      	beq.n	8002c26 <HAL_DMA2D_ConfigLayer+0x10a>
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d106      	bne.n	8002c34 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c32:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	ff33000f 	.word	0xff33000f

08002c58 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	041a      	lsls	r2, r3, #16
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	431a      	orrs	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c90:	d174      	bne.n	8002d7c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c98:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ca0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ca8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d108      	bne.n	8002cca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc8:	e053      	b.n	8002d72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	e048      	b.n	8002d72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d111      	bne.n	8002d0c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	0cdb      	lsrs	r3, r3, #19
 8002cec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	0a9b      	lsrs	r3, r3, #10
 8002cf2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	08db      	lsrs	r3, r3, #3
 8002cf8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	02db      	lsls	r3, r3, #11
 8002d02:	4313      	orrs	r3, r2
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	e032      	b.n	8002d72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d117      	bne.n	8002d44 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	0fdb      	lsrs	r3, r3, #31
 8002d18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	0cdb      	lsrs	r3, r3, #19
 8002d1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	0adb      	lsrs	r3, r3, #11
 8002d24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	029b      	lsls	r3, r3, #10
 8002d34:	431a      	orrs	r2, r3
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	03db      	lsls	r3, r3, #15
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e016      	b.n	8002d72 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	0f1b      	lsrs	r3, r3, #28
 8002d48:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	0d1b      	lsrs	r3, r3, #20
 8002d4e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	0b1b      	lsrs	r3, r3, #12
 8002d54:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	011a      	lsls	r2, r3, #4
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	431a      	orrs	r2, r3
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	031b      	lsls	r3, r3, #12
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002d7a:	e003      	b.n	8002d84 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	60da      	str	r2, [r3, #12]
}
 8002d84:	bf00      	nop
 8002d86:	372c      	adds	r7, #44	; 0x2c
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	019a      	lsls	r2, r3, #6
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	431a      	orrs	r2, r3
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	041b      	lsls	r3, r3, #16
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd0:	f7fe fefa 	bl	8001bc8 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002dd6:	e009      	b.n	8002dec <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fef6 	bl	8001bc8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de6:	d901      	bls.n	8002dec <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e015      	b.n	8002e18 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0ee      	beq.n	8002dd8 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	019a      	lsls	r2, r3, #6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	ea42 0103 	orr.w	r1, r2, r3
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e106      	b.n	8003042 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7c5b      	ldrb	r3, [r3, #17]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f004 f960 	bl	8007104 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2203      	movs	r2, #3
 8002e48:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e5e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e72:	f7fe fea9 	bl	8001bc8 <HAL_GetTick>
 8002e76:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002e78:	e009      	b.n	8002e8e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e7a:	f7fe fea5 	bl	8001bc8 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e88:	d901      	bls.n	8002e8e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0d9      	b.n	8003042 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ed      	beq.n	8002e7a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b68      	ldr	r3, [pc, #416]	; (800304c <HAL_DSI_Init+0x22c>)
 8002eac:	400b      	ands	r3, r1
 8002eae:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	009a      	lsls	r2, r3, #2
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	02db      	lsls	r3, r3, #11
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f02:	f7fe fe61 	bl	8001bc8 <HAL_GetTick>
 8002f06:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002f08:	e009      	b.n	8002f1e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fe5d 	bl	8001bc8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f18:	d901      	bls.n	8002f1e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e091      	b.n	8003042 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ed      	beq.n	8002f0a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0206 	orr.w	r2, r2, #6
 8002f3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0203 	bic.w	r2, r2, #3
 8002f52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0203 	bic.w	r2, r2, #3
 8002f80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fa8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_DSI_Init+0x1aa>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	e000      	b.n	8002fcc <HAL_DSI_Init+0x1ac>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <HAL_DSI_Init+0x230>)
 8002fd2:	fb02 f203 	mul.w	r2, r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003002:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	430a      	orrs	r2, r1
 8003016:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2200      	movs	r2, #0
 8003020:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	fffc8603 	.word	0xfffc8603
 8003050:	003d0900 	.word	0x003d0900

08003054 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e066      	b.n	8003134 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2203      	movs	r2, #3
 800306a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0208 	bic.w	r2, r2, #8
 8003080:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0206 	bic.w	r2, r2, #6
 80030c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003106:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f004 f836 	bl	800718c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7c1b      	ldrb	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_DSI_ConfigErrorMonitor+0x16>
 800314e:	2302      	movs	r3, #2
 8003150:	e0aa      	b.n	80032a8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800318c:	430b      	orrs	r3, r1
 800318e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80031ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0202 	orr.w	r2, r2, #2
 80031e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 020c 	orr.w	r2, r2, #12
 8003206:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0210 	orr.w	r2, r2, #16
 8003224:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0220 	orr.w	r2, r2, #32
 8003242:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003260:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800327e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800329c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7c1b      	ldrb	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_DSI_SetGenericVCID+0x16>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e016      	b.n	80032f8 <HAL_DSI_SetGenericVCID+0x44>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0203 	bic.w	r2, r2, #3
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7c1b      	ldrb	r3, [r3, #16]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_DSI_ConfigVideoMode+0x16>
 8003316:	2302      	movs	r3, #2
 8003318:	e1ee      	b.n	80036f8 <HAL_DSI_ConfigVideoMode+0x3f4>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0203 	bic.w	r2, r2, #3
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003372:	400b      	ands	r3, r1
 8003374:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b84      	ldr	r3, [pc, #528]	; (80035a4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003394:	400b      	ands	r3, r1
 8003396:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b7b      	ldr	r3, [pc, #492]	; (80035a4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0203 	bic.w	r2, r2, #3
 80033da:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68d9      	ldr	r1, [r3, #12]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0207 	bic.w	r2, r2, #7
 80033fc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6959      	ldr	r1, [r3, #20]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	431a      	orrs	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 020f 	bic.w	r2, r2, #15
 800342a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6919      	ldr	r1, [r3, #16]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 020e 	bic.w	r2, r2, #14
 800344e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	005a      	lsls	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d110      	bne.n	8003494 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003480:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6919      	ldr	r1, [r3, #16]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80034a0:	400b      	ands	r3, r1
 80034a2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80034c2:	400b      	ands	r3, r1
 80034c4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_DSI_ConfigVideoMode+0x2a8>)
 80034e4:	400b      	ands	r3, r1
 80034e6:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003506:	400b      	ands	r3, r1
 8003508:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003528:	400b      	ands	r3, r1
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800354a:	400b      	ands	r3, r1
 800354c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <HAL_DSI_ConfigVideoMode+0x29c>)
 800356c:	400b      	ands	r3, r1
 800356e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359c:	e00a      	b.n	80035b4 <HAL_DSI_ConfigVideoMode+0x2b0>
 800359e:	bf00      	nop
 80035a0:	ffffc000 	.word	0xffffc000
 80035a4:	ffffe000 	.word	0xffffe000
 80035a8:	fffff000 	.word	0xfffff000
 80035ac:	ffff8000 	.word	0xffff8000
 80035b0:	fffffc00 	.word	0xfffffc00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80035ca:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6999      	ldr	r1, [r3, #24]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d6:	041a      	lsls	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ee:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7c1b      	ldrb	r3, [r3, #16]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8003716:	2302      	movs	r3, #2
 8003718:	e0c5      	b.n	80038a6 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0203 	bic.w	r2, r2, #3
 8003766:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0207 	bic.w	r2, r2, #7
 8003788:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6959      	ldr	r1, [r3, #20]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	431a      	orrs	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 020f 	bic.w	r2, r2, #15
 80037b6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 020e 	bic.w	r2, r2, #14
 80037da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005a      	lsls	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8003802:	400b      	ands	r3, r1
 8003804:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003828:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0202 	orr.w	r2, r2, #2
 800389a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	ffff0000 	.word	0xffff0000

080038b8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7c1b      	ldrb	r3, [r3, #16]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_DSI_ConfigCommand+0x16>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e049      	b.n	8003962 <HAL_DSI_ConfigCommand+0xaa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_DSI_ConfigCommand+0xb8>)
 80038e0:	400b      	ands	r3, r1
 80038e2:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80038f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80038f8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80038fe:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003904:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800390a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003910:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003916:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800391c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003922:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003928:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800392e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0202 	bic.w	r2, r2, #2
 8003946:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	fef080ff 	.word	0xfef080ff

08003974 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	7c1b      	ldrb	r3, [r3, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_DSI_ConfigFlowControl+0x16>
 8003986:	2302      	movs	r3, #2
 8003988:	e016      	b.n	80039b8 <HAL_DSI_ConfigFlowControl+0x44>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 021f 	bic.w	r2, r2, #31
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7c1b      	ldrb	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_DSI_ConfigPhyTimer+0x16>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e058      	b.n	8003a8c <HAL_DSI_ConfigPhyTimer+0xc8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bf38      	it	cc
 80039ec:	4613      	movcc	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003a00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	041a      	lsls	r2, r3, #16
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003a2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003a68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7c1b      	ldrb	r3, [r3, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_DSI_ConfigHostTimeouts+0x16>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0b4      	b.n	8003c18 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003ac2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	021a      	lsls	r2, r3, #8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	041a      	lsls	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b06:	400b      	ands	r3, r1
 8003b08:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b28:	400b      	ands	r3, r1
 8003b2a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b76:	400b      	ands	r3, r1
 8003b78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003bca:	400b      	ands	r3, r1
 8003bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	ffff0000 	.word	0xffff0000

08003c28 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7c1b      	ldrb	r3, [r3, #16]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_DSI_Start+0x14>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e02b      	b.n	8003c94 <HAL_DSI_Start+0x6c>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0208 	orr.w	r2, r2, #8
 8003c78:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	7c1b      	ldrb	r3, [r3, #16]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_DSI_ShortWrite+0x1a>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e010      	b.n	8003cdc <HAL_DSI_ShortWrite+0x3c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff f879 	bl	8002dc2 <DSI_ShortWrite>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	741a      	strb	r2, [r3, #16]

  return status;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	; 0x30
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf4:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	7c1b      	ldrb	r3, [r3, #16]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_DSI_LongWrite+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e084      	b.n	8003e0c <HAL_DSI_LongWrite+0x128>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d08:	f7fd ff5e 	bl	8001bc8 <HAL_GetTick>
 8003d0c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003d0e:	e00c      	b.n	8003d2a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d10:	f7fd ff5a 	bl	8001bc8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1e:	d904      	bls.n	8003d2a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e070      	b.n	8003e0c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0eb      	beq.n	8003d10 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	bf28      	it	cs
 8003d42:	2303      	movcs	r3, #3
 8003d44:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	e00f      	b.n	8003d6c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d3eb      	bcc.n	8003d4c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003d8c:	e028      	b.n	8003de0 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	bf28      	it	cs
 8003d94:	2304      	movcs	r3, #4
 8003d96:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	e00e      	b.n	8003dc0 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	4413      	add	r3, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3ec      	bcc.n	8003da2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1d3      	bne.n	8003d8e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003dee:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	f7fe ffc6 	bl	8002d90 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7c1b      	ldrb	r3, [r3, #16]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e01b      	b.n	8003e62 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003e40:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	065a      	lsls	r2, r3, #25
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e175      	b.n	800417c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8164 	bne.w	8004176 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x4e>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b12      	cmp	r3, #18
 8003ebc:	d123      	bne.n	8003f06 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	08da      	lsrs	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	08da      	lsrs	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3208      	adds	r2, #8
 8003f00:	69b9      	ldr	r1, [r7, #24]
 8003f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0203 	and.w	r2, r3, #3
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d00b      	beq.n	8003f5a <HAL_GPIO_Init+0xea>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d007      	beq.n	8003f5a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f4e:	2b11      	cmp	r3, #17
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b12      	cmp	r3, #18
 8003f58:	d130      	bne.n	8003fbc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	2203      	movs	r2, #3
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f90:	2201      	movs	r2, #1
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	091b      	lsrs	r3, r3, #4
 8003fa6:	f003 0201 	and.w	r2, r3, #1
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80be 	beq.w	8004176 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_GPIO_Init+0x320>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4a64      	ldr	r2, [pc, #400]	; (8004190 <HAL_GPIO_Init+0x320>)
 8004000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004004:	6453      	str	r3, [r2, #68]	; 0x44
 8004006:	4b62      	ldr	r3, [pc, #392]	; (8004190 <HAL_GPIO_Init+0x320>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004012:	4a60      	ldr	r2, [pc, #384]	; (8004194 <HAL_GPIO_Init+0x324>)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	220f      	movs	r2, #15
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a57      	ldr	r2, [pc, #348]	; (8004198 <HAL_GPIO_Init+0x328>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d037      	beq.n	80040ae <HAL_GPIO_Init+0x23e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a56      	ldr	r2, [pc, #344]	; (800419c <HAL_GPIO_Init+0x32c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_GPIO_Init+0x23a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a55      	ldr	r2, [pc, #340]	; (80041a0 <HAL_GPIO_Init+0x330>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <HAL_GPIO_Init+0x236>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a54      	ldr	r2, [pc, #336]	; (80041a4 <HAL_GPIO_Init+0x334>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x232>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a53      	ldr	r2, [pc, #332]	; (80041a8 <HAL_GPIO_Init+0x338>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x22e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_GPIO_Init+0x33c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x22a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a51      	ldr	r2, [pc, #324]	; (80041b0 <HAL_GPIO_Init+0x340>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x226>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a50      	ldr	r2, [pc, #320]	; (80041b4 <HAL_GPIO_Init+0x344>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x222>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4f      	ldr	r2, [pc, #316]	; (80041b8 <HAL_GPIO_Init+0x348>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x21e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4e      	ldr	r2, [pc, #312]	; (80041bc <HAL_GPIO_Init+0x34c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x21a>
 8004086:	2309      	movs	r3, #9
 8004088:	e012      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800408a:	230a      	movs	r3, #10
 800408c:	e010      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800408e:	2308      	movs	r3, #8
 8004090:	e00e      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 8004092:	2307      	movs	r3, #7
 8004094:	e00c      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 8004096:	2306      	movs	r3, #6
 8004098:	e00a      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800409a:	2305      	movs	r3, #5
 800409c:	e008      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800409e:	2304      	movs	r3, #4
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e004      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e002      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040ae:	2300      	movs	r3, #0
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	f002 0203 	and.w	r2, r2, #3
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4093      	lsls	r3, r2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040c0:	4934      	ldr	r1, [pc, #208]	; (8004194 <HAL_GPIO_Init+0x324>)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ce:	4b3c      	ldr	r3, [pc, #240]	; (80041c0 <HAL_GPIO_Init+0x350>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f2:	4a33      	ldr	r2, [pc, #204]	; (80041c0 <HAL_GPIO_Init+0x350>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_GPIO_Init+0x350>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800411c:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <HAL_GPIO_Init+0x350>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004122:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_GPIO_Init+0x350>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_GPIO_Init+0x350>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800414c:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <HAL_GPIO_Init+0x350>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004170:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <HAL_GPIO_Init+0x350>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	f67f ae86 	bls.w	8003e90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004184:	bf00      	nop
 8004186:	3724      	adds	r7, #36	; 0x24
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40023800 	.word	0x40023800
 8004194:	40013800 	.word	0x40013800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020400 	.word	0x40020400
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40021400 	.word	0x40021400
 80041b0:	40021800 	.word	0x40021800
 80041b4:	40021c00 	.word	0x40021c00
 80041b8:	40022000 	.word	0x40022000
 80041bc:	40022400 	.word	0x40022400
 80041c0:	40013c00 	.word	0x40013c00

080041c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e0d9      	b.n	8004394 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041e0:	2201      	movs	r2, #1
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	f040 80c9 	bne.w	800438e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80041fc:	4a6a      	ldr	r2, [pc, #424]	; (80043a8 <HAL_GPIO_DeInit+0x1e4>)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	3302      	adds	r3, #2
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	220f      	movs	r2, #15
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a62      	ldr	r2, [pc, #392]	; (80043ac <HAL_GPIO_DeInit+0x1e8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d037      	beq.n	8004296 <HAL_GPIO_DeInit+0xd2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a61      	ldr	r2, [pc, #388]	; (80043b0 <HAL_GPIO_DeInit+0x1ec>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d031      	beq.n	8004292 <HAL_GPIO_DeInit+0xce>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <HAL_GPIO_DeInit+0x1f0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02b      	beq.n	800428e <HAL_GPIO_DeInit+0xca>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a5f      	ldr	r2, [pc, #380]	; (80043b8 <HAL_GPIO_DeInit+0x1f4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d025      	beq.n	800428a <HAL_GPIO_DeInit+0xc6>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a5e      	ldr	r2, [pc, #376]	; (80043bc <HAL_GPIO_DeInit+0x1f8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01f      	beq.n	8004286 <HAL_GPIO_DeInit+0xc2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a5d      	ldr	r2, [pc, #372]	; (80043c0 <HAL_GPIO_DeInit+0x1fc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d019      	beq.n	8004282 <HAL_GPIO_DeInit+0xbe>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a5c      	ldr	r2, [pc, #368]	; (80043c4 <HAL_GPIO_DeInit+0x200>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <HAL_GPIO_DeInit+0xba>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a5b      	ldr	r2, [pc, #364]	; (80043c8 <HAL_GPIO_DeInit+0x204>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00d      	beq.n	800427a <HAL_GPIO_DeInit+0xb6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a5a      	ldr	r2, [pc, #360]	; (80043cc <HAL_GPIO_DeInit+0x208>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <HAL_GPIO_DeInit+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a59      	ldr	r2, [pc, #356]	; (80043d0 <HAL_GPIO_DeInit+0x20c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_GPIO_DeInit+0xae>
 800426e:	2309      	movs	r3, #9
 8004270:	e012      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 8004272:	230a      	movs	r3, #10
 8004274:	e010      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 8004276:	2308      	movs	r3, #8
 8004278:	e00e      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 800427a:	2307      	movs	r3, #7
 800427c:	e00c      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 800427e:	2306      	movs	r3, #6
 8004280:	e00a      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 8004282:	2305      	movs	r3, #5
 8004284:	e008      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 8004286:	2304      	movs	r3, #4
 8004288:	e006      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 800428a:	2303      	movs	r3, #3
 800428c:	e004      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 800428e:	2302      	movs	r3, #2
 8004290:	e002      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_GPIO_DeInit+0xd4>
 8004296:	2300      	movs	r3, #0
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	f002 0203 	and.w	r2, r2, #3
 800429e:	0092      	lsls	r2, r2, #2
 80042a0:	4093      	lsls	r3, r2
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d132      	bne.n	800430e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	220f      	movs	r2, #15
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80042b8:	4a3b      	ldr	r2, [pc, #236]	; (80043a8 <HAL_GPIO_DeInit+0x1e4>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	43da      	mvns	r2, r3
 80042c8:	4837      	ldr	r0, [pc, #220]	; (80043a8 <HAL_GPIO_DeInit+0x1e4>)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	400a      	ands	r2, r1
 80042d0:	3302      	adds	r3, #2
 80042d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43db      	mvns	r3, r3
 80042de:	493d      	ldr	r1, [pc, #244]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80042e4:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	4939      	ldr	r1, [pc, #228]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80042f2:	4b38      	ldr	r3, [pc, #224]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	4936      	ldr	r1, [pc, #216]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004300:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43db      	mvns	r3, r3
 8004308:	4932      	ldr	r1, [pc, #200]	; (80043d4 <HAL_GPIO_DeInit+0x210>)
 800430a:	4013      	ands	r3, r2
 800430c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2103      	movs	r1, #3
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	08da      	lsrs	r2, r3, #3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3208      	adds	r2, #8
 800432c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	08d2      	lsrs	r2, r2, #3
 8004344:	4019      	ands	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3208      	adds	r2, #8
 800434a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	2103      	movs	r1, #3
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	401a      	ands	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	2101      	movs	r1, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	401a      	ands	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2103      	movs	r1, #3
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	401a      	ands	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3301      	adds	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	f67f af22 	bls.w	80041e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40020000 	.word	0x40020000
 80043b0:	40020400 	.word	0x40020400
 80043b4:	40020800 	.word	0x40020800
 80043b8:	40020c00 	.word	0x40020c00
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40021400 	.word	0x40021400
 80043c4:	40021800 	.word	0x40021800
 80043c8:	40021c00 	.word	0x40021c00
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40022400 	.word	0x40022400
 80043d4:	40013c00 	.word	0x40013c00

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0bf      	b.n	800459e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f002 fec8 	bl	80071c8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800444e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004464:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <HAL_LTDC_Init+0x19c>)
 8004480:	400b      	ands	r3, r1
 8004482:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	041b      	lsls	r3, r3, #16
 800448a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6899      	ldr	r1, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68d9      	ldr	r1, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b3e      	ldr	r3, [pc, #248]	; (80045a8 <HAL_LTDC_Init+0x19c>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68d9      	ldr	r1, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6919      	ldr	r1, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <HAL_LTDC_Init+0x19c>)
 80044dc:	400b      	ands	r3, r1
 80044de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6959      	ldr	r1, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <HAL_LTDC_Init+0x19c>)
 800450a:	400b      	ands	r3, r1
 800450c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6959      	ldr	r1, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0206 	orr.w	r2, r2, #6
 800457a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	f000f800 	.word	0xf000f800

080045ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045ac:	b5b0      	push	{r4, r5, r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_LTDC_ConfigLayer+0x1a>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e02c      	b.n	8004620 <HAL_LTDC_ConfigLayer+0x74>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2134      	movs	r1, #52	; 0x34
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4614      	mov	r4, r2
 80045ea:	461d      	mov	r5, r3
 80045ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f811 	bl	8004628 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2201      	movs	r2, #1
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bdb0      	pop	{r4, r5, r7, pc}

08004628 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004628:	b480      	push	{r7}
 800462a:	b089      	sub	sp, #36	; 0x24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	0c1b      	lsrs	r3, r3, #16
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	4413      	add	r3, r2
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	01db      	lsls	r3, r3, #7
 8004654:	4413      	add	r3, r2
 8004656:	3384      	adds	r3, #132	; 0x84
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	4611      	mov	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	01d2      	lsls	r2, r2, #7
 8004664:	440a      	add	r2, r1
 8004666:	3284      	adds	r2, #132	; 0x84
 8004668:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800466c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467e:	4413      	add	r3, r2
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4619      	mov	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	01db      	lsls	r3, r3, #7
 800468c:	440b      	add	r3, r1
 800468e:	3384      	adds	r3, #132	; 0x84
 8004690:	4619      	mov	r1, r3
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046a6:	4413      	add	r3, r2
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	01db      	lsls	r3, r3, #7
 80046b6:	4413      	add	r3, r2
 80046b8:	3384      	adds	r3, #132	; 0x84
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	4611      	mov	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	01d2      	lsls	r2, r2, #7
 80046c6:	440a      	add	r2, r1
 80046c8:	3284      	adds	r2, #132	; 0x84
 80046ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046de:	4413      	add	r3, r2
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4619      	mov	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	01db      	lsls	r3, r3, #7
 80046ec:	440b      	add	r3, r1
 80046ee:	3384      	adds	r3, #132	; 0x84
 80046f0:	4619      	mov	r1, r3
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	01db      	lsls	r3, r3, #7
 8004702:	4413      	add	r3, r2
 8004704:	3384      	adds	r3, #132	; 0x84
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	4611      	mov	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	01d2      	lsls	r2, r2, #7
 8004712:	440a      	add	r2, r1
 8004714:	3284      	adds	r2, #132	; 0x84
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	01db      	lsls	r3, r3, #7
 8004726:	4413      	add	r3, r2
 8004728:	3384      	adds	r3, #132	; 0x84
 800472a:	461a      	mov	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	01db      	lsls	r3, r3, #7
 8004758:	4413      	add	r3, r2
 800475a:	3384      	adds	r3, #132	; 0x84
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	01db      	lsls	r3, r3, #7
 8004768:	4413      	add	r3, r2
 800476a:	3384      	adds	r3, #132	; 0x84
 800476c:	461a      	mov	r2, r3
 800476e:	2300      	movs	r3, #0
 8004770:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004778:	461a      	mov	r2, r3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	431a      	orrs	r2, r3
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	01db      	lsls	r3, r3, #7
 800478c:	440b      	add	r3, r1
 800478e:	3384      	adds	r3, #132	; 0x84
 8004790:	4619      	mov	r1, r3
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	01db      	lsls	r3, r3, #7
 80047a2:	4413      	add	r3, r2
 80047a4:	3384      	adds	r3, #132	; 0x84
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	4611      	mov	r1, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	01d2      	lsls	r2, r2, #7
 80047b2:	440a      	add	r2, r1
 80047b4:	3284      	adds	r2, #132	; 0x84
 80047b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	01db      	lsls	r3, r3, #7
 80047c6:	4413      	add	r3, r2
 80047c8:	3384      	adds	r3, #132	; 0x84
 80047ca:	461a      	mov	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	01db      	lsls	r3, r3, #7
 80047dc:	4413      	add	r3, r2
 80047de:	3384      	adds	r3, #132	; 0x84
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4619      	mov	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	440b      	add	r3, r1
 80047ee:	3384      	adds	r3, #132	; 0x84
 80047f0:	4619      	mov	r1, r3
 80047f2:	4b58      	ldr	r3, [pc, #352]	; (8004954 <LTDC_SetConfig+0x32c>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	6809      	ldr	r1, [r1, #0]
 8004804:	4608      	mov	r0, r1
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	01c9      	lsls	r1, r1, #7
 800480a:	4401      	add	r1, r0
 800480c:	3184      	adds	r1, #132	; 0x84
 800480e:	4313      	orrs	r3, r2
 8004810:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	01db      	lsls	r3, r3, #7
 800481c:	4413      	add	r3, r2
 800481e:	3384      	adds	r3, #132	; 0x84
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	01db      	lsls	r3, r3, #7
 800482c:	4413      	add	r3, r2
 800482e:	3384      	adds	r3, #132	; 0x84
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	01db      	lsls	r3, r3, #7
 8004840:	4413      	add	r3, r2
 8004842:	3384      	adds	r3, #132	; 0x84
 8004844:	461a      	mov	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004854:	2304      	movs	r3, #4
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	e01b      	b.n	8004892 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d102      	bne.n	8004868 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004862:	2303      	movs	r3, #3
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	e014      	b.n	8004892 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b04      	cmp	r3, #4
 800486e:	d00b      	beq.n	8004888 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004874:	2b02      	cmp	r3, #2
 8004876:	d007      	beq.n	8004888 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800487c:	2b03      	cmp	r3, #3
 800487e:	d003      	beq.n	8004888 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004884:	2b07      	cmp	r3, #7
 8004886:	d102      	bne.n	800488e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004888:	2302      	movs	r3, #2
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e001      	b.n	8004892 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800488e:	2301      	movs	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	01db      	lsls	r3, r3, #7
 800489c:	4413      	add	r3, r2
 800489e:	3384      	adds	r3, #132	; 0x84
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	4611      	mov	r1, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	01d2      	lsls	r2, r2, #7
 80048ac:	440a      	add	r2, r1
 80048ae:	3284      	adds	r2, #132	; 0x84
 80048b0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80048b4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	041a      	lsls	r2, r3, #16
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	3303      	adds	r3, #3
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	6809      	ldr	r1, [r1, #0]
 80048d8:	4608      	mov	r0, r1
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	01c9      	lsls	r1, r1, #7
 80048de:	4401      	add	r1, r0
 80048e0:	3184      	adds	r1, #132	; 0x84
 80048e2:	4313      	orrs	r3, r2
 80048e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	01db      	lsls	r3, r3, #7
 80048f0:	4413      	add	r3, r2
 80048f2:	3384      	adds	r3, #132	; 0x84
 80048f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4619      	mov	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	01db      	lsls	r3, r3, #7
 8004900:	440b      	add	r3, r1
 8004902:	3384      	adds	r3, #132	; 0x84
 8004904:	4619      	mov	r1, r3
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <LTDC_SetConfig+0x330>)
 8004908:	4013      	ands	r3, r2
 800490a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	01db      	lsls	r3, r3, #7
 8004916:	4413      	add	r3, r2
 8004918:	3384      	adds	r3, #132	; 0x84
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	01db      	lsls	r3, r3, #7
 800492c:	4413      	add	r3, r2
 800492e:	3384      	adds	r3, #132	; 0x84
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	4611      	mov	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	01d2      	lsls	r2, r2, #7
 800493c:	440a      	add	r2, r1
 800493e:	3284      	adds	r2, #132	; 0x84
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	6013      	str	r3, [r2, #0]
}
 8004946:	bf00      	nop
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	fffff8f8 	.word	0xfffff8f8
 8004958:	fffff800 	.word	0xfffff800

0800495c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800496e:	2200      	movs	r2, #0
 8004970:	e001      	b.n	8004976 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004972:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004986:	e000      	b.n	800498a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004988:	2200      	movs	r2, #0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004996:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800499a:	e000      	b.n	800499e <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800499c:	2200      	movs	r2, #0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	1e5a      	subs	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	4413      	add	r3, r2
 80049b6:	1e5a      	subs	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	441a      	add	r2, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4413      	add	r3, r2
 80049cc:	1e5a      	subs	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	441a      	add	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	441a      	add	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	4413      	add	r3, r2
 80049e8:	1e5a      	subs	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6413      	str	r3, [r2, #64]	; 0x40
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a2a:	f7fd f8cd 	bl	8001bc8 <HAL_GetTick>
 8004a2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a30:	e009      	b.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a32:	f7fd f8c9 	bl	8001bc8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a40:	d901      	bls.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e022      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d1ee      	bne.n	8004a32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a60:	f7fd f8b2 	bl	8001bc8 <HAL_GetTick>
 8004a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a66:	e009      	b.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a68:	f7fd f8ae 	bl	8001bc8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a76:	d901      	bls.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e007      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a88:	d1ee      	bne.n	8004a68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e25e      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8087 	beq.w	8004bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac0:	4b96      	ldr	r3, [pc, #600]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d00c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004acc:	4b93      	ldr	r3, [pc, #588]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d112      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
 8004ad8:	4b90      	ldr	r3, [pc, #576]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae6:	4b8d      	ldr	r3, [pc, #564]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d06c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x130>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d168      	bne.n	8004bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e238      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x7a>
 8004b08:	4b84      	ldr	r3, [pc, #528]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a83      	ldr	r2, [pc, #524]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e02e      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x9c>
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b7c      	ldr	r3, [pc, #496]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7b      	ldr	r2, [pc, #492]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b42:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a75      	ldr	r2, [pc, #468]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a72      	ldr	r2, [pc, #456]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b5c:	4b6f      	ldr	r3, [pc, #444]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a6e      	ldr	r2, [pc, #440]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6b      	ldr	r2, [pc, #428]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd f824 	bl	8001bc8 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd f820 	bl	8001bc8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e1ec      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd f810 	bl	8001bc8 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fd f80c 	bl	8001bc8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e1d8      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	4b57      	ldr	r3, [pc, #348]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x110>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d069      	beq.n	8004cae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b4d      	ldr	r3, [pc, #308]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1ac      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	493d      	ldr	r1, [pc, #244]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e040      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fc ffc2 	bl	8001bc8 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fc ffbe 	bl	8001bc8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e18a      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4929      	ldr	r1, [pc, #164]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
 8004c7a:	e018      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fc ff9e 	bl	8001bc8 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fc ff9a 	bl	8001bc8 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e166      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d038      	beq.n	8004d2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d019      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fc ff7b 	bl	8001bc8 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fc ff77 	bl	8001bc8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e143      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x23a>
 8004cf4:	e01a      	b.n	8004d2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fc ff61 	bl	8001bc8 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fc ff5d 	bl	8001bc8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d903      	bls.n	8004d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e129      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
 8004d1c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	4b95      	ldr	r3, [pc, #596]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a4 	beq.w	8004e82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b8f      	ldr	r3, [pc, #572]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b8c      	ldr	r3, [pc, #560]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a8b      	ldr	r2, [pc, #556]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b89      	ldr	r3, [pc, #548]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d62:	4b86      	ldr	r3, [pc, #536]	; (8004f7c <HAL_RCC_OscConfig+0x4e0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d6e:	4b83      	ldr	r3, [pc, #524]	; (8004f7c <HAL_RCC_OscConfig+0x4e0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a82      	ldr	r2, [pc, #520]	; (8004f7c <HAL_RCC_OscConfig+0x4e0>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fc ff25 	bl	8001bc8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fc ff21 	bl	8001bc8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	; 0x64
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0ed      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d94:	4b79      	ldr	r3, [pc, #484]	; (8004f7c <HAL_RCC_OscConfig+0x4e0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x31a>
 8004da8:	4b73      	ldr	r3, [pc, #460]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a72      	ldr	r2, [pc, #456]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	e02d      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x33c>
 8004dbe:	4b6e      	ldr	r3, [pc, #440]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	4a6d      	ldr	r2, [pc, #436]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dca:	4b6b      	ldr	r3, [pc, #428]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a6a      	ldr	r2, [pc, #424]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd6:	e01c      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x35e>
 8004de0:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	4a64      	ldr	r2, [pc, #400]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70
 8004dec:	4b62      	ldr	r3, [pc, #392]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a61      	ldr	r2, [pc, #388]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dfa:	4b5f      	ldr	r3, [pc, #380]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a5e      	ldr	r2, [pc, #376]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	4b5c      	ldr	r3, [pc, #368]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a5b      	ldr	r2, [pc, #364]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fc fed5 	bl	8001bc8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fc fed1 	bl	8001bc8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e09b      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b4f      	ldr	r3, [pc, #316]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCC_OscConfig+0x386>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fc febf 	bl	8001bc8 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	e00a      	b.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fc febb 	bl	8001bc8 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e085      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4b44      	ldr	r3, [pc, #272]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ee      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a3f      	ldr	r2, [pc, #252]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d071      	beq.n	8004f6e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d069      	beq.n	8004f6a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d14b      	bne.n	8004f36 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9e:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fc fe8d 	bl	8001bc8 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fc fe89 	bl	8001bc8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e055      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	019b      	lsls	r3, r3, #6
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	071b      	lsls	r3, r3, #28
 8004efc:	491e      	ldr	r1, [pc, #120]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f02:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004f08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fc fe5b 	bl	8001bc8 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fc fe57 	bl	8001bc8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e023      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x47a>
 8004f34:	e01b      	b.n	8004f6e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a0f      	ldr	r2, [pc, #60]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7fc fe41 	bl	8001bc8 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4a:	f7fc fe3d 	bl	8001bc8 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e009      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5c:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_RCC_OscConfig+0x4dc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f0      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4ae>
 8004f68:	e001      	b.n	8004f6e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40007000 	.word	0x40007000

08004f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0ce      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f98:	4b69      	ldr	r3, [pc, #420]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d910      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b66      	ldr	r3, [pc, #408]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 020f 	bic.w	r2, r3, #15
 8004fae:	4964      	ldr	r1, [pc, #400]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b62      	ldr	r3, [pc, #392]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b6      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b58      	ldr	r3, [pc, #352]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a57      	ldr	r2, [pc, #348]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b52      	ldr	r3, [pc, #328]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a51      	ldr	r2, [pc, #324]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005002:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b4f      	ldr	r3, [pc, #316]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494c      	ldr	r1, [pc, #304]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d040      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b46      	ldr	r3, [pc, #280]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d115      	bne.n	8005062 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07d      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005042:	4b40      	ldr	r3, [pc, #256]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e071      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005052:	4b3c      	ldr	r3, [pc, #240]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e069      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005062:	4b38      	ldr	r3, [pc, #224]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f023 0203 	bic.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4935      	ldr	r1, [pc, #212]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	4313      	orrs	r3, r2
 8005072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005074:	f7fc fda8 	bl	8001bc8 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507a:	e00a      	b.n	8005092 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800507c:	f7fc fda4 	bl	8001bc8 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e051      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 020c 	and.w	r2, r3, #12
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d1eb      	bne.n	800507c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050a4:	4b26      	ldr	r3, [pc, #152]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d210      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b23      	ldr	r3, [pc, #140]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 020f 	bic.w	r2, r3, #15
 80050ba:	4921      	ldr	r1, [pc, #132]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <HAL_RCC_ClockConfig+0x1c0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e030      	b.n	8005136 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b18      	ldr	r3, [pc, #96]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4915      	ldr	r1, [pc, #84]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490d      	ldr	r1, [pc, #52]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f81d 	bl	8005150 <HAL_RCC_GetSysClockFreq>
 8005116:	4601      	mov	r1, r0
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <HAL_RCC_ClockConfig+0x1c8>)
 8005124:	5cd3      	ldrb	r3, [r2, r3]
 8005126:	fa21 f303 	lsr.w	r3, r1, r3
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <HAL_RCC_ClockConfig+0x1cc>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800512e:	2000      	movs	r0, #0
 8005130:	f7fc fd06 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40023c00 	.word	0x40023c00
 8005144:	40023800 	.word	0x40023800
 8005148:	08009f44 	.word	0x08009f44
 800514c:	20000038 	.word	0x20000038

08005150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	2300      	movs	r3, #0
 8005160:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005166:	4b50      	ldr	r3, [pc, #320]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b04      	cmp	r3, #4
 8005170:	d007      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x32>
 8005172:	2b08      	cmp	r3, #8
 8005174:	d008      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x38>
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 808d 	bne.w	8005296 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800517c:	4b4b      	ldr	r3, [pc, #300]	; (80052ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800517e:	60bb      	str	r3, [r7, #8]
       break;
 8005180:	e08c      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005182:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005184:	60bb      	str	r3, [r7, #8]
      break;
 8005186:	e089      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005188:	4b47      	ldr	r3, [pc, #284]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005190:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005192:	4b45      	ldr	r3, [pc, #276]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d023      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519e:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	ea03 0501 	and.w	r5, r3, r1
 80051b4:	ea04 0602 	and.w	r6, r4, r2
 80051b8:	4a3d      	ldr	r2, [pc, #244]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80051ba:	fb02 f106 	mul.w	r1, r2, r6
 80051be:	2200      	movs	r2, #0
 80051c0:	fb02 f205 	mul.w	r2, r2, r5
 80051c4:	440a      	add	r2, r1
 80051c6:	493a      	ldr	r1, [pc, #232]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80051c8:	fba5 0101 	umull	r0, r1, r5, r1
 80051cc:	1853      	adds	r3, r2, r1
 80051ce:	4619      	mov	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f04f 0400 	mov.w	r4, #0
 80051d6:	461a      	mov	r2, r3
 80051d8:	4623      	mov	r3, r4
 80051da:	f7fb f881 	bl	80002e0 <__aeabi_uldivmod>
 80051de:	4603      	mov	r3, r0
 80051e0:	460c      	mov	r4, r1
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e049      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	ea03 0501 	and.w	r5, r3, r1
 80051fc:	ea04 0602 	and.w	r6, r4, r2
 8005200:	4629      	mov	r1, r5
 8005202:	4632      	mov	r2, r6
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	f04f 0400 	mov.w	r4, #0
 800520c:	0154      	lsls	r4, r2, #5
 800520e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005212:	014b      	lsls	r3, r1, #5
 8005214:	4619      	mov	r1, r3
 8005216:	4622      	mov	r2, r4
 8005218:	1b49      	subs	r1, r1, r5
 800521a:	eb62 0206 	sbc.w	r2, r2, r6
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f04f 0400 	mov.w	r4, #0
 8005226:	0194      	lsls	r4, r2, #6
 8005228:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800522c:	018b      	lsls	r3, r1, #6
 800522e:	1a5b      	subs	r3, r3, r1
 8005230:	eb64 0402 	sbc.w	r4, r4, r2
 8005234:	f04f 0100 	mov.w	r1, #0
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	00e2      	lsls	r2, r4, #3
 800523e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005242:	00d9      	lsls	r1, r3, #3
 8005244:	460b      	mov	r3, r1
 8005246:	4614      	mov	r4, r2
 8005248:	195b      	adds	r3, r3, r5
 800524a:	eb44 0406 	adc.w	r4, r4, r6
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	02a2      	lsls	r2, r4, #10
 8005258:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800525c:	0299      	lsls	r1, r3, #10
 800525e:	460b      	mov	r3, r1
 8005260:	4614      	mov	r4, r2
 8005262:	4618      	mov	r0, r3
 8005264:	4621      	mov	r1, r4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f04f 0400 	mov.w	r4, #0
 800526c:	461a      	mov	r2, r3
 800526e:	4623      	mov	r3, r4
 8005270:	f7fb f836 	bl	80002e0 <__aeabi_uldivmod>
 8005274:	4603      	mov	r3, r0
 8005276:	460c      	mov	r4, r1
 8005278:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	3301      	adds	r3, #1
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005292:	60bb      	str	r3, [r7, #8]
      break;
 8005294:	e002      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8005298:	60bb      	str	r3, [r7, #8]
      break;
 800529a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529c:	68bb      	ldr	r3, [r7, #8]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	017d7840 	.word	0x017d7840

080052b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d012      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052dc:	4b69      	ldr	r3, [pc, #420]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a68      	ldr	r2, [pc, #416]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052e6:	6093      	str	r3, [r2, #8]
 80052e8:	4b66      	ldr	r3, [pc, #408]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	4964      	ldr	r1, [pc, #400]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80052fe:	2301      	movs	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d017      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800530e:	4b5d      	ldr	r3, [pc, #372]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	4959      	ldr	r1, [pc, #356]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532c:	d101      	bne.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800532e:	2301      	movs	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800533a:	2301      	movs	r3, #1
 800533c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d017      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800534a:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	494a      	ldr	r1, [pc, #296]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005368:	d101      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800536a:	2301      	movs	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005376:	2301      	movs	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 808b 	beq.w	80054ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005398:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	4a39      	ldr	r2, [pc, #228]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a2:	6413      	str	r3, [r2, #64]	; 0x40
 80053a4:	4b37      	ldr	r3, [pc, #220]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053b0:	4b35      	ldr	r3, [pc, #212]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a34      	ldr	r2, [pc, #208]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fc fc04 	bl	8001bc8 <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c4:	f7fc fc00 	bl	8001bc8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e38d      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053d6:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053e2:	4b28      	ldr	r3, [pc, #160]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d035      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d02e      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005400:	4b20      	ldr	r3, [pc, #128]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800540a:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005420:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005422:	4a18      	ldr	r2, [pc, #96]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005428:	4b16      	ldr	r3, [pc, #88]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d114      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fc fbc8 	bl	8001bc8 <HAL_GetTick>
 8005438:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543a:	e00a      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fc fbc4 	bl	8001bc8 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e34f      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005452:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0ee      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800546a:	d111      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800547a:	400b      	ands	r3, r1
 800547c:	4901      	ldr	r1, [pc, #4]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
 8005482:	e00b      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005484:	40023800 	.word	0x40023800
 8005488:	40007000 	.word	0x40007000
 800548c:	0ffffcff 	.word	0x0ffffcff
 8005490:	4bb3      	ldr	r3, [pc, #716]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4ab2      	ldr	r2, [pc, #712]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005496:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800549a:	6093      	str	r3, [r2, #8]
 800549c:	4bb0      	ldr	r3, [pc, #704]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800549e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a8:	49ad      	ldr	r1, [pc, #692]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054ba:	4ba9      	ldr	r3, [pc, #676]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c0:	4aa7      	ldr	r2, [pc, #668]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054ca:	4ba5      	ldr	r3, [pc, #660]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	49a2      	ldr	r1, [pc, #648]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e8:	4b9d      	ldr	r3, [pc, #628]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054f6:	499a      	ldr	r1, [pc, #616]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800550a:	4b95      	ldr	r3, [pc, #596]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005518:	4991      	ldr	r1, [pc, #580]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800552c:	4b8c      	ldr	r3, [pc, #560]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553a:	4989      	ldr	r1, [pc, #548]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800554e:	4b84      	ldr	r3, [pc, #528]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	4980      	ldr	r1, [pc, #512]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005570:	4b7b      	ldr	r3, [pc, #492]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	4978      	ldr	r1, [pc, #480]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005592:	4b73      	ldr	r3, [pc, #460]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	f023 020c 	bic.w	r2, r3, #12
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a0:	496f      	ldr	r1, [pc, #444]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055b4:	4b6a      	ldr	r3, [pc, #424]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	4967      	ldr	r1, [pc, #412]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055d6:	4b62      	ldr	r3, [pc, #392]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e4:	495e      	ldr	r1, [pc, #376]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055f8:	4b59      	ldr	r3, [pc, #356]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	4956      	ldr	r1, [pc, #344]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800561a:	4b51      	ldr	r3, [pc, #324]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005620:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	494d      	ldr	r1, [pc, #308]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800563c:	4b48      	ldr	r3, [pc, #288]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564a:	4945      	ldr	r1, [pc, #276]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800565e:	4b40      	ldr	r3, [pc, #256]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	493c      	ldr	r1, [pc, #240]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005680:	4b37      	ldr	r3, [pc, #220]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005686:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568e:	4934      	ldr	r1, [pc, #208]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d011      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056a2:	4b2f      	ldr	r3, [pc, #188]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b0:	492b      	ldr	r1, [pc, #172]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c0:	d101      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056d2:	2301      	movs	r3, #1
 80056d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056e2:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f0:	491b      	ldr	r1, [pc, #108]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005704:	4b16      	ldr	r3, [pc, #88]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005714:	4912      	ldr	r1, [pc, #72]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005738:	4909      	ldr	r1, [pc, #36]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00f      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800574e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005752:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	e002      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	4985      	ldr	r1, [pc, #532]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005778:	4b80      	ldr	r3, [pc, #512]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800577a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800577e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005788:	497c      	ldr	r1, [pc, #496]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d005      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800579e:	f040 80d6 	bne.w	800594e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057a2:	4b76      	ldr	r3, [pc, #472]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a75      	ldr	r2, [pc, #468]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ae:	f7fc fa0b 	bl	8001bc8 <HAL_GetTick>
 80057b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057b4:	e008      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057b6:	f7fc fa07 	bl	8001bc8 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b64      	cmp	r3, #100	; 0x64
 80057c2:	d901      	bls.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e194      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057c8:	4b6c      	ldr	r3, [pc, #432]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f0      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d021      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11d      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057e8:	4b64      	ldr	r3, [pc, #400]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ee:	0c1b      	lsrs	r3, r3, #16
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057f6:	4b61      	ldr	r3, [pc, #388]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057fc:	0e1b      	lsrs	r3, r3, #24
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	019a      	lsls	r2, r3, #6
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	041b      	lsls	r3, r3, #16
 800580e:	431a      	orrs	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	071b      	lsls	r3, r3, #28
 800581c:	4957      	ldr	r1, [pc, #348]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005842:	2b00      	cmp	r3, #0
 8005844:	d02e      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800584e:	d129      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005850:	4b4a      	ldr	r3, [pc, #296]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005856:	0c1b      	lsrs	r3, r3, #16
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800585e:	4b47      	ldr	r3, [pc, #284]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005864:	0f1b      	lsrs	r3, r3, #28
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	019a      	lsls	r2, r3, #6
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	431a      	orrs	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	071b      	lsls	r3, r3, #28
 8005884:	493d      	ldr	r1, [pc, #244]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800588c:	4b3b      	ldr	r3, [pc, #236]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800588e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005892:	f023 021f 	bic.w	r2, r3, #31
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	3b01      	subs	r3, #1
 800589c:	4937      	ldr	r1, [pc, #220]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01d      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b6:	0e1b      	lsrs	r3, r3, #24
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058be:	4b2f      	ldr	r3, [pc, #188]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c4:	0f1b      	lsrs	r3, r3, #28
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	019a      	lsls	r2, r3, #6
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	431a      	orrs	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	061b      	lsls	r3, r3, #24
 80058de:	431a      	orrs	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	071b      	lsls	r3, r3, #28
 80058e4:	4925      	ldr	r1, [pc, #148]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d011      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	019a      	lsls	r2, r3, #6
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	061b      	lsls	r3, r3, #24
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	071b      	lsls	r3, r3, #28
 8005914:	4919      	ldr	r1, [pc, #100]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800591c:	4b17      	ldr	r3, [pc, #92]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a16      	ldr	r2, [pc, #88]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005928:	f7fc f94e 	bl	8001bc8 <HAL_GetTick>
 800592c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005930:	f7fc f94a 	bl	8001bc8 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b64      	cmp	r3, #100	; 0x64
 800593c:	d901      	bls.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e0d7      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005942:	4b0e      	ldr	r3, [pc, #56]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0f0      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b01      	cmp	r3, #1
 8005952:	f040 80cd 	bne.w	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a08      	ldr	r2, [pc, #32]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800595c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005962:	f7fc f931 	bl	8001bc8 <HAL_GetTick>
 8005966:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005968:	e00a      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800596a:	f7fc f92d 	bl	8001bc8 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b64      	cmp	r3, #100	; 0x64
 8005976:	d903      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e0ba      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800597c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005980:	4b5e      	ldr	r3, [pc, #376]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598c:	d0ed      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d02e      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d12a      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059b6:	4b51      	ldr	r3, [pc, #324]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059c4:	4b4d      	ldr	r3, [pc, #308]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	0f1b      	lsrs	r3, r3, #28
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	019a      	lsls	r2, r3, #6
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	061b      	lsls	r3, r3, #24
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	071b      	lsls	r3, r3, #28
 80059ea:	4944      	ldr	r1, [pc, #272]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059f2:	4b42      	ldr	r3, [pc, #264]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	3b01      	subs	r3, #1
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	493d      	ldr	r1, [pc, #244]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d022      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a20:	d11d      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a22:	4b36      	ldr	r3, [pc, #216]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a28:	0e1b      	lsrs	r3, r3, #24
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a30:	4b32      	ldr	r3, [pc, #200]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a36:	0f1b      	lsrs	r3, r3, #28
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	019a      	lsls	r2, r3, #6
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	061b      	lsls	r3, r3, #24
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	071b      	lsls	r3, r3, #28
 8005a56:	4929      	ldr	r1, [pc, #164]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d028      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a70:	0e1b      	lsrs	r3, r3, #24
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a78:	4b20      	ldr	r3, [pc, #128]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	0c1b      	lsrs	r3, r3, #16
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	019a      	lsls	r2, r3, #6
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	431a      	orrs	r2, r3
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	061b      	lsls	r3, r3, #24
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	071b      	lsls	r3, r3, #28
 8005a9e:	4917      	ldr	r1, [pc, #92]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4911      	ldr	r1, [pc, #68]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac8:	f7fc f87e 	bl	8001bc8 <HAL_GetTick>
 8005acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ad0:	f7fc f87a 	bl	8001bc8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e007      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aee:	d1ef      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800

08005b00 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e025      	b.n	8005b60 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d106      	bne.n	8005b2e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fc37 	bl	800739c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2202      	movs	r2, #2
 8005b32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f000 fb13 	bl	800616c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	f000 fb7d 	bl	8006250 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d101      	bne.n	8005b84 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
 8005b82:	e018      	b.n	8005bb6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fbdb 	bl	8006350 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d104      	bne.n	8005bac <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2205      	movs	r2, #5
 8005ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005baa:	e003      	b.n	8005bb4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d101      	bne.n	8005bd8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e00e      	b.n	8005bf6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fbd3 	bl	8006392 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e01d      	b.n	8005c4c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 faef 	bl	8007208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f000 f97b 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <HAL_TIM_Base_Start_IT+0x50>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d00b      	beq.n	8005c96 <HAL_TIM_Base_Start_IT+0x42>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c84:	d007      	beq.n	8005c96 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	00010007 	.word	0x00010007

08005ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d122      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0202 	mvn.w	r2, #2
 8005cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f905 	bl	8005efa <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f8f7 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f908 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d11b      	bne.n	8005d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0204 	mvn.w	r2, #4
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8db 	bl	8005efa <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f8cd 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f8de 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d122      	bne.n	8005dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d11b      	bne.n	8005dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0208 	mvn.w	r2, #8
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f8b1 	bl	8005efa <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8a3 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f8b4 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d122      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d11b      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0210 	mvn.w	r2, #16
 8005dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f887 	bl	8005efa <HAL_TIM_IC_CaptureCallback>
 8005dec:	e005      	b.n	8005dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f879 	bl	8005ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f88a 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d10e      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d107      	bne.n	8005e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0201 	mvn.w	r2, #1
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fb26 	bl	8006478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	2b80      	cmp	r3, #128	; 0x80
 8005e38:	d10e      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b80      	cmp	r3, #128	; 0x80
 8005e46:	d107      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f976 	bl	8006144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e66:	d10e      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e72:	2b80      	cmp	r3, #128	; 0x80
 8005e74:	d107      	bne.n	8005e86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f969 	bl	8006158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d10e      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d107      	bne.n	8005eb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f838 	bl	8005f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d10e      	bne.n	8005ede <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d107      	bne.n	8005ede <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f06f 0220 	mvn.w	r2, #32
 8005ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f929 	bl	8006130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a40      	ldr	r2, [pc, #256]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d00f      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3d      	ldr	r2, [pc, #244]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3c      	ldr	r2, [pc, #240]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3a      	ldr	r2, [pc, #232]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d108      	bne.n	8005f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f98:	d027      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d023      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2b      	ldr	r2, [pc, #172]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01f      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2a      	ldr	r2, [pc, #168]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a29      	ldr	r2, [pc, #164]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d017      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <TIM_Base_SetConfig+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d013      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	; (8006068 <TIM_Base_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a25      	ldr	r2, [pc, #148]	; (800606c <TIM_Base_SetConfig+0x134>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a24      	ldr	r2, [pc, #144]	; (8006070 <TIM_Base_SetConfig+0x138>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	; (8006074 <TIM_Base_SetConfig+0x13c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d108      	bne.n	8005ffc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a0a      	ldr	r2, [pc, #40]	; (800604c <TIM_Base_SetConfig+0x114>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0c      	ldr	r2, [pc, #48]	; (800605c <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d103      	bne.n	8006038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	615a      	str	r2, [r3, #20]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40010400 	.word	0x40010400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800
 800606c:	40001800 	.word	0x40001800
 8006070:	40001c00 	.word	0x40001c00
 8006074:	40002000 	.word	0x40002000

08006078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800608c:	2302      	movs	r3, #2
 800608e:	e045      	b.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d108      	bne.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40010000 	.word	0x40010000
 800612c:	40010400 	.word	0x40010400

08006130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d027      	beq.n	80061d6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4b2f      	ldr	r3, [pc, #188]	; (800624c <FMC_SDRAM_Init+0xe0>)
 8006190:	4013      	ands	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800619c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80061a2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80061a8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80061ae:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80061b4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80061ba:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80061c0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80061c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e032      	b.n	800623c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061ec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80061f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4b12      	ldr	r3, [pc, #72]	; (800624c <FMC_SDRAM_Init+0xe0>)
 8006204:	4013      	ands	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006210:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8006216:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800621c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006222:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006228:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4313      	orrs	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	ffff8000 	.word	0xffff8000

08006250 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d02e      	beq.n	80062c8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006276:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	3b01      	subs	r3, #1
 8006284:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006286:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	3b01      	subs	r3, #1
 800628e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006290:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	3b01      	subs	r3, #1
 8006298:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800629a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80062a4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80062ae:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80062b8:	4313      	orrs	r3, r2
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	609a      	str	r2, [r3, #8]
 80062c6:	e039      	b.n	800633c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4b1e      	ldr	r3, [pc, #120]	; (800634c <FMC_SDRAM_Timing_Init+0xfc>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80062e6:	4313      	orrs	r3, r2
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062fa:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	3b01      	subs	r3, #1
 8006308:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800630a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	3b01      	subs	r3, #1
 8006312:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006314:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	3b01      	subs	r3, #1
 800631c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800631e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	3b01      	subs	r3, #1
 8006326:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006328:	4313      	orrs	r3, r2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	ff0f0fff 	.word	0xff0f0fff

08006350 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006368:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	3b01      	subs	r3, #1
 8006370:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006372:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <SCB_EnableICache>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80063bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80063c0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <SCB_EnableICache+0x3c>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80063cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80063d0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <SCB_EnableICache+0x3c>)
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	4a06      	ldr	r2, [pc, #24]	; (80063f4 <SCB_EnableICache+0x3c>)
 80063da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80063e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80063e4:	f3bf 8f6f 	isb	sy
}
 80063e8:	bf00      	nop
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	e000ed00 	.word	0xe000ed00

080063f8 <SCB_EnableDCache>:
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <SCB_EnableDCache+0x7c>)
 8006400:	2200      	movs	r2, #0
 8006402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006406:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800640a:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <SCB_EnableDCache+0x7c>)
 800640c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006410:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	0b5b      	lsrs	r3, r3, #13
 8006416:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800641a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	08db      	lsrs	r3, r3, #3
 8006420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006424:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800642e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006434:	490f      	ldr	r1, [pc, #60]	; (8006474 <SCB_EnableDCache+0x7c>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	1e5a      	subs	r2, r3, #1
 8006440:	60ba      	str	r2, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ef      	bne.n	8006426 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1e5a      	subs	r2, r3, #1
 800644a:	60fa      	str	r2, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e5      	bne.n	800641c <SCB_EnableDCache+0x24>
 8006450:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <SCB_EnableDCache+0x7c>)
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	4a06      	ldr	r2, [pc, #24]	; (8006474 <SCB_EnableDCache+0x7c>)
 800645a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800645e:	6153      	str	r3, [r2, #20]
 8006460:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006464:	f3bf 8f6f 	isb	sy
}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	e000ed00 	.word	0xe000ed00

08006478 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d133      	bne.n	80064f2 <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		flag = 1;
 800648a:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
		counter++;
 8006490:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3301      	adds	r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800649c:	701a      	strb	r2, [r3, #0]

		  if (counter%2 == 0)
 800649e:	4b19      	ldr	r3, [pc, #100]	; (8006504 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d121      	bne.n	80064f2 <HAL_TIM_PeriodElapsedCallback+0x7a>
		  {
			  ConvertedValue=HAL_ADC_GetValue(&hadc1); //get value
 80064ae:	4816      	ldr	r0, [pc, #88]	; (8006508 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80064b0:	f7fb fcbc 	bl	8001e2c <HAL_ADC_GetValue>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b15      	ldr	r3, [pc, #84]	; (800650c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80064b8:	601a      	str	r2, [r3, #0]
			  JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 80064ba:	4b14      	ldr	r3, [pc, #80]	; (800650c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f640 42e4 	movw	r2, #3300	; 0xce4
 80064c2:	fb02 f203 	mul.w	r2, r2, r3
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80064c8:	fba3 1302 	umull	r1, r3, r3, r2
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	0852      	lsrs	r2, r2, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	0ada      	lsrs	r2, r3, #11
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	461a      	mov	r2, r3
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80064e0:	4413      	add	r3, r2
 80064e2:	4a0d      	ldr	r2, [pc, #52]	; (8006518 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	08db      	lsrs	r3, r3, #3
 80064ea:	3319      	adds	r3, #25
 80064ec:	461a      	mov	r2, r3
 80064ee:	4b0b      	ldr	r3, [pc, #44]	; (800651c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80064f0:	601a      	str	r2, [r3, #0]
		  }
	}
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40001000 	.word	0x40001000
 8006500:	20000260 	.word	0x20000260
 8006504:	20000261 	.word	0x20000261
 8006508:	200004f8 	.word	0x200004f8
 800650c:	200003cc 	.word	0x200003cc
 8006510:	00100101 	.word	0x00100101
 8006514:	ffffe250 	.word	0xffffe250
 8006518:	51eb851f 	.word	0x51eb851f
 800651c:	20000264 	.word	0x20000264

08006520 <printBoardGame>:

void printBoardGame()
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	ed2d 8b02 	vpush	{d8}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800652a:	f04f 30ff 	mov.w	r0, #4294967295
 800652e:	f7fa fd39 	bl	8000fa4 <BSP_LCD_SetTextColor>
	  BSP_LCD_FillRect(BSP_LCD_GetXSize()/10, BSP_LCD_GetYSize()/10, 400, 400);
 8006532:	f7fa fcbf 	bl	8000eb4 <BSP_LCD_GetXSize>
 8006536:	4602      	mov	r2, r0
 8006538:	4b4d      	ldr	r3, [pc, #308]	; (8006670 <printBoardGame+0x150>)
 800653a:	fba3 2302 	umull	r2, r3, r3, r2
 800653e:	08db      	lsrs	r3, r3, #3
 8006540:	b29c      	uxth	r4, r3
 8006542:	f7fa fcc3 	bl	8000ecc <BSP_LCD_GetYSize>
 8006546:	4602      	mov	r2, r0
 8006548:	4b49      	ldr	r3, [pc, #292]	; (8006670 <printBoardGame+0x150>)
 800654a:	fba3 2302 	umull	r2, r3, r3, r2
 800654e:	08db      	lsrs	r3, r3, #3
 8006550:	b299      	uxth	r1, r3
 8006552:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006556:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800655a:	4620      	mov	r0, r4
 800655c:	f7fa ff1e 	bl	800139c <BSP_LCD_FillRect>
	  BSP_LCD_SetTextColor(0x800080);
 8006560:	f04f 1080 	mov.w	r0, #8388736	; 0x800080
 8006564:	f7fa fd1e 	bl	8000fa4 <BSP_LCD_SetTextColor>

	  for(int i = 0; i<=8; i++)
 8006568:	2300      	movs	r3, #0
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	e02c      	b.n	80065c8 <printBoardGame+0xa8>
	  {
		  BSP_LCD_DrawVLine(BSP_LCD_GetXSize()/2.10 + (BSP_LCD_GetXSize()/16)*i, BSP_LCD_GetYSize()/10, 400);
 800656e:	f7fa fca1 	bl	8000eb4 <BSP_LCD_GetXSize>
 8006572:	ee07 0a90 	vmov	s15, r0
 8006576:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800657a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8006660 <printBoardGame+0x140>
 800657e:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8006582:	f7fa fc97 	bl	8000eb4 <BSP_LCD_GetXSize>
 8006586:	4603      	mov	r3, r0
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006598:	ee38 7b07 	vadd.f64	d7, d8, d7
 800659c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065a0:	ee17 3a90 	vmov	r3, s15
 80065a4:	b29c      	uxth	r4, r3
 80065a6:	f7fa fc91 	bl	8000ecc <BSP_LCD_GetYSize>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4b30      	ldr	r3, [pc, #192]	; (8006670 <printBoardGame+0x150>)
 80065ae:	fba3 2302 	umull	r2, r3, r3, r2
 80065b2:	08db      	lsrs	r3, r3, #3
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80065ba:	4619      	mov	r1, r3
 80065bc:	4620      	mov	r0, r4
 80065be:	f7fa feab 	bl	8001318 <BSP_LCD_DrawVLine>
	  for(int i = 0; i<=8; i++)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3301      	adds	r3, #1
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	ddcf      	ble.n	800656e <printBoardGame+0x4e>
	  }
	  for(int j = 0; j<=8; j++){
 80065ce:	2300      	movs	r3, #0
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	e03a      	b.n	800664a <printBoardGame+0x12a>
		  BSP_LCD_DrawHLine(BSP_LCD_GetXSize()/2.10, BSP_LCD_GetYSize()/10 + (BSP_LCD_GetYSize()/9.6)*j, 400);
 80065d4:	f7fa fc6e 	bl	8000eb4 <BSP_LCD_GetXSize>
 80065d8:	ee07 0a90 	vmov	s15, r0
 80065dc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80065e0:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8006660 <printBoardGame+0x140>
 80065e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80065e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80065ec:	ee17 3a90 	vmov	r3, s15
 80065f0:	b29c      	uxth	r4, r3
 80065f2:	f7fa fc6b 	bl	8000ecc <BSP_LCD_GetYSize>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <printBoardGame+0x150>)
 80065fa:	fba3 2302 	umull	r2, r3, r3, r2
 80065fe:	08db      	lsrs	r3, r3, #3
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8006608:	f7fa fc60 	bl	8000ecc <BSP_LCD_GetYSize>
 800660c:	ee07 0a90 	vmov	s15, r0
 8006610:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006614:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8006668 <printBoardGame+0x148>
 8006618:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800662a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800662e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006632:	ee17 3a90 	vmov	r3, s15
 8006636:	b29b      	uxth	r3, r3
 8006638:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800663c:	4619      	mov	r1, r3
 800663e:	4620      	mov	r0, r4
 8006640:	f7fa fe2c 	bl	800129c <BSP_LCD_DrawHLine>
	  for(int j = 0; j<=8; j++){
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	3301      	adds	r3, #1
 8006648:	603b      	str	r3, [r7, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b08      	cmp	r3, #8
 800664e:	ddc1      	ble.n	80065d4 <printBoardGame+0xb4>
	  }
	  //BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	ecbd 8b02 	vpop	{d8}
 800665a:	bd90      	pop	{r4, r7, pc}
 800665c:	f3af 8000 	nop.w
 8006660:	cccccccd 	.word	0xcccccccd
 8006664:	4000cccc 	.word	0x4000cccc
 8006668:	33333333 	.word	0x33333333
 800666c:	40233333 	.word	0x40233333
 8006670:	cccccccd 	.word	0xcccccccd

08006674 <printScoreTable>:

void printScoreTable()
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
	   BSP_LCD_DrawVLine(10, 50, 375);
 8006678:	f240 1277 	movw	r2, #375	; 0x177
 800667c:	2132      	movs	r1, #50	; 0x32
 800667e:	200a      	movs	r0, #10
 8006680:	f7fa fe4a 	bl	8001318 <BSP_LCD_DrawVLine>
	   BSP_LCD_DrawHLine(10, 50, 350);
 8006684:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006688:	2132      	movs	r1, #50	; 0x32
 800668a:	200a      	movs	r0, #10
 800668c:	f7fa fe06 	bl	800129c <BSP_LCD_DrawHLine>
	   BSP_LCD_DrawHLine(10, 85, 350);
 8006690:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006694:	2155      	movs	r1, #85	; 0x55
 8006696:	200a      	movs	r0, #10
 8006698:	f7fa fe00 	bl	800129c <BSP_LCD_DrawHLine>
	   BSP_LCD_DrawHLine(10, 425, 350);
 800669c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80066a0:	f240 11a9 	movw	r1, #425	; 0x1a9
 80066a4:	200a      	movs	r0, #10
 80066a6:	f7fa fdf9 	bl	800129c <BSP_LCD_DrawHLine>
	   BSP_LCD_DrawVLine(360, 50, 375);
 80066aa:	f240 1277 	movw	r2, #375	; 0x177
 80066ae:	2132      	movs	r1, #50	; 0x32
 80066b0:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80066b4:	f7fa fe30 	bl	8001318 <BSP_LCD_DrawVLine>
	   BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80066b8:	480a      	ldr	r0, [pc, #40]	; (80066e4 <printScoreTable+0x70>)
 80066ba:	f7fa fc73 	bl	8000fa4 <BSP_LCD_SetTextColor>

	   sprintf(string, "Game Info");
 80066be:	4a0a      	ldr	r2, [pc, #40]	; (80066e8 <printScoreTable+0x74>)
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <printScoreTable+0x78>)
 80066c2:	cb03      	ldmia	r3!, {r0, r1}
 80066c4:	6010      	str	r0, [r2, #0]
 80066c6:	6051      	str	r1, [r2, #4]
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	8113      	strh	r3, [r2, #8]
	   	  BSP_LCD_SetFont(&Font24);
 80066cc:	4808      	ldr	r0, [pc, #32]	; (80066f0 <printScoreTable+0x7c>)
 80066ce:	f7fa fc9b 	bl	8001008 <BSP_LCD_SetFont>
	   	  BSP_LCD_DisplayStringAt(90,55 , (uint8_t *)string, LEFT_MODE);
 80066d2:	2303      	movs	r3, #3
 80066d4:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <printScoreTable+0x74>)
 80066d6:	2137      	movs	r1, #55	; 0x37
 80066d8:	205a      	movs	r0, #90	; 0x5a
 80066da:	f7fa fd1b 	bl	8001114 <BSP_LCD_DisplayStringAt>
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	ff000080 	.word	0xff000080
 80066e8:	200003ec 	.word	0x200003ec
 80066ec:	08007dc0 	.word	0x08007dc0
 80066f0:	20000014 	.word	0x20000014

080066f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80066f8:	f7ff fe5e 	bl	80063b8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80066fc:	f7ff fe7c 	bl	80063f8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006700:	f7fb fa10 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006704:	f000 f862 	bl	80067cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006708:	f000 fbb2 	bl	8006e70 <MX_GPIO_Init>
  MX_ADC1_Init();
 800670c:	f000 f8f8 	bl	8006900 <MX_ADC1_Init>
  MX_DMA2D_Init();
 8006710:	f000 f94a 	bl	80069a8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8006714:	f000 f980 	bl	8006a18 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8006718:	f000 fb5c 	bl	8006dd4 <MX_FMC_Init>
  MX_LTDC_Init();
 800671c:	f000 fa70 	bl	8006c00 <MX_LTDC_Init>
  MX_TIM6_Init();
 8006720:	f000 fb20 	bl	8006d64 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8006724:	2001      	movs	r0, #1
 8006726:	f7fa f9b1 	bl	8000a8c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800672a:	2000      	movs	r0, #0
 800672c:	f7fa f9ae 	bl	8000a8c <BSP_LED_Init>
  HAL_ADC_Start(&hadc1);
 8006730:	481e      	ldr	r0, [pc, #120]	; (80067ac <main+0xb8>)
 8006732:	f7fb fabb 	bl	8001cac <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8006736:	481e      	ldr	r0, [pc, #120]	; (80067b0 <main+0xbc>)
 8006738:	f7ff fa8c 	bl	8005c54 <HAL_TIM_Base_Start_IT>
  LCD_Config();
 800673c:	f000 fc18 	bl	8006f70 <LCD_Config>
  printBoardGame();
 8006740:	f7ff feee 	bl	8006520 <printBoardGame>
  printScoreTable();
 8006744:	f7ff ff96 	bl	8006674 <printScoreTable>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO); //Button to use to go back to the menu
 8006748:	2100      	movs	r1, #0
 800674a:	2000      	movs	r0, #0
 800674c:	f7fa f9ce 	bl	8000aec <BSP_PB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  sprintf(string, "Temp: %ld C", JTemp);
 8006750:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <main+0xc0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	4918      	ldr	r1, [pc, #96]	; (80067b8 <main+0xc4>)
 8006758:	4818      	ldr	r0, [pc, #96]	; (80067bc <main+0xc8>)
 800675a:	f000 ff1f 	bl	800759c <siprintf>
	  BSP_LCD_SetFont(&Font12);
 800675e:	4818      	ldr	r0, [pc, #96]	; (80067c0 <main+0xcc>)
 8006760:	f7fa fc52 	bl	8001008 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 200, (uint8_t *)string, LEFT_MODE);
 8006764:	f7fa fbb2 	bl	8000ecc <BSP_LCD_GetYSize>
 8006768:	4603      	mov	r3, r0
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	b29b      	uxth	r3, r3
 800676e:	33c8      	adds	r3, #200	; 0xc8
 8006770:	b299      	uxth	r1, r3
 8006772:	2303      	movs	r3, #3
 8006774:	4a11      	ldr	r2, [pc, #68]	; (80067bc <main+0xc8>)
 8006776:	2000      	movs	r0, #0
 8006778:	f7fa fccc 	bl	8001114 <BSP_LCD_DisplayStringAt>

	  sprintf(string, "Time: %d s", counter);
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <main+0xd0>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	4910      	ldr	r1, [pc, #64]	; (80067c8 <main+0xd4>)
 8006786:	480d      	ldr	r0, [pc, #52]	; (80067bc <main+0xc8>)
 8006788:	f000 ff08 	bl	800759c <siprintf>
	  BSP_LCD_SetFont(&Font12);
 800678c:	480c      	ldr	r0, [pc, #48]	; (80067c0 <main+0xcc>)
 800678e:	f7fa fc3b 	bl	8001008 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 215, (uint8_t *)string, LEFT_MODE);
 8006792:	f7fa fb9b 	bl	8000ecc <BSP_LCD_GetYSize>
 8006796:	4603      	mov	r3, r0
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	b29b      	uxth	r3, r3
 800679c:	33d7      	adds	r3, #215	; 0xd7
 800679e:	b299      	uxth	r1, r3
 80067a0:	2303      	movs	r3, #3
 80067a2:	4a06      	ldr	r2, [pc, #24]	; (80067bc <main+0xc8>)
 80067a4:	2000      	movs	r0, #0
 80067a6:	f7fa fcb5 	bl	8001114 <BSP_LCD_DisplayStringAt>
	  sprintf(string, "Temp: %ld C", JTemp);
 80067aa:	e7d1      	b.n	8006750 <main+0x5c>
 80067ac:	200004f8 	.word	0x200004f8
 80067b0:	20000540 	.word	0x20000540
 80067b4:	20000264 	.word	0x20000264
 80067b8:	08007dcc 	.word	0x08007dcc
 80067bc:	200003ec 	.word	0x200003ec
 80067c0:	2000001c 	.word	0x2000001c
 80067c4:	20000261 	.word	0x20000261
 80067c8:	08007dd8 	.word	0x08007dd8

080067cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b0b8      	sub	sp, #224	; 0xe0
 80067d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80067d6:	2234      	movs	r2, #52	; 0x34
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fed6 	bl	800758c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	605a      	str	r2, [r3, #4]
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80067f0:	f107 0308 	add.w	r3, r7, #8
 80067f4:	2290      	movs	r2, #144	; 0x90
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fec7 	bl	800758c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80067fe:	4b3e      	ldr	r3, [pc, #248]	; (80068f8 <SystemClock_Config+0x12c>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	4a3d      	ldr	r2, [pc, #244]	; (80068f8 <SystemClock_Config+0x12c>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006808:	6413      	str	r3, [r2, #64]	; 0x40
 800680a:	4b3b      	ldr	r3, [pc, #236]	; (80068f8 <SystemClock_Config+0x12c>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	607b      	str	r3, [r7, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006816:	4b39      	ldr	r3, [pc, #228]	; (80068fc <SystemClock_Config+0x130>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a38      	ldr	r2, [pc, #224]	; (80068fc <SystemClock_Config+0x130>)
 800681c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	4b36      	ldr	r3, [pc, #216]	; (80068fc <SystemClock_Config+0x130>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800682e:	2301      	movs	r3, #1
 8006830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800683c:	2302      	movs	r3, #2
 800683e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800684a:	2319      	movs	r3, #25
 800684c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8006850:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006858:	2302      	movs	r3, #2
 800685a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800685e:	2302      	movs	r3, #2
 8006860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006864:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe f917 	bl	8004a9c <HAL_RCC_OscConfig>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8006874:	f000 fbda 	bl	800702c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006878:	f7fe f8c0 	bl	80049fc <HAL_PWREx_EnableOverDrive>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8006882:	f000 fbd3 	bl	800702c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006886:	230f      	movs	r3, #15
 8006888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800688c:	2302      	movs	r3, #2
 800688e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006898:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800689c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80068a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80068a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80068ac:	2106      	movs	r1, #6
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fb66 	bl	8004f80 <HAL_RCC_ClockConfig>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80068ba:	f000 fbb7 	bl	800702c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80068be:	2308      	movs	r3, #8
 80068c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80068c2:	23c0      	movs	r3, #192	; 0xc0
 80068c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80068c6:	2302      	movs	r3, #2
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80068ca:	2302      	movs	r3, #2
 80068cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80068ce:	2300      	movs	r3, #0
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80068d2:	2301      	movs	r3, #1
 80068d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80068d6:	2300      	movs	r3, #0
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068da:	f107 0308 	add.w	r3, r7, #8
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fce8 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <SystemClock_Config+0x122>
  {
    Error_Handler();
 80068ea:	f000 fb9f 	bl	800702c <Error_Handler>
  }
}
 80068ee:	bf00      	nop
 80068f0:	37e0      	adds	r7, #224	; 0xe0
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40023800 	.word	0x40023800
 80068fc:	40007000 	.word	0x40007000

08006900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006906:	463b      	mov	r3, r7
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	605a      	str	r2, [r3, #4]
 800690e:	609a      	str	r2, [r3, #8]
 8006910:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006912:	4b21      	ldr	r3, [pc, #132]	; (8006998 <MX_ADC1_Init+0x98>)
 8006914:	4a21      	ldr	r2, [pc, #132]	; (800699c <MX_ADC1_Init+0x9c>)
 8006916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006918:	4b1f      	ldr	r3, [pc, #124]	; (8006998 <MX_ADC1_Init+0x98>)
 800691a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800691e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <MX_ADC1_Init+0x98>)
 8006922:	2200      	movs	r2, #0
 8006924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006926:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <MX_ADC1_Init+0x98>)
 8006928:	2200      	movs	r2, #0
 800692a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <MX_ADC1_Init+0x98>)
 800692e:	2201      	movs	r2, #1
 8006930:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006932:	4b19      	ldr	r3, [pc, #100]	; (8006998 <MX_ADC1_Init+0x98>)
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800693a:	4b17      	ldr	r3, [pc, #92]	; (8006998 <MX_ADC1_Init+0x98>)
 800693c:	2200      	movs	r2, #0
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <MX_ADC1_Init+0x98>)
 8006942:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <MX_ADC1_Init+0xa0>)
 8006944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <MX_ADC1_Init+0x98>)
 8006948:	2200      	movs	r2, #0
 800694a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <MX_ADC1_Init+0x98>)
 800694e:	2201      	movs	r2, #1
 8006950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <MX_ADC1_Init+0x98>)
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <MX_ADC1_Init+0x98>)
 800695c:	2200      	movs	r2, #0
 800695e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006960:	480d      	ldr	r0, [pc, #52]	; (8006998 <MX_ADC1_Init+0x98>)
 8006962:	f7fb f95f 	bl	8001c24 <HAL_ADC_Init>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800696c:	f000 fb5e 	bl	800702c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <MX_ADC1_Init+0xa4>)
 8006972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006974:	2301      	movs	r3, #1
 8006976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006978:	2303      	movs	r3, #3
 800697a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800697c:	463b      	mov	r3, r7
 800697e:	4619      	mov	r1, r3
 8006980:	4805      	ldr	r0, [pc, #20]	; (8006998 <MX_ADC1_Init+0x98>)
 8006982:	f7fb fa61 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800698c:	f000 fb4e 	bl	800702c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	200004f8 	.word	0x200004f8
 800699c:	40012000 	.word	0x40012000
 80069a0:	0f000001 	.word	0x0f000001
 80069a4:	10000012 	.word	0x10000012

080069a8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80069ac:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069ae:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <MX_DMA2D_Init+0x6c>)
 80069b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80069b2:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80069b8:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80069be:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80069d6:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069d8:	2200      	movs	r2, #0
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069de:	2200      	movs	r2, #0
 80069e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80069e8:	4809      	ldr	r0, [pc, #36]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069ea:	f7fb ff29 	bl	8002840 <HAL_DMA2D_Init>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80069f4:	f000 fb1a 	bl	800702c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80069f8:	2101      	movs	r1, #1
 80069fa:	4805      	ldr	r0, [pc, #20]	; (8006a10 <MX_DMA2D_Init+0x68>)
 80069fc:	f7fc f88e 	bl	8002b1c <HAL_DMA2D_ConfigLayer>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8006a06:	f000 fb11 	bl	800702c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000580 	.word	0x20000580
 8006a14:	4002b000 	.word	0x4002b000

08006a18 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b0aa      	sub	sp, #168	; 0xa8
 8006a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8006a1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	605a      	str	r2, [r3, #4]
 8006a28:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8006a2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a2e:	2224      	movs	r2, #36	; 0x24
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fdaa 	bl	800758c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8006a38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	609a      	str	r2, [r3, #8]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	611a      	str	r2, [r3, #16]
 8006a48:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8006a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a4e:	2234      	movs	r2, #52	; 0x34
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fd9a 	bl	800758c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8006a58:	463b      	mov	r3, r7
 8006a5a:	222c      	movs	r2, #44	; 0x2c
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fd94 	bl	800758c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8006a64:	4b64      	ldr	r3, [pc, #400]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a66:	4a65      	ldr	r2, [pc, #404]	; (8006bfc <MX_DSIHOST_DSI_Init+0x1e4>)
 8006a68:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8006a6a:	4b63      	ldr	r3, [pc, #396]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8006a70:	4b61      	ldr	r3, [pc, #388]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a72:	2204      	movs	r2, #4
 8006a74:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8006a76:	4b60      	ldr	r3, [pc, #384]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8006a7c:	2314      	movs	r3, #20
 8006a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8006a8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006a92:	4619      	mov	r1, r3
 8006a94:	4858      	ldr	r0, [pc, #352]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006a96:	f7fc f9c3 	bl	8002e20 <HAL_DSI_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8006aa0:	f000 fac4 	bl	800702c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8006ad6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ada:	4619      	mov	r1, r3
 8006adc:	4846      	ldr	r0, [pc, #280]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006ade:	f7fc ffdb 	bl	8003a98 <HAL_DSI_ConfigHostTimeouts>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8006ae8:	f000 faa0 	bl	800702c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8006aec:	231c      	movs	r3, #28
 8006aee:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8006af0:	2321      	movs	r3, #33	; 0x21
 8006af2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8006af4:	230f      	movs	r3, #15
 8006af6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8006af8:	2319      	movs	r3, #25
 8006afa:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8006b04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b08:	4619      	mov	r1, r3
 8006b0a:	483b      	ldr	r0, [pc, #236]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006b0c:	f7fc ff5a 	bl	80039c4 <HAL_DSI_ConfigPhyTimer>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8006b16:	f000 fa89 	bl	800702c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	4836      	ldr	r0, [pc, #216]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006b1e:	f7fc ff29 	bl	8003974 <HAL_DSI_ConfigFlowControl>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8006b28:	f000 fa80 	bl	800702c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8006b2c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006b30:	4831      	ldr	r0, [pc, #196]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006b32:	f7fd f96f 	bl	8003e14 <HAL_DSI_SetLowPowerRXFilter>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8006b3c:	f000 fa76 	bl	800702c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8006b40:	2100      	movs	r1, #0
 8006b42:	482d      	ldr	r0, [pc, #180]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006b44:	f7fc fafa 	bl	800313c <HAL_DSI_ConfigErrorMonitor>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8006b4e:	f000 fa6d 	bl	800702c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8006b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	481a      	ldr	r0, [pc, #104]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006b8e:	f7fc fe93 	bl	80038b8 <HAL_DSI_ConfigCommand>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8006b98:	f000 fa48 	bl	800702c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8006ba0:	2305      	movs	r3, #5
 8006ba2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8006ba4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006ba8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8006baa:	2310      	movs	r3, #16
 8006bac:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4619      	mov	r1, r3
 8006bce:	480a      	ldr	r0, [pc, #40]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006bd0:	f7fc fd98 	bl	8003704 <HAL_DSI_ConfigAdaptedCommandMode>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8006bda:	f000 fa27 	bl	800702c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8006bde:	2100      	movs	r1, #0
 8006be0:	4805      	ldr	r0, [pc, #20]	; (8006bf8 <MX_DSIHOST_DSI_Init+0x1e0>)
 8006be2:	f7fc fb67 	bl	80032b4 <HAL_DSI_SetGenericVCID>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8006bec:	f000 fa1e 	bl	800702c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8006bf0:	bf00      	nop
 8006bf2:	37a8      	adds	r7, #168	; 0xa8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	200003d0 	.word	0x200003d0
 8006bfc:	40016c00 	.word	0x40016c00

08006c00 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b09a      	sub	sp, #104	; 0x68
 8006c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8006c06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006c0a:	2234      	movs	r2, #52	; 0x34
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fcbc 	bl	800758c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8006c14:	463b      	mov	r3, r7
 8006c16:	2234      	movs	r2, #52	; 0x34
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fcb6 	bl	800758c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8006c20:	4b4e      	ldr	r3, [pc, #312]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c22:	4a4f      	ldr	r2, [pc, #316]	; (8006d60 <MX_LTDC_Init+0x160>)
 8006c24:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006c26:	4b4d      	ldr	r3, [pc, #308]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8006c2c:	4b4b      	ldr	r3, [pc, #300]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8006c32:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006c38:	4b48      	ldr	r3, [pc, #288]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8006c3e:	4b47      	ldr	r3, [pc, #284]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c40:	2207      	movs	r2, #7
 8006c42:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8006c44:	4b45      	ldr	r3, [pc, #276]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c46:	2203      	movs	r2, #3
 8006c48:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8006c4a:	4b44      	ldr	r3, [pc, #272]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c4c:	220e      	movs	r2, #14
 8006c4e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8006c50:	4b42      	ldr	r3, [pc, #264]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c52:	2205      	movs	r2, #5
 8006c54:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8006c56:	4b41      	ldr	r3, [pc, #260]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c58:	f240 228e 	movw	r2, #654	; 0x28e
 8006c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8006c5e:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c60:	f240 12e5 	movw	r2, #485	; 0x1e5
 8006c64:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8006c66:	4b3d      	ldr	r3, [pc, #244]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c68:	f44f 7225 	mov.w	r2, #660	; 0x294
 8006c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8006c6e:	4b3b      	ldr	r3, [pc, #236]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c70:	f240 12e7 	movw	r2, #487	; 0x1e7
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006c76:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006c7e:	4b37      	ldr	r3, [pc, #220]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006c86:	4b35      	ldr	r3, [pc, #212]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006c8e:	4833      	ldr	r0, [pc, #204]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006c90:	f7fd fbbc 	bl	800440c <HAL_LTDC_Init>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8006c9a:	f000 f9c7 	bl	800702c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cbe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006cc0:	2305      	movs	r3, #5
 8006cc2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4619      	mov	r1, r3
 8006cea:	481c      	ldr	r0, [pc, #112]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006cec:	f7fd fc5e 	bl	80045ac <HAL_LTDC_ConfigLayer>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8006cf6:	f000 f999 	bl	800702c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d1a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006d1c:	2305      	movs	r3, #5
 8006d1e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8006d3e:	463b      	mov	r3, r7
 8006d40:	2201      	movs	r2, #1
 8006d42:	4619      	mov	r1, r3
 8006d44:	4805      	ldr	r0, [pc, #20]	; (8006d5c <MX_LTDC_Init+0x15c>)
 8006d46:	f7fd fc31 	bl	80045ac <HAL_LTDC_ConfigLayer>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8006d50:	f000 f96c 	bl	800702c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006d54:	bf00      	nop
 8006d56:	3768      	adds	r7, #104	; 0x68
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000450 	.word	0x20000450
 8006d60:	40016800 	.word	0x40016800

08006d64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	605a      	str	r2, [r3, #4]
 8006d72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006d74:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <MX_TIM6_Init+0x68>)
 8006d76:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <MX_TIM6_Init+0x6c>)
 8006d78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8006d7a:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <MX_TIM6_Init+0x68>)
 8006d7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006d80:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <MX_TIM6_Init+0x68>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8006d88:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <MX_TIM6_Init+0x68>)
 8006d8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8006d8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d90:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <MX_TIM6_Init+0x68>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006d96:	480d      	ldr	r0, [pc, #52]	; (8006dcc <MX_TIM6_Init+0x68>)
 8006d98:	f7fe ff31 	bl	8005bfe <HAL_TIM_Base_Init>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8006da2:	f000 f943 	bl	800702c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006da6:	2300      	movs	r3, #0
 8006da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4806      	ldr	r0, [pc, #24]	; (8006dcc <MX_TIM6_Init+0x68>)
 8006db4:	f7ff f960 	bl	8006078 <HAL_TIMEx_MasterConfigSynchronization>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8006dbe:	f000 f935 	bl	800702c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000540 	.word	0x20000540
 8006dd0:	40001000 	.word	0x40001000

08006dd4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	609a      	str	r2, [r3, #8]
 8006de4:	60da      	str	r2, [r3, #12]
 8006de6:	611a      	str	r2, [r3, #16]
 8006de8:	615a      	str	r2, [r3, #20]
 8006dea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006dec:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <MX_FMC_Init+0x94>)
 8006dee:	4a1f      	ldr	r2, [pc, #124]	; (8006e6c <MX_FMC_Init+0x98>)
 8006df0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <MX_FMC_Init+0x94>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006df8:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <MX_FMC_Init+0x94>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e00:	2208      	movs	r2, #8
 8006e02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006e04:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e06:	2220      	movs	r2, #32
 8006e08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e0c:	2240      	movs	r2, #64	; 0x40
 8006e0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8006e10:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8006e1c:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006e28:	4b0f      	ldr	r3, [pc, #60]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8006e2e:	2310      	movs	r3, #16
 8006e30:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8006e32:	2310      	movs	r3, #16
 8006e34:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8006e36:	2310      	movs	r3, #16
 8006e38:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8006e3e:	2310      	movs	r3, #16
 8006e40:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8006e42:	2310      	movs	r3, #16
 8006e44:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8006e46:	2310      	movs	r3, #16
 8006e48:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006e4a:	1d3b      	adds	r3, r7, #4
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4806      	ldr	r0, [pc, #24]	; (8006e68 <MX_FMC_Init+0x94>)
 8006e50:	f7fe fe56 	bl	8005b00 <HAL_SDRAM_Init>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8006e5a:	f000 f8e7 	bl	800702c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8006e5e:	bf00      	nop
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	200005d8 	.word	0x200005d8
 8006e6c:	a0000140 	.word	0xa0000140

08006e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08e      	sub	sp, #56	; 0x38
 8006e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
 8006e80:	609a      	str	r2, [r3, #8]
 8006e82:	60da      	str	r2, [r3, #12]
 8006e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e86:	4b38      	ldr	r3, [pc, #224]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	4a37      	ldr	r2, [pc, #220]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006e8c:	f043 0310 	orr.w	r3, r3, #16
 8006e90:	6313      	str	r3, [r2, #48]	; 0x30
 8006e92:	4b35      	ldr	r3, [pc, #212]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	623b      	str	r3, [r7, #32]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e9e:	4b32      	ldr	r3, [pc, #200]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	4a31      	ldr	r2, [pc, #196]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ea4:	f043 0302 	orr.w	r3, r3, #2
 8006ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eaa:	4b2f      	ldr	r3, [pc, #188]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	61fb      	str	r3, [r7, #28]
 8006eb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006eb6:	4b2c      	ldr	r3, [pc, #176]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	4a2b      	ldr	r2, [pc, #172]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec2:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ece:	4b26      	ldr	r3, [pc, #152]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	4a25      	ldr	r2, [pc, #148]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ed4:	f043 0308 	orr.w	r3, r3, #8
 8006ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eda:	4b23      	ldr	r3, [pc, #140]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006ee6:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006efe:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f04:	f043 0320 	orr.w	r3, r3, #32
 8006f08:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0a:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	6313      	str	r3, [r2, #48]	; 0x30
 8006f22:	4b11      	ldr	r3, [pc, #68]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	4a0d      	ldr	r2, [pc, #52]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f38:	6313      	str	r3, [r2, #48]	; 0x30
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <MX_GPIO_Init+0xf8>)
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4804      	ldr	r0, [pc, #16]	; (8006f6c <MX_GPIO_Init+0xfc>)
 8006f5c:	f7fc ff88 	bl	8003e70 <HAL_GPIO_Init>

}
 8006f60:	bf00      	nop
 8006f62:	3738      	adds	r7, #56	; 0x38
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	40022000 	.word	0x40022000

08006f70 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
  uint32_t  lcd_status = LCD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 8006f7a:	f7f9 fe16 	bl	8000baa <BSP_LCD_Init>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1fc      	bne.n	8006f82 <LCD_Config+0x12>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8006f88:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	f7f9 ffa9 	bl	8000ee4 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295
 8006f96:	f7fa f851 	bl	800103c <BSP_LCD_Clear>

  /* Set LCD Example description */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8006f9a:	481f      	ldr	r0, [pc, #124]	; (8007018 <LCD_Config+0xa8>)
 8006f9c:	f7fa f802 	bl	8000fa4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8006fa0:	481e      	ldr	r0, [pc, #120]	; (800701c <LCD_Config+0xac>)
 8006fa2:	f7fa f831 	bl	8001008 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t *)"........", CENTER_MODE);
 8006fa6:	f7f9 ff91 	bl	8000ecc <BSP_LCD_GetYSize>
 8006faa:	4603      	mov	r3, r0
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b14      	subs	r3, #20
 8006fb0:	b299      	uxth	r1, r3
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4a1a      	ldr	r2, [pc, #104]	; (8007020 <LCD_Config+0xb0>)
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f7fa f8ac 	bl	8001114 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8006fbc:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8006fc0:	f7f9 fff0 	bl	8000fa4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 35);
 8006fc4:	f7f9 ff76 	bl	8000eb4 <BSP_LCD_GetXSize>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	2323      	movs	r3, #35	; 0x23
 8006fce:	2100      	movs	r1, #0
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f7fa f9e3 	bl	800139c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fda:	f7f9 ffe3 	bl	8000fa4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 8006fde:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8006fe2:	f7f9 fff7 	bl	8000fd4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8006fe6:	480f      	ldr	r0, [pc, #60]	; (8007024 <LCD_Config+0xb4>)
 8006fe8:	f7fa f80e 	bl	8001008 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"The Reversi", CENTER_MODE);
 8006fec:	2301      	movs	r3, #1
 8006fee:	4a0e      	ldr	r2, [pc, #56]	; (8007028 <LCD_Config+0xb8>)
 8006ff0:	210a      	movs	r1, #10
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f7fa f88e 	bl	8001114 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8006ff8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8006ffc:	f7f9 ffd2 	bl	8000fa4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007000:	f04f 30ff 	mov.w	r0, #4294967295
 8007004:	f7f9 ffe6 	bl	8000fd4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8007008:	4806      	ldr	r0, [pc, #24]	; (8007024 <LCD_Config+0xb4>)
 800700a:	f7f9 fffd 	bl	8001008 <BSP_LCD_SetFont>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	ff000080 	.word	0xff000080
 800701c:	2000001c 	.word	0x2000001c
 8007020:	08007de4 	.word	0x08007de4
 8007024:	20000014 	.word	0x20000014
 8007028:	08007df0 	.word	0x08007df0

0800702c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007030:	bf00      	nop
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007042:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <HAL_MspInit+0x44>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	4a0e      	ldr	r2, [pc, #56]	; (8007080 <HAL_MspInit+0x44>)
 8007048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800704c:	6413      	str	r3, [r2, #64]	; 0x40
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <HAL_MspInit+0x44>)
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007056:	607b      	str	r3, [r7, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <HAL_MspInit+0x44>)
 800705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705e:	4a08      	ldr	r2, [pc, #32]	; (8007080 <HAL_MspInit+0x44>)
 8007060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007064:	6453      	str	r3, [r2, #68]	; 0x44
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <HAL_MspInit+0x44>)
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40023800 	.word	0x40023800

08007084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <HAL_ADC_MspInit+0x38>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d10b      	bne.n	80070ae <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <HAL_ADC_MspInit+0x3c>)
 8007098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709a:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <HAL_ADC_MspInit+0x3c>)
 800709c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a0:	6453      	str	r3, [r2, #68]	; 0x44
 80070a2:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <HAL_ADC_MspInit+0x3c>)
 80070a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40012000 	.word	0x40012000
 80070c0:	40023800 	.word	0x40023800

080070c4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <HAL_DMA2D_MspInit+0x38>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10b      	bne.n	80070ee <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80070d6:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <HAL_DMA2D_MspInit+0x3c>)
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	4a09      	ldr	r2, [pc, #36]	; (8007100 <HAL_DMA2D_MspInit+0x3c>)
 80070dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070e0:	6313      	str	r3, [r2, #48]	; 0x30
 80070e2:	4b07      	ldr	r3, [pc, #28]	; (8007100 <HAL_DMA2D_MspInit+0x3c>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	4002b000 	.word	0x4002b000
 8007100:	40023800 	.word	0x40023800

08007104 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800710c:	f107 0314 	add.w	r3, r7, #20
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	605a      	str	r2, [r3, #4]
 8007116:	609a      	str	r2, [r3, #8]
 8007118:	60da      	str	r2, [r3, #12]
 800711a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a17      	ldr	r2, [pc, #92]	; (8007180 <HAL_DSI_MspInit+0x7c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d127      	bne.n	8007176 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8007126:	4b17      	ldr	r3, [pc, #92]	; (8007184 <HAL_DSI_MspInit+0x80>)
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	4a16      	ldr	r2, [pc, #88]	; (8007184 <HAL_DSI_MspInit+0x80>)
 800712c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007130:	6453      	str	r3, [r2, #68]	; 0x44
 8007132:	4b14      	ldr	r3, [pc, #80]	; (8007184 <HAL_DSI_MspInit+0x80>)
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <HAL_DSI_MspInit+0x80>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	4a10      	ldr	r2, [pc, #64]	; (8007184 <HAL_DSI_MspInit+0x80>)
 8007144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007148:	6313      	str	r3, [r2, #48]	; 0x30
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <HAL_DSI_MspInit+0x80>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007156:	2304      	movs	r3, #4
 8007158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715a:	2302      	movs	r3, #2
 800715c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007162:	2300      	movs	r3, #0
 8007164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8007166:	230d      	movs	r3, #13
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800716a:	f107 0314 	add.w	r3, r7, #20
 800716e:	4619      	mov	r1, r3
 8007170:	4805      	ldr	r0, [pc, #20]	; (8007188 <HAL_DSI_MspInit+0x84>)
 8007172:	f7fc fe7d 	bl	8003e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8007176:	bf00      	nop
 8007178:	3728      	adds	r7, #40	; 0x28
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40016c00 	.word	0x40016c00
 8007184:	40023800 	.word	0x40023800
 8007188:	40022400 	.word	0x40022400

0800718c <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a08      	ldr	r2, [pc, #32]	; (80071bc <HAL_DSI_MspDeInit+0x30>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d109      	bne.n	80071b2 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800719e:	4b08      	ldr	r3, [pc, #32]	; (80071c0 <HAL_DSI_MspDeInit+0x34>)
 80071a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a2:	4a07      	ldr	r2, [pc, #28]	; (80071c0 <HAL_DSI_MspDeInit+0x34>)
 80071a4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80071a8:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 80071aa:	2104      	movs	r1, #4
 80071ac:	4805      	ldr	r0, [pc, #20]	; (80071c4 <HAL_DSI_MspDeInit+0x38>)
 80071ae:	f7fd f809 	bl	80041c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	40016c00 	.word	0x40016c00
 80071c0:	40023800 	.word	0x40023800
 80071c4:	40022400 	.word	0x40022400

080071c8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <HAL_LTDC_MspInit+0x38>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d10b      	bne.n	80071f2 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <HAL_LTDC_MspInit+0x3c>)
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <HAL_LTDC_MspInit+0x3c>)
 80071e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071e4:	6453      	str	r3, [r2, #68]	; 0x44
 80071e6:	4b07      	ldr	r3, [pc, #28]	; (8007204 <HAL_LTDC_MspInit+0x3c>)
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80071f2:	bf00      	nop
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40016800 	.word	0x40016800
 8007204:	40023800 	.word	0x40023800

08007208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a0d      	ldr	r2, [pc, #52]	; (800724c <HAL_TIM_Base_MspInit+0x44>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d113      	bne.n	8007242 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <HAL_TIM_Base_MspInit+0x48>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	4a0c      	ldr	r2, [pc, #48]	; (8007250 <HAL_TIM_Base_MspInit+0x48>)
 8007220:	f043 0310 	orr.w	r3, r3, #16
 8007224:	6413      	str	r3, [r2, #64]	; 0x40
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <HAL_TIM_Base_MspInit+0x48>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	2036      	movs	r0, #54	; 0x36
 8007238:	f7fb f90f 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800723c:	2036      	movs	r0, #54	; 0x36
 800723e:	f7fb f928 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40001000 	.word	0x40001000
 8007250:	40023800 	.word	0x40023800

08007254 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800725a:	1d3b      	adds	r3, r7, #4
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	605a      	str	r2, [r3, #4]
 8007262:	609a      	str	r2, [r3, #8]
 8007264:	60da      	str	r2, [r3, #12]
 8007266:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8007268:	4b43      	ldr	r3, [pc, #268]	; (8007378 <HAL_FMC_MspInit+0x124>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d17e      	bne.n	800736e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8007270:	4b41      	ldr	r3, [pc, #260]	; (8007378 <HAL_FMC_MspInit+0x124>)
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007276:	4b41      	ldr	r3, [pc, #260]	; (800737c <HAL_FMC_MspInit+0x128>)
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	4a40      	ldr	r2, [pc, #256]	; (800737c <HAL_FMC_MspInit+0x128>)
 800727c:	f043 0301 	orr.w	r3, r3, #1
 8007280:	6393      	str	r3, [r2, #56]	; 0x38
 8007282:	4b3e      	ldr	r3, [pc, #248]	; (800737c <HAL_FMC_MspInit+0x128>)
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800728e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007292:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007294:	2302      	movs	r3, #2
 8007296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800729c:	2303      	movs	r3, #3
 800729e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80072a0:	230c      	movs	r3, #12
 80072a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	4619      	mov	r1, r3
 80072a8:	4835      	ldr	r0, [pc, #212]	; (8007380 <HAL_FMC_MspInit+0x12c>)
 80072aa:	f7fc fde1 	bl	8003e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80072ae:	2360      	movs	r3, #96	; 0x60
 80072b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b2:	2302      	movs	r3, #2
 80072b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ba:	2303      	movs	r3, #3
 80072bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80072be:	230c      	movs	r3, #12
 80072c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072c2:	1d3b      	adds	r3, r7, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	482f      	ldr	r0, [pc, #188]	; (8007384 <HAL_FMC_MspInit+0x130>)
 80072c8:	f7fc fdd2 	bl	8003e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 80072cc:	f248 1337 	movw	r3, #33079	; 0x8137
 80072d0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d2:	2302      	movs	r3, #2
 80072d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072da:	2303      	movs	r3, #3
 80072dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80072de:	230c      	movs	r3, #12
 80072e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4828      	ldr	r0, [pc, #160]	; (8007388 <HAL_FMC_MspInit+0x134>)
 80072e8:	f7fc fdc2 	bl	8003e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 80072ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 80072f0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f2:	2302      	movs	r3, #2
 80072f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072fa:	2303      	movs	r3, #3
 80072fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80072fe:	230c      	movs	r3, #12
 8007300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007302:	1d3b      	adds	r3, r7, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4821      	ldr	r0, [pc, #132]	; (800738c <HAL_FMC_MspInit+0x138>)
 8007308:	f7fc fdb2 	bl	8003e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800730c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8007310:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007312:	2302      	movs	r3, #2
 8007314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800731a:	2303      	movs	r3, #3
 800731c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800731e:	230c      	movs	r3, #12
 8007320:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007322:	1d3b      	adds	r3, r7, #4
 8007324:	4619      	mov	r1, r3
 8007326:	481a      	ldr	r0, [pc, #104]	; (8007390 <HAL_FMC_MspInit+0x13c>)
 8007328:	f7fc fda2 	bl	8003e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800732c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007330:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007332:	2302      	movs	r3, #2
 8007334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800733a:	2303      	movs	r3, #3
 800733c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800733e:	230c      	movs	r3, #12
 8007340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007342:	1d3b      	adds	r3, r7, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4813      	ldr	r0, [pc, #76]	; (8007394 <HAL_FMC_MspInit+0x140>)
 8007348:	f7fc fd92 	bl	8003e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800734c:	f64f 7320 	movw	r3, #65312	; 0xff20
 8007350:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007352:	2302      	movs	r3, #2
 8007354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800735a:	2303      	movs	r3, #3
 800735c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800735e:	230c      	movs	r3, #12
 8007360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007362:	1d3b      	adds	r3, r7, #4
 8007364:	4619      	mov	r1, r3
 8007366:	480c      	ldr	r0, [pc, #48]	; (8007398 <HAL_FMC_MspInit+0x144>)
 8007368:	f7fc fd82 	bl	8003e70 <HAL_GPIO_Init>
 800736c:	e000      	b.n	8007370 <HAL_FMC_MspInit+0x11c>
    return;
 800736e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000268 	.word	0x20000268
 800737c:	40023800 	.word	0x40023800
 8007380:	40021000 	.word	0x40021000
 8007384:	40020400 	.word	0x40020400
 8007388:	40021800 	.word	0x40021800
 800738c:	40020c00 	.word	0x40020c00
 8007390:	40022000 	.word	0x40022000
 8007394:	40021400 	.word	0x40021400
 8007398:	40021c00 	.word	0x40021c00

0800739c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80073a4:	f7ff ff56 	bl	8007254 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80073b4:	bf00      	nop
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073be:	b480      	push	{r7}
 80073c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073c2:	e7fe      	b.n	80073c2 <HardFault_Handler+0x4>

080073c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073c8:	e7fe      	b.n	80073c8 <MemManage_Handler+0x4>

080073ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073ca:	b480      	push	{r7}
 80073cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073ce:	e7fe      	b.n	80073ce <BusFault_Handler+0x4>

080073d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073d4:	e7fe      	b.n	80073d4 <UsageFault_Handler+0x4>

080073d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073d6:	b480      	push	{r7}
 80073d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073da:	bf00      	nop
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073e8:	bf00      	nop
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073f2:	b480      	push	{r7}
 80073f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073f6:	bf00      	nop
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007404:	f7fa fbcc 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007408:	bf00      	nop
 800740a:	bd80      	pop	{r7, pc}

0800740c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007410:	4802      	ldr	r0, [pc, #8]	; (800741c <TIM6_DAC_IRQHandler+0x10>)
 8007412:	f7fe fc49 	bl	8005ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20000540 	.word	0x20000540

08007420 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <_sbrk+0x50>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <_sbrk+0x16>
		heap_end = &end;
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <_sbrk+0x50>)
 8007432:	4a10      	ldr	r2, [pc, #64]	; (8007474 <_sbrk+0x54>)
 8007434:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007436:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <_sbrk+0x50>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800743c:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <_sbrk+0x50>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	466a      	mov	r2, sp
 8007446:	4293      	cmp	r3, r2
 8007448:	d907      	bls.n	800745a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800744a:	f000 f875 	bl	8007538 <__errno>
 800744e:	4602      	mov	r2, r0
 8007450:	230c      	movs	r3, #12
 8007452:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
 8007458:	e006      	b.n	8007468 <_sbrk+0x48>
	}

	heap_end += incr;
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <_sbrk+0x50>)
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	4a03      	ldr	r2, [pc, #12]	; (8007470 <_sbrk+0x50>)
 8007464:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007466:	68fb      	ldr	r3, [r7, #12]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	2000026c 	.word	0x2000026c
 8007474:	20000610 	.word	0x20000610

08007478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800747c:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <SystemInit+0x5c>)
 800747e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007482:	4a14      	ldr	r2, [pc, #80]	; (80074d4 <SystemInit+0x5c>)
 8007484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800748c:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <SystemInit+0x60>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a11      	ldr	r2, [pc, #68]	; (80074d8 <SystemInit+0x60>)
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007498:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <SystemInit+0x60>)
 800749a:	2200      	movs	r2, #0
 800749c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800749e:	4b0e      	ldr	r3, [pc, #56]	; (80074d8 <SystemInit+0x60>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	490d      	ldr	r1, [pc, #52]	; (80074d8 <SystemInit+0x60>)
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <SystemInit+0x64>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80074aa:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <SystemInit+0x60>)
 80074ac:	4a0c      	ldr	r2, [pc, #48]	; (80074e0 <SystemInit+0x68>)
 80074ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80074b0:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <SystemInit+0x60>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a08      	ldr	r2, [pc, #32]	; (80074d8 <SystemInit+0x60>)
 80074b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <SystemInit+0x60>)
 80074be:	2200      	movs	r2, #0
 80074c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074c2:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <SystemInit+0x5c>)
 80074c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074c8:	609a      	str	r2, [r3, #8]
#endif
}
 80074ca:	bf00      	nop
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	e000ed00 	.word	0xe000ed00
 80074d8:	40023800 	.word	0x40023800
 80074dc:	fef6ffff 	.word	0xfef6ffff
 80074e0:	24003010 	.word	0x24003010

080074e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80074e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800751c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80074e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80074ea:	e003      	b.n	80074f4 <LoopCopyDataInit>

080074ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80074ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80074f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80074f2:	3104      	adds	r1, #4

080074f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80074f4:	480b      	ldr	r0, [pc, #44]	; (8007524 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80074f6:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80074f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80074fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80074fc:	d3f6      	bcc.n	80074ec <CopyDataInit>
  ldr  r2, =_sbss
 80074fe:	4a0b      	ldr	r2, [pc, #44]	; (800752c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007500:	e002      	b.n	8007508 <LoopFillZerobss>

08007502 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007502:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007504:	f842 3b04 	str.w	r3, [r2], #4

08007508 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007508:	4b09      	ldr	r3, [pc, #36]	; (8007530 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800750a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800750c:	d3f9      	bcc.n	8007502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800750e:	f7ff ffb3 	bl	8007478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007512:	f000 f817 	bl	8007544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007516:	f7ff f8ed 	bl	80066f4 <main>
  bx  lr    
 800751a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800751c:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 8007520:	08009f98 	.word	0x08009f98
  ldr  r0, =_sdata
 8007524:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007528:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 800752c:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8007530:	20000610 	.word	0x20000610

08007534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007534:	e7fe      	b.n	8007534 <ADC_IRQHandler>
	...

08007538 <__errno>:
 8007538:	4b01      	ldr	r3, [pc, #4]	; (8007540 <__errno+0x8>)
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	2000003c 	.word	0x2000003c

08007544 <__libc_init_array>:
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	4e0d      	ldr	r6, [pc, #52]	; (800757c <__libc_init_array+0x38>)
 8007548:	4c0d      	ldr	r4, [pc, #52]	; (8007580 <__libc_init_array+0x3c>)
 800754a:	1ba4      	subs	r4, r4, r6
 800754c:	10a4      	asrs	r4, r4, #2
 800754e:	2500      	movs	r5, #0
 8007550:	42a5      	cmp	r5, r4
 8007552:	d109      	bne.n	8007568 <__libc_init_array+0x24>
 8007554:	4e0b      	ldr	r6, [pc, #44]	; (8007584 <__libc_init_array+0x40>)
 8007556:	4c0c      	ldr	r4, [pc, #48]	; (8007588 <__libc_init_array+0x44>)
 8007558:	f000 fc26 	bl	8007da8 <_init>
 800755c:	1ba4      	subs	r4, r4, r6
 800755e:	10a4      	asrs	r4, r4, #2
 8007560:	2500      	movs	r5, #0
 8007562:	42a5      	cmp	r5, r4
 8007564:	d105      	bne.n	8007572 <__libc_init_array+0x2e>
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800756c:	4798      	blx	r3
 800756e:	3501      	adds	r5, #1
 8007570:	e7ee      	b.n	8007550 <__libc_init_array+0xc>
 8007572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007576:	4798      	blx	r3
 8007578:	3501      	adds	r5, #1
 800757a:	e7f2      	b.n	8007562 <__libc_init_array+0x1e>
 800757c:	08009f90 	.word	0x08009f90
 8007580:	08009f90 	.word	0x08009f90
 8007584:	08009f90 	.word	0x08009f90
 8007588:	08009f94 	.word	0x08009f94

0800758c <memset>:
 800758c:	4402      	add	r2, r0
 800758e:	4603      	mov	r3, r0
 8007590:	4293      	cmp	r3, r2
 8007592:	d100      	bne.n	8007596 <memset+0xa>
 8007594:	4770      	bx	lr
 8007596:	f803 1b01 	strb.w	r1, [r3], #1
 800759a:	e7f9      	b.n	8007590 <memset+0x4>

0800759c <siprintf>:
 800759c:	b40e      	push	{r1, r2, r3}
 800759e:	b500      	push	{lr}
 80075a0:	b09c      	sub	sp, #112	; 0x70
 80075a2:	ab1d      	add	r3, sp, #116	; 0x74
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	9006      	str	r0, [sp, #24]
 80075a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075ac:	4809      	ldr	r0, [pc, #36]	; (80075d4 <siprintf+0x38>)
 80075ae:	9107      	str	r1, [sp, #28]
 80075b0:	9104      	str	r1, [sp, #16]
 80075b2:	4909      	ldr	r1, [pc, #36]	; (80075d8 <siprintf+0x3c>)
 80075b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b8:	9105      	str	r1, [sp, #20]
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	a902      	add	r1, sp, #8
 80075c0:	f000 f866 	bl	8007690 <_svfiprintf_r>
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	b01c      	add	sp, #112	; 0x70
 80075cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d0:	b003      	add	sp, #12
 80075d2:	4770      	bx	lr
 80075d4:	2000003c 	.word	0x2000003c
 80075d8:	ffff0208 	.word	0xffff0208

080075dc <__ssputs_r>:
 80075dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	688e      	ldr	r6, [r1, #8]
 80075e2:	429e      	cmp	r6, r3
 80075e4:	4682      	mov	sl, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	4690      	mov	r8, r2
 80075ea:	4699      	mov	r9, r3
 80075ec:	d837      	bhi.n	800765e <__ssputs_r+0x82>
 80075ee:	898a      	ldrh	r2, [r1, #12]
 80075f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075f4:	d031      	beq.n	800765a <__ssputs_r+0x7e>
 80075f6:	6825      	ldr	r5, [r4, #0]
 80075f8:	6909      	ldr	r1, [r1, #16]
 80075fa:	1a6f      	subs	r7, r5, r1
 80075fc:	6965      	ldr	r5, [r4, #20]
 80075fe:	2302      	movs	r3, #2
 8007600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007604:	fb95 f5f3 	sdiv	r5, r5, r3
 8007608:	f109 0301 	add.w	r3, r9, #1
 800760c:	443b      	add	r3, r7
 800760e:	429d      	cmp	r5, r3
 8007610:	bf38      	it	cc
 8007612:	461d      	movcc	r5, r3
 8007614:	0553      	lsls	r3, r2, #21
 8007616:	d530      	bpl.n	800767a <__ssputs_r+0x9e>
 8007618:	4629      	mov	r1, r5
 800761a:	f000 fb2b 	bl	8007c74 <_malloc_r>
 800761e:	4606      	mov	r6, r0
 8007620:	b950      	cbnz	r0, 8007638 <__ssputs_r+0x5c>
 8007622:	230c      	movs	r3, #12
 8007624:	f8ca 3000 	str.w	r3, [sl]
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	f04f 30ff 	mov.w	r0, #4294967295
 8007634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007638:	463a      	mov	r2, r7
 800763a:	6921      	ldr	r1, [r4, #16]
 800763c:	f000 faa8 	bl	8007b90 <memcpy>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	6126      	str	r6, [r4, #16]
 800764e:	6165      	str	r5, [r4, #20]
 8007650:	443e      	add	r6, r7
 8007652:	1bed      	subs	r5, r5, r7
 8007654:	6026      	str	r6, [r4, #0]
 8007656:	60a5      	str	r5, [r4, #8]
 8007658:	464e      	mov	r6, r9
 800765a:	454e      	cmp	r6, r9
 800765c:	d900      	bls.n	8007660 <__ssputs_r+0x84>
 800765e:	464e      	mov	r6, r9
 8007660:	4632      	mov	r2, r6
 8007662:	4641      	mov	r1, r8
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	f000 fa9e 	bl	8007ba6 <memmove>
 800766a:	68a3      	ldr	r3, [r4, #8]
 800766c:	1b9b      	subs	r3, r3, r6
 800766e:	60a3      	str	r3, [r4, #8]
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	441e      	add	r6, r3
 8007674:	6026      	str	r6, [r4, #0]
 8007676:	2000      	movs	r0, #0
 8007678:	e7dc      	b.n	8007634 <__ssputs_r+0x58>
 800767a:	462a      	mov	r2, r5
 800767c:	f000 fb54 	bl	8007d28 <_realloc_r>
 8007680:	4606      	mov	r6, r0
 8007682:	2800      	cmp	r0, #0
 8007684:	d1e2      	bne.n	800764c <__ssputs_r+0x70>
 8007686:	6921      	ldr	r1, [r4, #16]
 8007688:	4650      	mov	r0, sl
 800768a:	f000 faa5 	bl	8007bd8 <_free_r>
 800768e:	e7c8      	b.n	8007622 <__ssputs_r+0x46>

08007690 <_svfiprintf_r>:
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	461d      	mov	r5, r3
 8007696:	898b      	ldrh	r3, [r1, #12]
 8007698:	061f      	lsls	r7, r3, #24
 800769a:	b09d      	sub	sp, #116	; 0x74
 800769c:	4680      	mov	r8, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	4616      	mov	r6, r2
 80076a2:	d50f      	bpl.n	80076c4 <_svfiprintf_r+0x34>
 80076a4:	690b      	ldr	r3, [r1, #16]
 80076a6:	b96b      	cbnz	r3, 80076c4 <_svfiprintf_r+0x34>
 80076a8:	2140      	movs	r1, #64	; 0x40
 80076aa:	f000 fae3 	bl	8007c74 <_malloc_r>
 80076ae:	6020      	str	r0, [r4, #0]
 80076b0:	6120      	str	r0, [r4, #16]
 80076b2:	b928      	cbnz	r0, 80076c0 <_svfiprintf_r+0x30>
 80076b4:	230c      	movs	r3, #12
 80076b6:	f8c8 3000 	str.w	r3, [r8]
 80076ba:	f04f 30ff 	mov.w	r0, #4294967295
 80076be:	e0c8      	b.n	8007852 <_svfiprintf_r+0x1c2>
 80076c0:	2340      	movs	r3, #64	; 0x40
 80076c2:	6163      	str	r3, [r4, #20]
 80076c4:	2300      	movs	r3, #0
 80076c6:	9309      	str	r3, [sp, #36]	; 0x24
 80076c8:	2320      	movs	r3, #32
 80076ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ce:	2330      	movs	r3, #48	; 0x30
 80076d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076d4:	9503      	str	r5, [sp, #12]
 80076d6:	f04f 0b01 	mov.w	fp, #1
 80076da:	4637      	mov	r7, r6
 80076dc:	463d      	mov	r5, r7
 80076de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076e2:	b10b      	cbz	r3, 80076e8 <_svfiprintf_r+0x58>
 80076e4:	2b25      	cmp	r3, #37	; 0x25
 80076e6:	d13e      	bne.n	8007766 <_svfiprintf_r+0xd6>
 80076e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80076ec:	d00b      	beq.n	8007706 <_svfiprintf_r+0x76>
 80076ee:	4653      	mov	r3, sl
 80076f0:	4632      	mov	r2, r6
 80076f2:	4621      	mov	r1, r4
 80076f4:	4640      	mov	r0, r8
 80076f6:	f7ff ff71 	bl	80075dc <__ssputs_r>
 80076fa:	3001      	adds	r0, #1
 80076fc:	f000 80a4 	beq.w	8007848 <_svfiprintf_r+0x1b8>
 8007700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007702:	4453      	add	r3, sl
 8007704:	9309      	str	r3, [sp, #36]	; 0x24
 8007706:	783b      	ldrb	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 809d 	beq.w	8007848 <_svfiprintf_r+0x1b8>
 800770e:	2300      	movs	r3, #0
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	9307      	str	r3, [sp, #28]
 800771c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007720:	931a      	str	r3, [sp, #104]	; 0x68
 8007722:	462f      	mov	r7, r5
 8007724:	2205      	movs	r2, #5
 8007726:	f817 1b01 	ldrb.w	r1, [r7], #1
 800772a:	4850      	ldr	r0, [pc, #320]	; (800786c <_svfiprintf_r+0x1dc>)
 800772c:	f7f8 fd88 	bl	8000240 <memchr>
 8007730:	9b04      	ldr	r3, [sp, #16]
 8007732:	b9d0      	cbnz	r0, 800776a <_svfiprintf_r+0xda>
 8007734:	06d9      	lsls	r1, r3, #27
 8007736:	bf44      	itt	mi
 8007738:	2220      	movmi	r2, #32
 800773a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800773e:	071a      	lsls	r2, r3, #28
 8007740:	bf44      	itt	mi
 8007742:	222b      	movmi	r2, #43	; 0x2b
 8007744:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007748:	782a      	ldrb	r2, [r5, #0]
 800774a:	2a2a      	cmp	r2, #42	; 0x2a
 800774c:	d015      	beq.n	800777a <_svfiprintf_r+0xea>
 800774e:	9a07      	ldr	r2, [sp, #28]
 8007750:	462f      	mov	r7, r5
 8007752:	2000      	movs	r0, #0
 8007754:	250a      	movs	r5, #10
 8007756:	4639      	mov	r1, r7
 8007758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800775c:	3b30      	subs	r3, #48	; 0x30
 800775e:	2b09      	cmp	r3, #9
 8007760:	d94d      	bls.n	80077fe <_svfiprintf_r+0x16e>
 8007762:	b1b8      	cbz	r0, 8007794 <_svfiprintf_r+0x104>
 8007764:	e00f      	b.n	8007786 <_svfiprintf_r+0xf6>
 8007766:	462f      	mov	r7, r5
 8007768:	e7b8      	b.n	80076dc <_svfiprintf_r+0x4c>
 800776a:	4a40      	ldr	r2, [pc, #256]	; (800786c <_svfiprintf_r+0x1dc>)
 800776c:	1a80      	subs	r0, r0, r2
 800776e:	fa0b f000 	lsl.w	r0, fp, r0
 8007772:	4318      	orrs	r0, r3
 8007774:	9004      	str	r0, [sp, #16]
 8007776:	463d      	mov	r5, r7
 8007778:	e7d3      	b.n	8007722 <_svfiprintf_r+0x92>
 800777a:	9a03      	ldr	r2, [sp, #12]
 800777c:	1d11      	adds	r1, r2, #4
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	9103      	str	r1, [sp, #12]
 8007782:	2a00      	cmp	r2, #0
 8007784:	db01      	blt.n	800778a <_svfiprintf_r+0xfa>
 8007786:	9207      	str	r2, [sp, #28]
 8007788:	e004      	b.n	8007794 <_svfiprintf_r+0x104>
 800778a:	4252      	negs	r2, r2
 800778c:	f043 0302 	orr.w	r3, r3, #2
 8007790:	9207      	str	r2, [sp, #28]
 8007792:	9304      	str	r3, [sp, #16]
 8007794:	783b      	ldrb	r3, [r7, #0]
 8007796:	2b2e      	cmp	r3, #46	; 0x2e
 8007798:	d10c      	bne.n	80077b4 <_svfiprintf_r+0x124>
 800779a:	787b      	ldrb	r3, [r7, #1]
 800779c:	2b2a      	cmp	r3, #42	; 0x2a
 800779e:	d133      	bne.n	8007808 <_svfiprintf_r+0x178>
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	9203      	str	r2, [sp, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bfb8      	it	lt
 80077ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80077b0:	3702      	adds	r7, #2
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	4d2e      	ldr	r5, [pc, #184]	; (8007870 <_svfiprintf_r+0x1e0>)
 80077b6:	7839      	ldrb	r1, [r7, #0]
 80077b8:	2203      	movs	r2, #3
 80077ba:	4628      	mov	r0, r5
 80077bc:	f7f8 fd40 	bl	8000240 <memchr>
 80077c0:	b138      	cbz	r0, 80077d2 <_svfiprintf_r+0x142>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	1b40      	subs	r0, r0, r5
 80077c6:	fa03 f000 	lsl.w	r0, r3, r0
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	4303      	orrs	r3, r0
 80077ce:	3701      	adds	r7, #1
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	7839      	ldrb	r1, [r7, #0]
 80077d4:	4827      	ldr	r0, [pc, #156]	; (8007874 <_svfiprintf_r+0x1e4>)
 80077d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077da:	2206      	movs	r2, #6
 80077dc:	1c7e      	adds	r6, r7, #1
 80077de:	f7f8 fd2f 	bl	8000240 <memchr>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d038      	beq.n	8007858 <_svfiprintf_r+0x1c8>
 80077e6:	4b24      	ldr	r3, [pc, #144]	; (8007878 <_svfiprintf_r+0x1e8>)
 80077e8:	bb13      	cbnz	r3, 8007830 <_svfiprintf_r+0x1a0>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	3307      	adds	r3, #7
 80077ee:	f023 0307 	bic.w	r3, r3, #7
 80077f2:	3308      	adds	r3, #8
 80077f4:	9303      	str	r3, [sp, #12]
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	444b      	add	r3, r9
 80077fa:	9309      	str	r3, [sp, #36]	; 0x24
 80077fc:	e76d      	b.n	80076da <_svfiprintf_r+0x4a>
 80077fe:	fb05 3202 	mla	r2, r5, r2, r3
 8007802:	2001      	movs	r0, #1
 8007804:	460f      	mov	r7, r1
 8007806:	e7a6      	b.n	8007756 <_svfiprintf_r+0xc6>
 8007808:	2300      	movs	r3, #0
 800780a:	3701      	adds	r7, #1
 800780c:	9305      	str	r3, [sp, #20]
 800780e:	4619      	mov	r1, r3
 8007810:	250a      	movs	r5, #10
 8007812:	4638      	mov	r0, r7
 8007814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007818:	3a30      	subs	r2, #48	; 0x30
 800781a:	2a09      	cmp	r2, #9
 800781c:	d903      	bls.n	8007826 <_svfiprintf_r+0x196>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0c8      	beq.n	80077b4 <_svfiprintf_r+0x124>
 8007822:	9105      	str	r1, [sp, #20]
 8007824:	e7c6      	b.n	80077b4 <_svfiprintf_r+0x124>
 8007826:	fb05 2101 	mla	r1, r5, r1, r2
 800782a:	2301      	movs	r3, #1
 800782c:	4607      	mov	r7, r0
 800782e:	e7f0      	b.n	8007812 <_svfiprintf_r+0x182>
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	4622      	mov	r2, r4
 8007836:	4b11      	ldr	r3, [pc, #68]	; (800787c <_svfiprintf_r+0x1ec>)
 8007838:	a904      	add	r1, sp, #16
 800783a:	4640      	mov	r0, r8
 800783c:	f3af 8000 	nop.w
 8007840:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007844:	4681      	mov	r9, r0
 8007846:	d1d6      	bne.n	80077f6 <_svfiprintf_r+0x166>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	065b      	lsls	r3, r3, #25
 800784c:	f53f af35 	bmi.w	80076ba <_svfiprintf_r+0x2a>
 8007850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007852:	b01d      	add	sp, #116	; 0x74
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007858:	ab03      	add	r3, sp, #12
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	4622      	mov	r2, r4
 800785e:	4b07      	ldr	r3, [pc, #28]	; (800787c <_svfiprintf_r+0x1ec>)
 8007860:	a904      	add	r1, sp, #16
 8007862:	4640      	mov	r0, r8
 8007864:	f000 f882 	bl	800796c <_printf_i>
 8007868:	e7ea      	b.n	8007840 <_svfiprintf_r+0x1b0>
 800786a:	bf00      	nop
 800786c:	08009f54 	.word	0x08009f54
 8007870:	08009f5a 	.word	0x08009f5a
 8007874:	08009f5e 	.word	0x08009f5e
 8007878:	00000000 	.word	0x00000000
 800787c:	080075dd 	.word	0x080075dd

08007880 <_printf_common>:
 8007880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007884:	4691      	mov	r9, r2
 8007886:	461f      	mov	r7, r3
 8007888:	688a      	ldr	r2, [r1, #8]
 800788a:	690b      	ldr	r3, [r1, #16]
 800788c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007890:	4293      	cmp	r3, r2
 8007892:	bfb8      	it	lt
 8007894:	4613      	movlt	r3, r2
 8007896:	f8c9 3000 	str.w	r3, [r9]
 800789a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800789e:	4606      	mov	r6, r0
 80078a0:	460c      	mov	r4, r1
 80078a2:	b112      	cbz	r2, 80078aa <_printf_common+0x2a>
 80078a4:	3301      	adds	r3, #1
 80078a6:	f8c9 3000 	str.w	r3, [r9]
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	0699      	lsls	r1, r3, #26
 80078ae:	bf42      	ittt	mi
 80078b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078b4:	3302      	addmi	r3, #2
 80078b6:	f8c9 3000 	strmi.w	r3, [r9]
 80078ba:	6825      	ldr	r5, [r4, #0]
 80078bc:	f015 0506 	ands.w	r5, r5, #6
 80078c0:	d107      	bne.n	80078d2 <_printf_common+0x52>
 80078c2:	f104 0a19 	add.w	sl, r4, #25
 80078c6:	68e3      	ldr	r3, [r4, #12]
 80078c8:	f8d9 2000 	ldr.w	r2, [r9]
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	42ab      	cmp	r3, r5
 80078d0:	dc28      	bgt.n	8007924 <_printf_common+0xa4>
 80078d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	3300      	adds	r3, #0
 80078da:	bf18      	it	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	0692      	lsls	r2, r2, #26
 80078e0:	d42d      	bmi.n	800793e <_printf_common+0xbe>
 80078e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078e6:	4639      	mov	r1, r7
 80078e8:	4630      	mov	r0, r6
 80078ea:	47c0      	blx	r8
 80078ec:	3001      	adds	r0, #1
 80078ee:	d020      	beq.n	8007932 <_printf_common+0xb2>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	68e5      	ldr	r5, [r4, #12]
 80078f4:	f8d9 2000 	ldr.w	r2, [r9]
 80078f8:	f003 0306 	and.w	r3, r3, #6
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	bf08      	it	eq
 8007900:	1aad      	subeq	r5, r5, r2
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	6922      	ldr	r2, [r4, #16]
 8007906:	bf0c      	ite	eq
 8007908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800790c:	2500      	movne	r5, #0
 800790e:	4293      	cmp	r3, r2
 8007910:	bfc4      	itt	gt
 8007912:	1a9b      	subgt	r3, r3, r2
 8007914:	18ed      	addgt	r5, r5, r3
 8007916:	f04f 0900 	mov.w	r9, #0
 800791a:	341a      	adds	r4, #26
 800791c:	454d      	cmp	r5, r9
 800791e:	d11a      	bne.n	8007956 <_printf_common+0xd6>
 8007920:	2000      	movs	r0, #0
 8007922:	e008      	b.n	8007936 <_printf_common+0xb6>
 8007924:	2301      	movs	r3, #1
 8007926:	4652      	mov	r2, sl
 8007928:	4639      	mov	r1, r7
 800792a:	4630      	mov	r0, r6
 800792c:	47c0      	blx	r8
 800792e:	3001      	adds	r0, #1
 8007930:	d103      	bne.n	800793a <_printf_common+0xba>
 8007932:	f04f 30ff 	mov.w	r0, #4294967295
 8007936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793a:	3501      	adds	r5, #1
 800793c:	e7c3      	b.n	80078c6 <_printf_common+0x46>
 800793e:	18e1      	adds	r1, r4, r3
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	2030      	movs	r0, #48	; 0x30
 8007944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007948:	4422      	add	r2, r4
 800794a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800794e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007952:	3302      	adds	r3, #2
 8007954:	e7c5      	b.n	80078e2 <_printf_common+0x62>
 8007956:	2301      	movs	r3, #1
 8007958:	4622      	mov	r2, r4
 800795a:	4639      	mov	r1, r7
 800795c:	4630      	mov	r0, r6
 800795e:	47c0      	blx	r8
 8007960:	3001      	adds	r0, #1
 8007962:	d0e6      	beq.n	8007932 <_printf_common+0xb2>
 8007964:	f109 0901 	add.w	r9, r9, #1
 8007968:	e7d8      	b.n	800791c <_printf_common+0x9c>
	...

0800796c <_printf_i>:
 800796c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007970:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007974:	460c      	mov	r4, r1
 8007976:	7e09      	ldrb	r1, [r1, #24]
 8007978:	b085      	sub	sp, #20
 800797a:	296e      	cmp	r1, #110	; 0x6e
 800797c:	4617      	mov	r7, r2
 800797e:	4606      	mov	r6, r0
 8007980:	4698      	mov	r8, r3
 8007982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007984:	f000 80b3 	beq.w	8007aee <_printf_i+0x182>
 8007988:	d822      	bhi.n	80079d0 <_printf_i+0x64>
 800798a:	2963      	cmp	r1, #99	; 0x63
 800798c:	d036      	beq.n	80079fc <_printf_i+0x90>
 800798e:	d80a      	bhi.n	80079a6 <_printf_i+0x3a>
 8007990:	2900      	cmp	r1, #0
 8007992:	f000 80b9 	beq.w	8007b08 <_printf_i+0x19c>
 8007996:	2958      	cmp	r1, #88	; 0x58
 8007998:	f000 8083 	beq.w	8007aa2 <_printf_i+0x136>
 800799c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80079a4:	e032      	b.n	8007a0c <_printf_i+0xa0>
 80079a6:	2964      	cmp	r1, #100	; 0x64
 80079a8:	d001      	beq.n	80079ae <_printf_i+0x42>
 80079aa:	2969      	cmp	r1, #105	; 0x69
 80079ac:	d1f6      	bne.n	800799c <_printf_i+0x30>
 80079ae:	6820      	ldr	r0, [r4, #0]
 80079b0:	6813      	ldr	r3, [r2, #0]
 80079b2:	0605      	lsls	r5, r0, #24
 80079b4:	f103 0104 	add.w	r1, r3, #4
 80079b8:	d52a      	bpl.n	8007a10 <_printf_i+0xa4>
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6011      	str	r1, [r2, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da03      	bge.n	80079ca <_printf_i+0x5e>
 80079c2:	222d      	movs	r2, #45	; 0x2d
 80079c4:	425b      	negs	r3, r3
 80079c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80079ca:	486f      	ldr	r0, [pc, #444]	; (8007b88 <_printf_i+0x21c>)
 80079cc:	220a      	movs	r2, #10
 80079ce:	e039      	b.n	8007a44 <_printf_i+0xd8>
 80079d0:	2973      	cmp	r1, #115	; 0x73
 80079d2:	f000 809d 	beq.w	8007b10 <_printf_i+0x1a4>
 80079d6:	d808      	bhi.n	80079ea <_printf_i+0x7e>
 80079d8:	296f      	cmp	r1, #111	; 0x6f
 80079da:	d020      	beq.n	8007a1e <_printf_i+0xb2>
 80079dc:	2970      	cmp	r1, #112	; 0x70
 80079de:	d1dd      	bne.n	800799c <_printf_i+0x30>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	f043 0320 	orr.w	r3, r3, #32
 80079e6:	6023      	str	r3, [r4, #0]
 80079e8:	e003      	b.n	80079f2 <_printf_i+0x86>
 80079ea:	2975      	cmp	r1, #117	; 0x75
 80079ec:	d017      	beq.n	8007a1e <_printf_i+0xb2>
 80079ee:	2978      	cmp	r1, #120	; 0x78
 80079f0:	d1d4      	bne.n	800799c <_printf_i+0x30>
 80079f2:	2378      	movs	r3, #120	; 0x78
 80079f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079f8:	4864      	ldr	r0, [pc, #400]	; (8007b8c <_printf_i+0x220>)
 80079fa:	e055      	b.n	8007aa8 <_printf_i+0x13c>
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	1d19      	adds	r1, r3, #4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6011      	str	r1, [r2, #0]
 8007a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e08c      	b.n	8007b2a <_printf_i+0x1be>
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6011      	str	r1, [r2, #0]
 8007a14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a18:	bf18      	it	ne
 8007a1a:	b21b      	sxthne	r3, r3
 8007a1c:	e7cf      	b.n	80079be <_printf_i+0x52>
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	6825      	ldr	r5, [r4, #0]
 8007a22:	1d18      	adds	r0, r3, #4
 8007a24:	6010      	str	r0, [r2, #0]
 8007a26:	0628      	lsls	r0, r5, #24
 8007a28:	d501      	bpl.n	8007a2e <_printf_i+0xc2>
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	e002      	b.n	8007a34 <_printf_i+0xc8>
 8007a2e:	0668      	lsls	r0, r5, #25
 8007a30:	d5fb      	bpl.n	8007a2a <_printf_i+0xbe>
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	4854      	ldr	r0, [pc, #336]	; (8007b88 <_printf_i+0x21c>)
 8007a36:	296f      	cmp	r1, #111	; 0x6f
 8007a38:	bf14      	ite	ne
 8007a3a:	220a      	movne	r2, #10
 8007a3c:	2208      	moveq	r2, #8
 8007a3e:	2100      	movs	r1, #0
 8007a40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a44:	6865      	ldr	r5, [r4, #4]
 8007a46:	60a5      	str	r5, [r4, #8]
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	f2c0 8095 	blt.w	8007b78 <_printf_i+0x20c>
 8007a4e:	6821      	ldr	r1, [r4, #0]
 8007a50:	f021 0104 	bic.w	r1, r1, #4
 8007a54:	6021      	str	r1, [r4, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d13d      	bne.n	8007ad6 <_printf_i+0x16a>
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	f040 808e 	bne.w	8007b7c <_printf_i+0x210>
 8007a60:	4665      	mov	r5, ip
 8007a62:	2a08      	cmp	r2, #8
 8007a64:	d10b      	bne.n	8007a7e <_printf_i+0x112>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	07db      	lsls	r3, r3, #31
 8007a6a:	d508      	bpl.n	8007a7e <_printf_i+0x112>
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	6862      	ldr	r2, [r4, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	bfde      	ittt	le
 8007a74:	2330      	movle	r3, #48	; 0x30
 8007a76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a7e:	ebac 0305 	sub.w	r3, ip, r5
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	f8cd 8000 	str.w	r8, [sp]
 8007a88:	463b      	mov	r3, r7
 8007a8a:	aa03      	add	r2, sp, #12
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7ff fef6 	bl	8007880 <_printf_common>
 8007a94:	3001      	adds	r0, #1
 8007a96:	d14d      	bne.n	8007b34 <_printf_i+0x1c8>
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9c:	b005      	add	sp, #20
 8007a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aa2:	4839      	ldr	r0, [pc, #228]	; (8007b88 <_printf_i+0x21c>)
 8007aa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007aa8:	6813      	ldr	r3, [r2, #0]
 8007aaa:	6821      	ldr	r1, [r4, #0]
 8007aac:	1d1d      	adds	r5, r3, #4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6015      	str	r5, [r2, #0]
 8007ab2:	060a      	lsls	r2, r1, #24
 8007ab4:	d50b      	bpl.n	8007ace <_printf_i+0x162>
 8007ab6:	07ca      	lsls	r2, r1, #31
 8007ab8:	bf44      	itt	mi
 8007aba:	f041 0120 	orrmi.w	r1, r1, #32
 8007abe:	6021      	strmi	r1, [r4, #0]
 8007ac0:	b91b      	cbnz	r3, 8007aca <_printf_i+0x15e>
 8007ac2:	6822      	ldr	r2, [r4, #0]
 8007ac4:	f022 0220 	bic.w	r2, r2, #32
 8007ac8:	6022      	str	r2, [r4, #0]
 8007aca:	2210      	movs	r2, #16
 8007acc:	e7b7      	b.n	8007a3e <_printf_i+0xd2>
 8007ace:	064d      	lsls	r5, r1, #25
 8007ad0:	bf48      	it	mi
 8007ad2:	b29b      	uxthmi	r3, r3
 8007ad4:	e7ef      	b.n	8007ab6 <_printf_i+0x14a>
 8007ad6:	4665      	mov	r5, ip
 8007ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007adc:	fb02 3311 	mls	r3, r2, r1, r3
 8007ae0:	5cc3      	ldrb	r3, [r0, r3]
 8007ae2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	d1f5      	bne.n	8007ad8 <_printf_i+0x16c>
 8007aec:	e7b9      	b.n	8007a62 <_printf_i+0xf6>
 8007aee:	6813      	ldr	r3, [r2, #0]
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	6961      	ldr	r1, [r4, #20]
 8007af4:	1d18      	adds	r0, r3, #4
 8007af6:	6010      	str	r0, [r2, #0]
 8007af8:	0628      	lsls	r0, r5, #24
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	d501      	bpl.n	8007b02 <_printf_i+0x196>
 8007afe:	6019      	str	r1, [r3, #0]
 8007b00:	e002      	b.n	8007b08 <_printf_i+0x19c>
 8007b02:	066a      	lsls	r2, r5, #25
 8007b04:	d5fb      	bpl.n	8007afe <_printf_i+0x192>
 8007b06:	8019      	strh	r1, [r3, #0]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	4665      	mov	r5, ip
 8007b0e:	e7b9      	b.n	8007a84 <_printf_i+0x118>
 8007b10:	6813      	ldr	r3, [r2, #0]
 8007b12:	1d19      	adds	r1, r3, #4
 8007b14:	6011      	str	r1, [r2, #0]
 8007b16:	681d      	ldr	r5, [r3, #0]
 8007b18:	6862      	ldr	r2, [r4, #4]
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f7f8 fb8f 	bl	8000240 <memchr>
 8007b22:	b108      	cbz	r0, 8007b28 <_printf_i+0x1bc>
 8007b24:	1b40      	subs	r0, r0, r5
 8007b26:	6060      	str	r0, [r4, #4]
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b32:	e7a7      	b.n	8007a84 <_printf_i+0x118>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	462a      	mov	r2, r5
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	47c0      	blx	r8
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d0aa      	beq.n	8007a98 <_printf_i+0x12c>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	079b      	lsls	r3, r3, #30
 8007b46:	d413      	bmi.n	8007b70 <_printf_i+0x204>
 8007b48:	68e0      	ldr	r0, [r4, #12]
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	4298      	cmp	r0, r3
 8007b4e:	bfb8      	it	lt
 8007b50:	4618      	movlt	r0, r3
 8007b52:	e7a3      	b.n	8007a9c <_printf_i+0x130>
 8007b54:	2301      	movs	r3, #1
 8007b56:	464a      	mov	r2, r9
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d09a      	beq.n	8007a98 <_printf_i+0x12c>
 8007b62:	3501      	adds	r5, #1
 8007b64:	68e3      	ldr	r3, [r4, #12]
 8007b66:	9a03      	ldr	r2, [sp, #12]
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	42ab      	cmp	r3, r5
 8007b6c:	dcf2      	bgt.n	8007b54 <_printf_i+0x1e8>
 8007b6e:	e7eb      	b.n	8007b48 <_printf_i+0x1dc>
 8007b70:	2500      	movs	r5, #0
 8007b72:	f104 0919 	add.w	r9, r4, #25
 8007b76:	e7f5      	b.n	8007b64 <_printf_i+0x1f8>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1ac      	bne.n	8007ad6 <_printf_i+0x16a>
 8007b7c:	7803      	ldrb	r3, [r0, #0]
 8007b7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b86:	e76c      	b.n	8007a62 <_printf_i+0xf6>
 8007b88:	08009f65 	.word	0x08009f65
 8007b8c:	08009f76 	.word	0x08009f76

08007b90 <memcpy>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	1e43      	subs	r3, r0, #1
 8007b94:	440a      	add	r2, r1
 8007b96:	4291      	cmp	r1, r2
 8007b98:	d100      	bne.n	8007b9c <memcpy+0xc>
 8007b9a:	bd10      	pop	{r4, pc}
 8007b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ba4:	e7f7      	b.n	8007b96 <memcpy+0x6>

08007ba6 <memmove>:
 8007ba6:	4288      	cmp	r0, r1
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	eb01 0302 	add.w	r3, r1, r2
 8007bae:	d807      	bhi.n	8007bc0 <memmove+0x1a>
 8007bb0:	1e42      	subs	r2, r0, #1
 8007bb2:	4299      	cmp	r1, r3
 8007bb4:	d00a      	beq.n	8007bcc <memmove+0x26>
 8007bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007bbe:	e7f8      	b.n	8007bb2 <memmove+0xc>
 8007bc0:	4283      	cmp	r3, r0
 8007bc2:	d9f5      	bls.n	8007bb0 <memmove+0xa>
 8007bc4:	1881      	adds	r1, r0, r2
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	42d3      	cmn	r3, r2
 8007bca:	d100      	bne.n	8007bce <memmove+0x28>
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bd2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007bd6:	e7f7      	b.n	8007bc8 <memmove+0x22>

08007bd8 <_free_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4605      	mov	r5, r0
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d045      	beq.n	8007c6c <_free_r+0x94>
 8007be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be4:	1f0c      	subs	r4, r1, #4
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bfb8      	it	lt
 8007bea:	18e4      	addlt	r4, r4, r3
 8007bec:	f000 f8d2 	bl	8007d94 <__malloc_lock>
 8007bf0:	4a1f      	ldr	r2, [pc, #124]	; (8007c70 <_free_r+0x98>)
 8007bf2:	6813      	ldr	r3, [r2, #0]
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	b933      	cbnz	r3, 8007c06 <_free_r+0x2e>
 8007bf8:	6063      	str	r3, [r4, #4]
 8007bfa:	6014      	str	r4, [r2, #0]
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c02:	f000 b8c8 	b.w	8007d96 <__malloc_unlock>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	d90c      	bls.n	8007c24 <_free_r+0x4c>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	1862      	adds	r2, r4, r1
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	bf04      	itt	eq
 8007c12:	681a      	ldreq	r2, [r3, #0]
 8007c14:	685b      	ldreq	r3, [r3, #4]
 8007c16:	6063      	str	r3, [r4, #4]
 8007c18:	bf04      	itt	eq
 8007c1a:	1852      	addeq	r2, r2, r1
 8007c1c:	6022      	streq	r2, [r4, #0]
 8007c1e:	6004      	str	r4, [r0, #0]
 8007c20:	e7ec      	b.n	8007bfc <_free_r+0x24>
 8007c22:	4613      	mov	r3, r2
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	b10a      	cbz	r2, 8007c2c <_free_r+0x54>
 8007c28:	42a2      	cmp	r2, r4
 8007c2a:	d9fa      	bls.n	8007c22 <_free_r+0x4a>
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	1858      	adds	r0, r3, r1
 8007c30:	42a0      	cmp	r0, r4
 8007c32:	d10b      	bne.n	8007c4c <_free_r+0x74>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	4401      	add	r1, r0
 8007c38:	1858      	adds	r0, r3, r1
 8007c3a:	4282      	cmp	r2, r0
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	d1dd      	bne.n	8007bfc <_free_r+0x24>
 8007c40:	6810      	ldr	r0, [r2, #0]
 8007c42:	6852      	ldr	r2, [r2, #4]
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	4401      	add	r1, r0
 8007c48:	6019      	str	r1, [r3, #0]
 8007c4a:	e7d7      	b.n	8007bfc <_free_r+0x24>
 8007c4c:	d902      	bls.n	8007c54 <_free_r+0x7c>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	e7d3      	b.n	8007bfc <_free_r+0x24>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	1821      	adds	r1, r4, r0
 8007c58:	428a      	cmp	r2, r1
 8007c5a:	bf04      	itt	eq
 8007c5c:	6811      	ldreq	r1, [r2, #0]
 8007c5e:	6852      	ldreq	r2, [r2, #4]
 8007c60:	6062      	str	r2, [r4, #4]
 8007c62:	bf04      	itt	eq
 8007c64:	1809      	addeq	r1, r1, r0
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	605c      	str	r4, [r3, #4]
 8007c6a:	e7c7      	b.n	8007bfc <_free_r+0x24>
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000270 	.word	0x20000270

08007c74 <_malloc_r>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	1ccd      	adds	r5, r1, #3
 8007c78:	f025 0503 	bic.w	r5, r5, #3
 8007c7c:	3508      	adds	r5, #8
 8007c7e:	2d0c      	cmp	r5, #12
 8007c80:	bf38      	it	cc
 8007c82:	250c      	movcc	r5, #12
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	4606      	mov	r6, r0
 8007c88:	db01      	blt.n	8007c8e <_malloc_r+0x1a>
 8007c8a:	42a9      	cmp	r1, r5
 8007c8c:	d903      	bls.n	8007c96 <_malloc_r+0x22>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	6033      	str	r3, [r6, #0]
 8007c92:	2000      	movs	r0, #0
 8007c94:	bd70      	pop	{r4, r5, r6, pc}
 8007c96:	f000 f87d 	bl	8007d94 <__malloc_lock>
 8007c9a:	4a21      	ldr	r2, [pc, #132]	; (8007d20 <_malloc_r+0xac>)
 8007c9c:	6814      	ldr	r4, [r2, #0]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	b991      	cbnz	r1, 8007cc8 <_malloc_r+0x54>
 8007ca2:	4c20      	ldr	r4, [pc, #128]	; (8007d24 <_malloc_r+0xb0>)
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	b91b      	cbnz	r3, 8007cb0 <_malloc_r+0x3c>
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f000 f863 	bl	8007d74 <_sbrk_r>
 8007cae:	6020      	str	r0, [r4, #0]
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f000 f85e 	bl	8007d74 <_sbrk_r>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d124      	bne.n	8007d06 <_malloc_r+0x92>
 8007cbc:	230c      	movs	r3, #12
 8007cbe:	6033      	str	r3, [r6, #0]
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f000 f868 	bl	8007d96 <__malloc_unlock>
 8007cc6:	e7e4      	b.n	8007c92 <_malloc_r+0x1e>
 8007cc8:	680b      	ldr	r3, [r1, #0]
 8007cca:	1b5b      	subs	r3, r3, r5
 8007ccc:	d418      	bmi.n	8007d00 <_malloc_r+0x8c>
 8007cce:	2b0b      	cmp	r3, #11
 8007cd0:	d90f      	bls.n	8007cf2 <_malloc_r+0x7e>
 8007cd2:	600b      	str	r3, [r1, #0]
 8007cd4:	50cd      	str	r5, [r1, r3]
 8007cd6:	18cc      	adds	r4, r1, r3
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f000 f85c 	bl	8007d96 <__malloc_unlock>
 8007cde:	f104 000b 	add.w	r0, r4, #11
 8007ce2:	1d23      	adds	r3, r4, #4
 8007ce4:	f020 0007 	bic.w	r0, r0, #7
 8007ce8:	1ac3      	subs	r3, r0, r3
 8007cea:	d0d3      	beq.n	8007c94 <_malloc_r+0x20>
 8007cec:	425a      	negs	r2, r3
 8007cee:	50e2      	str	r2, [r4, r3]
 8007cf0:	e7d0      	b.n	8007c94 <_malloc_r+0x20>
 8007cf2:	428c      	cmp	r4, r1
 8007cf4:	684b      	ldr	r3, [r1, #4]
 8007cf6:	bf16      	itet	ne
 8007cf8:	6063      	strne	r3, [r4, #4]
 8007cfa:	6013      	streq	r3, [r2, #0]
 8007cfc:	460c      	movne	r4, r1
 8007cfe:	e7eb      	b.n	8007cd8 <_malloc_r+0x64>
 8007d00:	460c      	mov	r4, r1
 8007d02:	6849      	ldr	r1, [r1, #4]
 8007d04:	e7cc      	b.n	8007ca0 <_malloc_r+0x2c>
 8007d06:	1cc4      	adds	r4, r0, #3
 8007d08:	f024 0403 	bic.w	r4, r4, #3
 8007d0c:	42a0      	cmp	r0, r4
 8007d0e:	d005      	beq.n	8007d1c <_malloc_r+0xa8>
 8007d10:	1a21      	subs	r1, r4, r0
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 f82e 	bl	8007d74 <_sbrk_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d0cf      	beq.n	8007cbc <_malloc_r+0x48>
 8007d1c:	6025      	str	r5, [r4, #0]
 8007d1e:	e7db      	b.n	8007cd8 <_malloc_r+0x64>
 8007d20:	20000270 	.word	0x20000270
 8007d24:	20000274 	.word	0x20000274

08007d28 <_realloc_r>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	460e      	mov	r6, r1
 8007d30:	b921      	cbnz	r1, 8007d3c <_realloc_r+0x14>
 8007d32:	4611      	mov	r1, r2
 8007d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d38:	f7ff bf9c 	b.w	8007c74 <_malloc_r>
 8007d3c:	b922      	cbnz	r2, 8007d48 <_realloc_r+0x20>
 8007d3e:	f7ff ff4b 	bl	8007bd8 <_free_r>
 8007d42:	4625      	mov	r5, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d48:	f000 f826 	bl	8007d98 <_malloc_usable_size_r>
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d20f      	bcs.n	8007d70 <_realloc_r+0x48>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4638      	mov	r0, r7
 8007d54:	f7ff ff8e 	bl	8007c74 <_malloc_r>
 8007d58:	4605      	mov	r5, r0
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0f2      	beq.n	8007d44 <_realloc_r+0x1c>
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4622      	mov	r2, r4
 8007d62:	f7ff ff15 	bl	8007b90 <memcpy>
 8007d66:	4631      	mov	r1, r6
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7ff ff35 	bl	8007bd8 <_free_r>
 8007d6e:	e7e9      	b.n	8007d44 <_realloc_r+0x1c>
 8007d70:	4635      	mov	r5, r6
 8007d72:	e7e7      	b.n	8007d44 <_realloc_r+0x1c>

08007d74 <_sbrk_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4c06      	ldr	r4, [pc, #24]	; (8007d90 <_sbrk_r+0x1c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	6023      	str	r3, [r4, #0]
 8007d80:	f7ff fb4e 	bl	8007420 <_sbrk>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_sbrk_r+0x1a>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_sbrk_r+0x1a>
 8007d8c:	602b      	str	r3, [r5, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	2000060c 	.word	0x2000060c

08007d94 <__malloc_lock>:
 8007d94:	4770      	bx	lr

08007d96 <__malloc_unlock>:
 8007d96:	4770      	bx	lr

08007d98 <_malloc_usable_size_r>:
 8007d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9c:	1f18      	subs	r0, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfbc      	itt	lt
 8007da2:	580b      	ldrlt	r3, [r1, r0]
 8007da4:	18c0      	addlt	r0, r0, r3
 8007da6:	4770      	bx	lr

08007da8 <_init>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr

08007db4 <_fini>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	bf00      	nop
 8007db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dba:	bc08      	pop	{r3}
 8007dbc:	469e      	mov	lr, r3
 8007dbe:	4770      	bx	lr

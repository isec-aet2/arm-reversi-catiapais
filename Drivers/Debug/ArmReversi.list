
ArmReversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b320  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002274  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d78c  0800d78c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800d78c  0800d78c  0001d78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d794  0800d794  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d794  0800d794  0001d794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d798  0800d798  0001d798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800d79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f40  20000060  0800d7fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa0  0800d7fc  00020fa0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002546c  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044d7  00000000  00000000  000454fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d88  00000000  00000000  000499d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b60  00000000  00000000  0004b760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031311  00000000  00000000  0004d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019394  00000000  00000000  0007e5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00129014  00000000  00000000  00097965  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c0979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c68  00000000  00000000  001c09f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000060 	.word	0x20000060
 8000214:	00000000 	.word	0x00000000
 8000218:	0800b500 	.word	0x0800b500

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000064 	.word	0x20000064
 8000234:	0800b500 	.word	0x0800b500

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f90d 	bl	8000764 <ft6x06_GetInstance>
 800054a:	4603      	mov	r3, r0
 800054c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	2bff      	cmp	r3, #255	; 0xff
 8000552:	d10e      	bne.n	8000572 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8000554:	2000      	movs	r0, #0
 8000556:	f000 f905 	bl	8000764 <ft6x06_GetInstance>
 800055a:	4603      	mov	r3, r0
 800055c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d806      	bhi.n	8000572 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	88fa      	ldrh	r2, [r7, #6]
 8000568:	b2d1      	uxtb	r1, r2
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <ft6x06_Init+0x44>)
 800056c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800056e:	f000 fd53 	bl	8001018 <TS_IO_Init>
    }
  }
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000007c 	.word	0x2000007c

08000580 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80005a0:	f000 fd3a 	bl	8001018 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	21a8      	movs	r1, #168	; 0xa8
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fd58 	bl	8001060 <TS_IO_Read>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29b      	uxth	r3, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f8bc 	bl	8000746 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f88d 	bl	80006f0 <ft6x06_TS_DisableIT>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2102      	movs	r1, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fd33 	bl	8001060 <TS_IO_Read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b02      	cmp	r3, #2
 8000610:	d901      	bls.n	8000616 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <ft6x06_TS_DetectTouch+0x50>)
 800061c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <ft6x06_TS_DetectTouch+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	b2db      	uxtb	r3, r3
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000080 	.word	0x20000080

08000634 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 8000648:	789a      	ldrb	r2, [r3, #2]
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	429a      	cmp	r2, r3
 8000650:	d234      	bcs.n	80006bc <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <ft6x06_TS_GetXY+0x2c>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d003      	beq.n	8000666 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800065e:	e005      	b.n	800066c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000660:	2303      	movs	r3, #3
 8000662:	75fb      	strb	r3, [r7, #23]
      break;
 8000664:	e002      	b.n	800066c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8000666:	2309      	movs	r3, #9
 8000668:	75fb      	strb	r3, [r7, #23]
      break;
 800066a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	b2d8      	uxtb	r0, r3
 8000670:	f107 0210 	add.w	r2, r7, #16
 8000674:	7df9      	ldrb	r1, [r7, #23]
 8000676:	2304      	movs	r3, #4
 8000678:	f000 fd10 	bl	800109c <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800067c:	7c3b      	ldrb	r3, [r7, #16]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21b      	sxth	r3, r3
 8000682:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000686:	b21a      	sxth	r2, r3
 8000688:	7c7b      	ldrb	r3, [r7, #17]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21b      	sxth	r3, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21b      	sxth	r3, r3
 800069c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	7cfb      	ldrb	r3, [r7, #19]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 80006ba:	709a      	strb	r2, [r3, #2]
  }
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000080 	.word	0x20000080

080006c8 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	7bfa      	ldrb	r2, [r7, #15]
 80006e0:	21a4      	movs	r1, #164	; 0xa4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fca2 	bl	800102c <TS_IO_Write>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	21a4      	movs	r1, #164	; 0xa4
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fc8e 	bl	800102c <TS_IO_Write>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8000754:	68fb      	ldr	r3, [r7, #12]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e00b      	b.n	8000790 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <ft6x06_GetInstance+0x40>)
 800077c:	5cd3      	ldrb	r3, [r2, r3]
 800077e:	b29b      	uxth	r3, r3
 8000780:	88fa      	ldrh	r2, [r7, #6]
 8000782:	429a      	cmp	r2, r3
 8000784:	d101      	bne.n	800078a <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	e006      	b.n	8000798 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3301      	adds	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d9f0      	bls.n	8000778 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000796:	23ff      	movs	r3, #255	; 0xff
}
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	2000007c 	.word	0x2000007c

080007a8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007b2:	49be      	ldr	r1, [pc, #760]	; (8000aac <OTM8009A_Init+0x304>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 fa7d 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80007ba:	49bd      	ldr	r1, [pc, #756]	; (8000ab0 <OTM8009A_Init+0x308>)
 80007bc:	2003      	movs	r0, #3
 80007be:	f001 fa79 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80007c2:	49bc      	ldr	r1, [pc, #752]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 fa75 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80007ca:	49bb      	ldr	r1, [pc, #748]	; (8000ab8 <OTM8009A_Init+0x310>)
 80007cc:	2002      	movs	r0, #2
 80007ce:	f001 fa71 	bl	8001cb4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80007d2:	49b8      	ldr	r1, [pc, #736]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 fa6d 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80007da:	49b8      	ldr	r1, [pc, #736]	; (8000abc <OTM8009A_Init+0x314>)
 80007dc:	2000      	movs	r0, #0
 80007de:	f001 fa69 	bl	8001cb4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fc78 	bl	80010d8 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80007e8:	49b5      	ldr	r1, [pc, #724]	; (8000ac0 <OTM8009A_Init+0x318>)
 80007ea:	2000      	movs	r0, #0
 80007ec:	f001 fa62 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80007f0:	49b4      	ldr	r1, [pc, #720]	; (8000ac4 <OTM8009A_Init+0x31c>)
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 fa5e 	bl	8001cb4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f000 fc6d 	bl	80010d8 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80007fe:	49b2      	ldr	r1, [pc, #712]	; (8000ac8 <OTM8009A_Init+0x320>)
 8000800:	2000      	movs	r0, #0
 8000802:	f001 fa57 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000806:	49b1      	ldr	r1, [pc, #708]	; (8000acc <OTM8009A_Init+0x324>)
 8000808:	2000      	movs	r0, #0
 800080a:	f001 fa53 	bl	8001cb4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800080e:	49b0      	ldr	r1, [pc, #704]	; (8000ad0 <OTM8009A_Init+0x328>)
 8000810:	2000      	movs	r0, #0
 8000812:	f001 fa4f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000816:	49af      	ldr	r1, [pc, #700]	; (8000ad4 <OTM8009A_Init+0x32c>)
 8000818:	2000      	movs	r0, #0
 800081a:	f001 fa4b 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800081e:	49ae      	ldr	r1, [pc, #696]	; (8000ad8 <OTM8009A_Init+0x330>)
 8000820:	2000      	movs	r0, #0
 8000822:	f001 fa47 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000826:	49ad      	ldr	r1, [pc, #692]	; (8000adc <OTM8009A_Init+0x334>)
 8000828:	2000      	movs	r0, #0
 800082a:	f001 fa43 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800082e:	499f      	ldr	r1, [pc, #636]	; (8000aac <OTM8009A_Init+0x304>)
 8000830:	2000      	movs	r0, #0
 8000832:	f001 fa3f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000836:	49aa      	ldr	r1, [pc, #680]	; (8000ae0 <OTM8009A_Init+0x338>)
 8000838:	2000      	movs	r0, #0
 800083a:	f001 fa3b 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800083e:	49a9      	ldr	r1, [pc, #676]	; (8000ae4 <OTM8009A_Init+0x33c>)
 8000840:	2000      	movs	r0, #0
 8000842:	f001 fa37 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000846:	49a8      	ldr	r1, [pc, #672]	; (8000ae8 <OTM8009A_Init+0x340>)
 8000848:	2000      	movs	r0, #0
 800084a:	f001 fa33 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800084e:	49a7      	ldr	r1, [pc, #668]	; (8000aec <OTM8009A_Init+0x344>)
 8000850:	2000      	movs	r0, #0
 8000852:	f001 fa2f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000856:	49a6      	ldr	r1, [pc, #664]	; (8000af0 <OTM8009A_Init+0x348>)
 8000858:	2000      	movs	r0, #0
 800085a:	f001 fa2b 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800085e:	49a5      	ldr	r1, [pc, #660]	; (8000af4 <OTM8009A_Init+0x34c>)
 8000860:	2000      	movs	r0, #0
 8000862:	f001 fa27 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000866:	49a4      	ldr	r1, [pc, #656]	; (8000af8 <OTM8009A_Init+0x350>)
 8000868:	2000      	movs	r0, #0
 800086a:	f001 fa23 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800086e:	49a3      	ldr	r1, [pc, #652]	; (8000afc <OTM8009A_Init+0x354>)
 8000870:	2000      	movs	r0, #0
 8000872:	f001 fa1f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000876:	4997      	ldr	r1, [pc, #604]	; (8000ad4 <OTM8009A_Init+0x32c>)
 8000878:	2000      	movs	r0, #0
 800087a:	f001 fa1b 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800087e:	498b      	ldr	r1, [pc, #556]	; (8000aac <OTM8009A_Init+0x304>)
 8000880:	2000      	movs	r0, #0
 8000882:	f001 fa17 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000886:	499e      	ldr	r1, [pc, #632]	; (8000b00 <OTM8009A_Init+0x358>)
 8000888:	2002      	movs	r0, #2
 800088a:	f001 fa13 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800088e:	499d      	ldr	r1, [pc, #628]	; (8000b04 <OTM8009A_Init+0x35c>)
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fa0f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000896:	499c      	ldr	r1, [pc, #624]	; (8000b08 <OTM8009A_Init+0x360>)
 8000898:	2000      	movs	r0, #0
 800089a:	f001 fa0b 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800089e:	499b      	ldr	r1, [pc, #620]	; (8000b0c <OTM8009A_Init+0x364>)
 80008a0:	2000      	movs	r0, #0
 80008a2:	f001 fa07 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80008a6:	499a      	ldr	r1, [pc, #616]	; (8000b10 <OTM8009A_Init+0x368>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 fa03 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80008ae:	4999      	ldr	r1, [pc, #612]	; (8000b14 <OTM8009A_Init+0x36c>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 f9ff 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80008b6:	4998      	ldr	r1, [pc, #608]	; (8000b18 <OTM8009A_Init+0x370>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 f9fb 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008be:	4989      	ldr	r1, [pc, #548]	; (8000ae4 <OTM8009A_Init+0x33c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 f9f7 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80008c6:	4995      	ldr	r1, [pc, #596]	; (8000b1c <OTM8009A_Init+0x374>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 f9f3 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008ce:	4987      	ldr	r1, [pc, #540]	; (8000aec <OTM8009A_Init+0x344>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 f9ef 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80008d6:	4992      	ldr	r1, [pc, #584]	; (8000b20 <OTM8009A_Init+0x378>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 f9eb 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80008de:	4991      	ldr	r1, [pc, #580]	; (8000b24 <OTM8009A_Init+0x37c>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 f9e7 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80008e6:	4990      	ldr	r1, [pc, #576]	; (8000b28 <OTM8009A_Init+0x380>)
 80008e8:	2002      	movs	r0, #2
 80008ea:	f001 f9e3 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80008ee:	4971      	ldr	r1, [pc, #452]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 f9df 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80008f6:	498d      	ldr	r1, [pc, #564]	; (8000b2c <OTM8009A_Init+0x384>)
 80008f8:	2006      	movs	r0, #6
 80008fa:	f001 f9db 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80008fe:	498c      	ldr	r1, [pc, #560]	; (8000b30 <OTM8009A_Init+0x388>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 f9d7 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000906:	498b      	ldr	r1, [pc, #556]	; (8000b34 <OTM8009A_Init+0x38c>)
 8000908:	200e      	movs	r0, #14
 800090a:	f001 f9d3 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800090e:	498a      	ldr	r1, [pc, #552]	; (8000b38 <OTM8009A_Init+0x390>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 f9cf 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000916:	4989      	ldr	r1, [pc, #548]	; (8000b3c <OTM8009A_Init+0x394>)
 8000918:	200e      	movs	r0, #14
 800091a:	f001 f9cb 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800091e:	4988      	ldr	r1, [pc, #544]	; (8000b40 <OTM8009A_Init+0x398>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 f9c7 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000926:	4987      	ldr	r1, [pc, #540]	; (8000b44 <OTM8009A_Init+0x39c>)
 8000928:	200a      	movs	r0, #10
 800092a:	f001 f9c3 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800092e:	4986      	ldr	r1, [pc, #536]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 f9bf 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000936:	4985      	ldr	r1, [pc, #532]	; (8000b4c <OTM8009A_Init+0x3a4>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 f9bb 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800093e:	495d      	ldr	r1, [pc, #372]	; (8000ab4 <OTM8009A_Init+0x30c>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 f9b7 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000946:	4982      	ldr	r1, [pc, #520]	; (8000b50 <OTM8009A_Init+0x3a8>)
 8000948:	200a      	movs	r0, #10
 800094a:	f001 f9b3 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800094e:	4981      	ldr	r1, [pc, #516]	; (8000b54 <OTM8009A_Init+0x3ac>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 f9af 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000956:	4980      	ldr	r1, [pc, #512]	; (8000b58 <OTM8009A_Init+0x3b0>)
 8000958:	200f      	movs	r0, #15
 800095a:	f001 f9ab 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800095e:	4974      	ldr	r1, [pc, #464]	; (8000b30 <OTM8009A_Init+0x388>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 f9a7 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000966:	497d      	ldr	r1, [pc, #500]	; (8000b5c <OTM8009A_Init+0x3b4>)
 8000968:	200f      	movs	r0, #15
 800096a:	f001 f9a3 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800096e:	4972      	ldr	r1, [pc, #456]	; (8000b38 <OTM8009A_Init+0x390>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 f99f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000976:	497a      	ldr	r1, [pc, #488]	; (8000b60 <OTM8009A_Init+0x3b8>)
 8000978:	200a      	movs	r0, #10
 800097a:	f001 f99b 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800097e:	4970      	ldr	r1, [pc, #448]	; (8000b40 <OTM8009A_Init+0x398>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 f997 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000986:	4977      	ldr	r1, [pc, #476]	; (8000b64 <OTM8009A_Init+0x3bc>)
 8000988:	200f      	movs	r0, #15
 800098a:	f001 f993 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800098e:	496e      	ldr	r1, [pc, #440]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 f98f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000996:	4974      	ldr	r1, [pc, #464]	; (8000b68 <OTM8009A_Init+0x3c0>)
 8000998:	200f      	movs	r0, #15
 800099a:	f001 f98b 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800099e:	4973      	ldr	r1, [pc, #460]	; (8000b6c <OTM8009A_Init+0x3c4>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f001 f987 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80009a6:	4972      	ldr	r1, [pc, #456]	; (8000b70 <OTM8009A_Init+0x3c8>)
 80009a8:	200a      	movs	r0, #10
 80009aa:	f001 f983 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80009ae:	4971      	ldr	r1, [pc, #452]	; (8000b74 <OTM8009A_Init+0x3cc>)
 80009b0:	2000      	movs	r0, #0
 80009b2:	f001 f97f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80009b6:	4970      	ldr	r1, [pc, #448]	; (8000b78 <OTM8009A_Init+0x3d0>)
 80009b8:	200a      	movs	r0, #10
 80009ba:	f001 f97b 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009be:	493d      	ldr	r1, [pc, #244]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f001 f977 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80009c6:	496d      	ldr	r1, [pc, #436]	; (8000b7c <OTM8009A_Init+0x3d4>)
 80009c8:	200a      	movs	r0, #10
 80009ca:	f001 f973 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009ce:	4961      	ldr	r1, [pc, #388]	; (8000b54 <OTM8009A_Init+0x3ac>)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f001 f96f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80009d6:	496a      	ldr	r1, [pc, #424]	; (8000b80 <OTM8009A_Init+0x3d8>)
 80009d8:	200f      	movs	r0, #15
 80009da:	f001 f96b 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009de:	4954      	ldr	r1, [pc, #336]	; (8000b30 <OTM8009A_Init+0x388>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 f967 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80009e6:	4967      	ldr	r1, [pc, #412]	; (8000b84 <OTM8009A_Init+0x3dc>)
 80009e8:	200f      	movs	r0, #15
 80009ea:	f001 f963 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009ee:	4952      	ldr	r1, [pc, #328]	; (8000b38 <OTM8009A_Init+0x390>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 f95f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80009f6:	4964      	ldr	r1, [pc, #400]	; (8000b88 <OTM8009A_Init+0x3e0>)
 80009f8:	200a      	movs	r0, #10
 80009fa:	f001 f95b 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009fe:	4950      	ldr	r1, [pc, #320]	; (8000b40 <OTM8009A_Init+0x398>)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f001 f957 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000a06:	4961      	ldr	r1, [pc, #388]	; (8000b8c <OTM8009A_Init+0x3e4>)
 8000a08:	200f      	movs	r0, #15
 8000a0a:	f001 f953 	bl	8001cb4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a0e:	494e      	ldr	r1, [pc, #312]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000a10:	2000      	movs	r0, #0
 8000a12:	f001 f94f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000a16:	495e      	ldr	r1, [pc, #376]	; (8000b90 <OTM8009A_Init+0x3e8>)
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f001 f94b 	bl	8001cb4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000a1e:	4931      	ldr	r1, [pc, #196]	; (8000ae4 <OTM8009A_Init+0x33c>)
 8000a20:	2000      	movs	r0, #0
 8000a22:	f001 f947 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000a26:	495b      	ldr	r1, [pc, #364]	; (8000b94 <OTM8009A_Init+0x3ec>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f943 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000a2e:	495a      	ldr	r1, [pc, #360]	; (8000b98 <OTM8009A_Init+0x3f0>)
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 f93f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000a36:	4959      	ldr	r1, [pc, #356]	; (8000b9c <OTM8009A_Init+0x3f4>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f93b 	bl	8001cb4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000a3e:	4958      	ldr	r1, [pc, #352]	; (8000ba0 <OTM8009A_Init+0x3f8>)
 8000a40:	2000      	movs	r0, #0
 8000a42:	f001 f937 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000a46:	4957      	ldr	r1, [pc, #348]	; (8000ba4 <OTM8009A_Init+0x3fc>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f933 	bl	8001cb4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a4e:	4917      	ldr	r1, [pc, #92]	; (8000aac <OTM8009A_Init+0x304>)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f001 f92f 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000a56:	4954      	ldr	r1, [pc, #336]	; (8000ba8 <OTM8009A_Init+0x400>)
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f001 f92b 	bl	8001cb4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a5e:	4913      	ldr	r1, [pc, #76]	; (8000aac <OTM8009A_Init+0x304>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 f927 	bl	8001cb4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a66:	4911      	ldr	r1, [pc, #68]	; (8000aac <OTM8009A_Init+0x304>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f923 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000a6e:	494f      	ldr	r1, [pc, #316]	; (8000bac <OTM8009A_Init+0x404>)
 8000a70:	2010      	movs	r0, #16
 8000a72:	f001 f91f 	bl	8001cb4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <OTM8009A_Init+0x304>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f91b 	bl	8001cb4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000a7e:	494c      	ldr	r1, [pc, #304]	; (8000bb0 <OTM8009A_Init+0x408>)
 8000a80:	2010      	movs	r0, #16
 8000a82:	f001 f917 	bl	8001cb4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000a86:	494b      	ldr	r1, [pc, #300]	; (8000bb4 <OTM8009A_Init+0x40c>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f913 	bl	8001cb4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000a8e:	2078      	movs	r0, #120	; 0x78
 8000a90:	f000 fb22 	bl	80010d8 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8090 	beq.w	8000bbc <OTM8009A_Init+0x414>
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d000      	beq.n	8000aa2 <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000aa0:	e091      	b.n	8000bc6 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000aa2:	4945      	ldr	r1, [pc, #276]	; (8000bb8 <OTM8009A_Init+0x410>)
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f001 f905 	bl	8001cb4 <DSI_IO_WriteCmd>
    break;
 8000aaa:	e08c      	b.n	8000bc6 <OTM8009A_Init+0x41e>
 8000aac:	0800b768 	.word	0x0800b768
 8000ab0:	0800b620 	.word	0x0800b620
 8000ab4:	0800b76c 	.word	0x0800b76c
 8000ab8:	0800b624 	.word	0x0800b624
 8000abc:	0800b770 	.word	0x0800b770
 8000ac0:	0800b774 	.word	0x0800b774
 8000ac4:	0800b778 	.word	0x0800b778
 8000ac8:	0800b77c 	.word	0x0800b77c
 8000acc:	0800b780 	.word	0x0800b780
 8000ad0:	0800b784 	.word	0x0800b784
 8000ad4:	0800b788 	.word	0x0800b788
 8000ad8:	0800b78c 	.word	0x0800b78c
 8000adc:	0800b790 	.word	0x0800b790
 8000ae0:	0800b794 	.word	0x0800b794
 8000ae4:	0800b798 	.word	0x0800b798
 8000ae8:	0800b79c 	.word	0x0800b79c
 8000aec:	0800b7a0 	.word	0x0800b7a0
 8000af0:	0800b7a4 	.word	0x0800b7a4
 8000af4:	0800b7a8 	.word	0x0800b7a8
 8000af8:	0800b7ac 	.word	0x0800b7ac
 8000afc:	0800b7b0 	.word	0x0800b7b0
 8000b00:	0800b650 	.word	0x0800b650
 8000b04:	0800b7b4 	.word	0x0800b7b4
 8000b08:	0800b7b8 	.word	0x0800b7b8
 8000b0c:	0800b7bc 	.word	0x0800b7bc
 8000b10:	0800b7c0 	.word	0x0800b7c0
 8000b14:	0800b7c4 	.word	0x0800b7c4
 8000b18:	0800b7c8 	.word	0x0800b7c8
 8000b1c:	0800b7cc 	.word	0x0800b7cc
 8000b20:	0800b7d0 	.word	0x0800b7d0
 8000b24:	0800b7d4 	.word	0x0800b7d4
 8000b28:	0800b654 	.word	0x0800b654
 8000b2c:	0800b658 	.word	0x0800b658
 8000b30:	0800b7d8 	.word	0x0800b7d8
 8000b34:	0800b660 	.word	0x0800b660
 8000b38:	0800b7dc 	.word	0x0800b7dc
 8000b3c:	0800b670 	.word	0x0800b670
 8000b40:	0800b7e0 	.word	0x0800b7e0
 8000b44:	0800b680 	.word	0x0800b680
 8000b48:	0800b7e4 	.word	0x0800b7e4
 8000b4c:	0800b81c 	.word	0x0800b81c
 8000b50:	0800b68c 	.word	0x0800b68c
 8000b54:	0800b7e8 	.word	0x0800b7e8
 8000b58:	0800b698 	.word	0x0800b698
 8000b5c:	0800b6a8 	.word	0x0800b6a8
 8000b60:	0800b6b8 	.word	0x0800b6b8
 8000b64:	0800b6c4 	.word	0x0800b6c4
 8000b68:	0800b6d4 	.word	0x0800b6d4
 8000b6c:	0800b7ec 	.word	0x0800b7ec
 8000b70:	0800b6e4 	.word	0x0800b6e4
 8000b74:	0800b7f0 	.word	0x0800b7f0
 8000b78:	0800b6f0 	.word	0x0800b6f0
 8000b7c:	0800b6fc 	.word	0x0800b6fc
 8000b80:	0800b708 	.word	0x0800b708
 8000b84:	0800b718 	.word	0x0800b718
 8000b88:	0800b728 	.word	0x0800b728
 8000b8c:	0800b734 	.word	0x0800b734
 8000b90:	0800b744 	.word	0x0800b744
 8000b94:	0800b820 	.word	0x0800b820
 8000b98:	0800b824 	.word	0x0800b824
 8000b9c:	0800b828 	.word	0x0800b828
 8000ba0:	0800b82c 	.word	0x0800b82c
 8000ba4:	0800b830 	.word	0x0800b830
 8000ba8:	0800b754 	.word	0x0800b754
 8000bac:	0800b628 	.word	0x0800b628
 8000bb0:	0800b63c 	.word	0x0800b63c
 8000bb4:	0800b7f4 	.word	0x0800b7f4
 8000bb8:	0800b7f8 	.word	0x0800b7f8
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000bbc:	491a      	ldr	r1, [pc, #104]	; (8000c28 <OTM8009A_Init+0x480>)
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f001 f878 	bl	8001cb4 <DSI_IO_WriteCmd>
    break;
 8000bc4:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10b      	bne.n	8000be4 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000bcc:	4917      	ldr	r1, [pc, #92]	; (8000c2c <OTM8009A_Init+0x484>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f001 f870 	bl	8001cb4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000bd4:	4916      	ldr	r1, [pc, #88]	; (8000c30 <OTM8009A_Init+0x488>)
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f001 f86c 	bl	8001cb4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000bdc:	4915      	ldr	r1, [pc, #84]	; (8000c34 <OTM8009A_Init+0x48c>)
 8000bde:	2004      	movs	r0, #4
 8000be0:	f001 f868 	bl	8001cb4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000be4:	4914      	ldr	r1, [pc, #80]	; (8000c38 <OTM8009A_Init+0x490>)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f001 f864 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <OTM8009A_Init+0x494>)
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f001 f860 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000bf4:	4912      	ldr	r1, [pc, #72]	; (8000c40 <OTM8009A_Init+0x498>)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f001 f85c 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000bfc:	4911      	ldr	r1, [pc, #68]	; (8000c44 <OTM8009A_Init+0x49c>)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f001 f858 	bl	8001cb4 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000c04:	4910      	ldr	r1, [pc, #64]	; (8000c48 <OTM8009A_Init+0x4a0>)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f001 f854 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000c0c:	490f      	ldr	r1, [pc, #60]	; (8000c4c <OTM8009A_Init+0x4a4>)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f001 f850 	bl	8001cb4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000c14:	490e      	ldr	r1, [pc, #56]	; (8000c50 <OTM8009A_Init+0x4a8>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f001 f84c 	bl	8001cb4 <DSI_IO_WriteCmd>

  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0800b7fc 	.word	0x0800b7fc
 8000c2c:	0800b800 	.word	0x0800b800
 8000c30:	0800b758 	.word	0x0800b758
 8000c34:	0800b760 	.word	0x0800b760
 8000c38:	0800b804 	.word	0x0800b804
 8000c3c:	0800b808 	.word	0x0800b808
 8000c40:	0800b80c 	.word	0x0800b80c
 8000c44:	0800b810 	.word	0x0800b810
 8000c48:	0800b814 	.word	0x0800b814
 8000c4c:	0800b768 	.word	0x0800b768
 8000c50:	0800b818 	.word	0x0800b818

08000c54 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <BSP_LED_Init+0x54>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <BSP_LED_Init+0x54>)
 8000c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <BSP_LED_Init+0x54>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <BSP_LED_Init+0x58>)
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <BSP_LED_Init+0x5c>)
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	f107 020c 	add.w	r2, r7, #12
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fef6 	bl	8004a8c <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	20000028 	.word	0x20000028
 8000cb0:	20000030 	.word	0x20000030

08000cb4 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <BSP_LED_On+0x2c>)
 8000cc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <BSP_LED_On+0x30>)
 8000cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f004 f9a6 	bl	8005024 <HAL_GPIO_WritePin>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000030 	.word	0x20000030
 8000ce4:	20000028 	.word	0x20000028

08000ce8 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <BSP_LED_Off+0x2c>)
 8000cf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <BSP_LED_Off+0x30>)
 8000cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2200      	movs	r2, #0
 8000d06:	4619      	mov	r1, r3
 8000d08:	f004 f98c 	bl	8005024 <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000030 	.word	0x20000030
 8000d18:	20000028 	.word	0x20000028

08000d1c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <BSP_LED_Toggle+0x2c>)
 8000d2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <BSP_LED_Toggle+0x30>)
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f004 f98c 	bl	8005056 <HAL_GPIO_TogglePin>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000030 	.word	0x20000030
 8000d4c:	20000028 	.word	0x20000028

08000d50 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a58      	ldr	r2, [pc, #352]	; (8000ebc <I2Cx_MspInit+0x16c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d15b      	bne.n	8000e18 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d60:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a56      	ldr	r2, [pc, #344]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d78:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a50      	ldr	r2, [pc, #320]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000da2:	2304      	movs	r3, #4
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <I2Cx_MspInit+0x174>)
 8000dae:	f003 fe6d 	bl	8004a8c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000db6:	230b      	movs	r3, #11
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4841      	ldr	r0, [pc, #260]	; (8000ec8 <I2Cx_MspInit+0x178>)
 8000dc2:	f003 fe63 	bl	8004a8c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	4a37      	ldr	r2, [pc, #220]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000de8:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000df4:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	205f      	movs	r0, #95	; 0x5f
 8000dfc:	f002 f93b 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000e00:	205f      	movs	r0, #95	; 0x5f
 8000e02:	f002 f954 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	210f      	movs	r1, #15
 8000e0a:	2060      	movs	r0, #96	; 0x60
 8000e0c:	f002 f933 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000e10:	2060      	movs	r0, #96	; 0x60
 8000e12:	f002 f94c 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000e16:	e04d      	b.n	8000eb4 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e34:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e36:	2312      	movs	r3, #18
 8000e38:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e42:	2304      	movs	r3, #4
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <I2Cx_MspInit+0x178>)
 8000e4e:	f003 fe1d 	bl	8004a8c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <I2Cx_MspInit+0x178>)
 8000e60:	f003 fe14 	bl	8004a8c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e86:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <I2Cx_MspInit+0x170>)
 8000e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e92:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	210f      	movs	r1, #15
 8000e98:	201f      	movs	r0, #31
 8000e9a:	f002 f8ec 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e9e:	201f      	movs	r0, #31
 8000ea0:	f002 f905 	bl	80030ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f002 f8e4 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000eae:	2020      	movs	r0, #32
 8000eb0:	f002 f8fd 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 8000eb4:	bf00      	nop
 8000eb6:	3730      	adds	r7, #48	; 0x30
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000084 	.word	0x20000084
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40020400 	.word	0x40020400

08000ecc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f004 fbf3 	bl	80056c0 <HAL_I2C_GetState>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d125      	bne.n	8000f2c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <I2Cx_Init+0x68>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d103      	bne.n	8000ef0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <I2Cx_Init+0x6c>)
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e002      	b.n	8000ef6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <I2Cx_Init+0x70>)
 8000ef4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <I2Cx_Init+0x74>)
 8000efa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff15 	bl	8000d50 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f004 f8c8 	bl	80050bc <HAL_I2C_Init>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000084 	.word	0x20000084
 8000f38:	40006000 	.word	0x40006000
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	40912732 	.word	0x40912732

08000f44 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	72fb      	strb	r3, [r7, #11]
 8000f56:	460b      	mov	r3, r1
 8000f58:	813b      	strh	r3, [r7, #8]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	b299      	uxth	r1, r3
 8000f66:	88f8      	ldrh	r0, [r7, #6]
 8000f68:	893a      	ldrh	r2, [r7, #8]
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4603      	mov	r3, r0
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f004 fa86 	bl	800548c <HAL_I2C_Mem_Read>
 8000f80:	4603      	mov	r3, r0
 8000f82:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 f832 	bl	8000ff8 <I2Cx_Error>
  }
  return status;
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b08a      	sub	sp, #40	; 0x28
 8000fa2:	af04      	add	r7, sp, #16
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	4611      	mov	r1, r2
 8000faa:	461a      	mov	r2, r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	72fb      	strb	r3, [r7, #11]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	813b      	strh	r3, [r7, #8]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	893a      	ldrh	r2, [r7, #8]
 8000fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f004 f945 	bl	8005264 <HAL_I2C_Mem_Write>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f805 	bl	8000ff8 <I2Cx_Error>
  }
  return status;
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f004 f8e9 	bl	80051dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff5e 	bl	8000ecc <I2Cx_Init>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TS_IO_Init+0x10>)
 800101e:	f7ff ff55 	bl	8000ecc <I2Cx_Init>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000084 	.word	0x20000084

0800102c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	460b      	mov	r3, r1
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	4613      	mov	r3, r2
 800103c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	b29a      	uxth	r2, r3
 8001042:	79f9      	ldrb	r1, [r7, #7]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	1d7b      	adds	r3, r7, #5
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <TS_IO_Write+0x30>)
 8001050:	f7ff ffa5 	bl	8000f9e <I2Cx_WriteMultiple>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000084 	.word	0x20000084

08001060 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af02      	add	r7, sp, #8
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	b29a      	uxth	r2, r3
 8001078:	79f9      	ldrb	r1, [r7, #7]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 030f 	add.w	r3, r7, #15
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <TS_IO_Read+0x38>)
 8001088:	f7ff ff5c 	bl	8000f44 <I2Cx_ReadMultiple>

  return read_value;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000084 	.word	0x20000084

0800109c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	603a      	str	r2, [r7, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	460b      	mov	r3, r1
 80010ac:	71bb      	strb	r3, [r7, #6]
 80010ae:	4613      	mov	r3, r2
 80010b0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	79f9      	ldrb	r1, [r7, #7]
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <TS_IO_ReadMultiple+0x38>)
 80010c4:	f7ff ff3e 	bl	8000f44 <I2Cx_ReadMultiple>
 80010c8:	4603      	mov	r3, r0
 80010ca:	b29b      	uxth	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000084 	.word	0x20000084

080010d8 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f001 fb8b 	bl	80027fc <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 f804 	bl	8001100 <BSP_LCD_InitEx>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	; 0x40
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 800110a:	f646 3325 	movw	r3, #27429	; 0x6b25
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001118:	f000 f936 	bl	8001388 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 800111c:	f000 fdf4 	bl	8001d08 <LCD_IO_GetID>
 8001120:	4603      	mov	r3, r0
 8001122:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001124:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001126:	2b11      	cmp	r3, #17
 8001128:	d001      	beq.n	800112e <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 800112a:	2301      	movs	r3, #1
 800112c:	e113      	b.n	8001356 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800112e:	f000 fdf3 	bl	8001d18 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001132:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <BSP_LCD_InitEx+0x260>)
 8001134:	4a8b      	ldr	r2, [pc, #556]	; (8001364 <BSP_LCD_InitEx+0x264>)
 8001136:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001138:	4889      	ldr	r0, [pc, #548]	; (8001360 <BSP_LCD_InitEx+0x260>)
 800113a:	f002 fd99 	bl	8003c70 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800113e:	2364      	movs	r3, #100	; 0x64
 8001140:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001142:	2305      	movs	r3, #5
 8001144:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800114a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800114e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001150:	4b83      	ldr	r3, [pc, #524]	; (8001360 <BSP_LCD_InitEx+0x260>)
 8001152:	2201      	movs	r2, #1
 8001154:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	4a83      	ldr	r2, [pc, #524]	; (8001368 <BSP_LCD_InitEx+0x268>)
 800115c:	fba2 2303 	umull	r2, r3, r2, r3
 8001160:	0a9b      	lsrs	r3, r3, #10
 8001162:	4a7f      	ldr	r2, [pc, #508]	; (8001360 <BSP_LCD_InitEx+0x260>)
 8001164:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	487c      	ldr	r0, [pc, #496]	; (8001360 <BSP_LCD_InitEx+0x260>)
 800116e:	f002 fc65 	bl	8003a3c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001178:	4b7c      	ldr	r3, [pc, #496]	; (800136c <BSP_LCD_InitEx+0x26c>)
 800117a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800117e:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001180:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <BSP_LCD_InitEx+0x270>)
 8001182:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e007      	b.n	800119a <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800118a:	4b78      	ldr	r3, [pc, #480]	; (800136c <BSP_LCD_InitEx+0x26c>)
 800118c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001190:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001192:	4b77      	ldr	r3, [pc, #476]	; (8001370 <BSP_LCD_InitEx+0x270>)
 8001194:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001198:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 800119a:	4b74      	ldr	r3, [pc, #464]	; (800136c <BSP_LCD_InitEx+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80011a0:	4b73      	ldr	r3, [pc, #460]	; (8001370 <BSP_LCD_InitEx+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80011a6:	2301      	movs	r3, #1
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80011aa:	230f      	movs	r3, #15
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80011ae:	2310      	movs	r3, #16
 80011b0:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80011b6:	2322      	movs	r3, #34	; 0x22
 80011b8:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80011ba:	2322      	movs	r3, #34	; 0x22
 80011bc:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80011be:	4b6d      	ldr	r3, [pc, #436]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80011c4:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011c6:	2205      	movs	r2, #5
 80011c8:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80011ca:	4b6a      	ldr	r3, [pc, #424]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80011dc:	4b65      	ldr	r3, [pc, #404]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011de:	2202      	movs	r2, #2
 80011e0:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80011e2:	4b64      	ldr	r3, [pc, #400]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011e8:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80011ea:	4b62      	ldr	r3, [pc, #392]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80011f0:	4a60      	ldr	r2, [pc, #384]	; (8001374 <BSP_LCD_InitEx+0x274>)
 80011f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f4:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011fa:	fb02 f203 	mul.w	r2, r2, r3
 80011fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	4a5b      	ldr	r2, [pc, #364]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001206:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800120c:	fb02 f203 	mul.w	r2, r2, r3
 8001210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4a57      	ldr	r2, [pc, #348]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001218:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800121a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	441a      	add	r2, r3
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	441a      	add	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4413      	add	r3, r2
 8001228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800122a:	fb02 f203 	mul.w	r2, r2, r3
 800122e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	4a4f      	ldr	r2, [pc, #316]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <BSP_LCD_InitEx+0x274>)
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800123e:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001244:	4a4b      	ldr	r2, [pc, #300]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800124a:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <BSP_LCD_InitEx+0x274>)
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001250:	4b48      	ldr	r3, [pc, #288]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001252:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001256:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <BSP_LCD_InitEx+0x274>)
 800125a:	2210      	movs	r2, #16
 800125c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001260:	2200      	movs	r2, #0
 8001262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126a:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <BSP_LCD_InitEx+0x274>)
 800126e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001272:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127a:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <BSP_LCD_InitEx+0x274>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128a:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <BSP_LCD_InitEx+0x274>)
 800128e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001292:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001294:	4937      	ldr	r1, [pc, #220]	; (8001374 <BSP_LCD_InitEx+0x274>)
 8001296:	4832      	ldr	r0, [pc, #200]	; (8001360 <BSP_LCD_InitEx+0x260>)
 8001298:	f002 fe42 	bl	8003f20 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3b01      	subs	r3, #1
 80012a0:	4a35      	ldr	r2, [pc, #212]	; (8001378 <BSP_LCD_InitEx+0x278>)
 80012a2:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4413      	add	r3, r2
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a32      	ldr	r2, [pc, #200]	; (8001378 <BSP_LCD_InitEx+0x278>)
 80012ae:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <BSP_LCD_InitEx+0x26c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	441a      	add	r2, r3
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	4413      	add	r3, r2
 80012bc:	3b01      	subs	r3, #1
 80012be:	4a2e      	ldr	r2, [pc, #184]	; (8001378 <BSP_LCD_InitEx+0x278>)
 80012c0:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <BSP_LCD_InitEx+0x26c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	441a      	add	r2, r3
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	441a      	add	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	4413      	add	r3, r2
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4a28      	ldr	r2, [pc, #160]	; (8001378 <BSP_LCD_InitEx+0x278>)
 80012d6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <BSP_LCD_InitEx+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <BSP_LCD_InitEx+0x278>)
 80012de:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <BSP_LCD_InitEx+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a24      	ldr	r2, [pc, #144]	; (8001378 <BSP_LCD_InitEx+0x278>)
 80012e6:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <BSP_LCD_InitEx+0x27c>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <BSP_LCD_InitEx+0x27c>)
 80012f0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012f4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <BSP_LCD_InitEx+0x27c>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <BSP_LCD_InitEx+0x27c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001302:	481e      	ldr	r0, [pc, #120]	; (800137c <BSP_LCD_InitEx+0x27c>)
 8001304:	f005 fb5a 	bl	80069bc <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <BSP_LCD_InitEx+0x278>)
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <BSP_LCD_InitEx+0x278>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <BSP_LCD_InitEx+0x278>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <BSP_LCD_InitEx+0x278>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <BSP_LCD_InitEx+0x278>)
 8001328:	4a15      	ldr	r2, [pc, #84]	; (8001380 <BSP_LCD_InitEx+0x280>)
 800132a:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 800132c:	4911      	ldr	r1, [pc, #68]	; (8001374 <BSP_LCD_InitEx+0x274>)
 800132e:	4812      	ldr	r0, [pc, #72]	; (8001378 <BSP_LCD_InitEx+0x278>)
 8001330:	f004 fe98 	bl	8006064 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <BSP_LCD_InitEx+0x278>)
 8001336:	f004 fbed 	bl	8005b14 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <BSP_LCD_InitEx+0x260>)
 800133c:	f003 fa82 	bl	8004844 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001340:	f000 fe6a 	bl	8002018 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <BSP_LCD_InitEx+0x284>)
 8001346:	f000 f901 	bl	800154c <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4619      	mov	r1, r3
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fa2a 	bl	80007a8 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3740      	adds	r7, #64	; 0x40
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200003a4 	.word	0x200003a4
 8001364:	40016c00 	.word	0x40016c00
 8001368:	43215e57 	.word	0x43215e57
 800136c:	20000048 	.word	0x20000048
 8001370:	2000004c 	.word	0x2000004c
 8001374:	200000d0 	.word	0x200000d0
 8001378:	200002fc 	.word	0x200002fc
 800137c:	20000158 	.word	0x20000158
 8001380:	40016800 	.word	0x40016800
 8001384:	20000038 	.word	0x20000038

08001388 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <BSP_LCD_Reset+0x68>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <BSP_LCD_Reset+0x68>)
 8001394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <BSP_LCD_Reset+0x68>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80013a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013aa:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <BSP_LCD_Reset+0x6c>)
 80013be:	f003 fb65 	bl	8004a8c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <BSP_LCD_Reset+0x6c>)
 80013ca:	f003 fe2b 	bl	8005024 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80013ce:	2014      	movs	r0, #20
 80013d0:	f001 fa14 	bl	80027fc <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <BSP_LCD_Reset+0x6c>)
 80013dc:	f003 fe22 	bl	8005024 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f001 fa0b 	bl	80027fc <HAL_Delay>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40022400 	.word	0x40022400

080013f8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <BSP_LCD_GetXSize+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000048 	.word	0x20000048

08001410 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <BSP_LCD_GetYSize+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2000004c 	.word	0x2000004c

08001428 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b090      	sub	sp, #64	; 0x40
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001438:	f7ff ffde 	bl	80013f8 <BSP_LCD_GetXSize>
 800143c:	4603      	mov	r3, r0
 800143e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001444:	f7ff ffe4 	bl	8001410 <BSP_LCD_GetYSize>
 8001448:	4603      	mov	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001454:	23ff      	movs	r3, #255	; 0xff
 8001456:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800146e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001474:	2307      	movs	r3, #7
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001478:	f7ff ffbe 	bl	80013f8 <BSP_LCD_GetXSize>
 800147c:	4603      	mov	r3, r0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001480:	f7ff ffc6 	bl	8001410 <BSP_LCD_GetYSize>
 8001484:	4603      	mov	r3, r0
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4619      	mov	r1, r3
 8001490:	4812      	ldr	r0, [pc, #72]	; (80014dc <BSP_LCD_LayerDefaultInit+0xb4>)
 8001492:	f004 fc0f 	bl	8005cb4 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	4911      	ldr	r1, [pc, #68]	; (80014e0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3304      	adds	r3, #4
 80014a6:	f04f 32ff 	mov.w	r2, #4294967295
 80014aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	490c      	ldr	r1, [pc, #48]	; (80014e0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	3308      	adds	r3, #8
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80014be:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	4907      	ldr	r1, [pc, #28]	; (80014e0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	3740      	adds	r7, #64	; 0x40
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200002fc 	.word	0x200002fc
 80014e0:	20000140 	.word	0x20000140
 80014e4:	20000038 	.word	0x20000038

080014e8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <BSP_LCD_SetTextColor+0x28>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <BSP_LCD_SetTextColor+0x2c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	2000013c 	.word	0x2000013c
 8001514:	20000140 	.word	0x20000140

08001518 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <BSP_LCD_SetBackColor+0x2c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4908      	ldr	r1, [pc, #32]	; (8001548 <BSP_LCD_SetBackColor+0x30>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3304      	adds	r3, #4
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000013c 	.word	0x2000013c
 8001548:	20000140 	.word	0x20000140

0800154c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <BSP_LCD_SetFont+0x2c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4908      	ldr	r1, [pc, #32]	; (800157c <BSP_LCD_SetFont+0x30>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3308      	adds	r3, #8
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000013c 	.word	0x2000013c
 800157c:	20000140 	.word	0x20000140

08001580 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <BSP_LCD_Clear+0x48>)
 800158a:	681c      	ldr	r4, [r3, #0]
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <BSP_LCD_Clear+0x48>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <BSP_LCD_Clear+0x4c>)
 8001592:	2134      	movs	r1, #52	; 0x34
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	335c      	adds	r3, #92	; 0x5c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461d      	mov	r5, r3
 80015a0:	f7ff ff2a 	bl	80013f8 <BSP_LCD_GetXSize>
 80015a4:	4606      	mov	r6, r0
 80015a6:	f7ff ff33 	bl	8001410 <BSP_LCD_GetYSize>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2300      	movs	r3, #0
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4613      	mov	r3, r2
 80015b6:	4632      	mov	r2, r6
 80015b8:	4629      	mov	r1, r5
 80015ba:	4620      	mov	r0, r4
 80015bc:	f000 fcf4 	bl	8001fa8 <LL_FillBuffer>
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c8:	2000013c 	.word	0x2000013c
 80015cc:	200002fc 	.word	0x200002fc

080015d0 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
 80015da:	460b      	mov	r3, r1
 80015dc:	80bb      	strh	r3, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <BSP_LCD_DisplayChar+0x80>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	491b      	ldr	r1, [pc, #108]	; (8001654 <BSP_LCD_DisplayChar+0x84>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3308      	adds	r3, #8
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <BSP_LCD_DisplayChar+0x80>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4c14      	ldr	r4, [pc, #80]	; (8001654 <BSP_LCD_DisplayChar+0x84>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4423      	add	r3, r4
 800160e:	3308      	adds	r3, #8
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001614:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <BSP_LCD_DisplayChar+0x80>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4c0d      	ldr	r4, [pc, #52]	; (8001654 <BSP_LCD_DisplayChar+0x84>)
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4423      	add	r3, r4
 8001628:	3308      	adds	r3, #8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	3307      	adds	r3, #7
 8001630:	2b00      	cmp	r3, #0
 8001632:	da00      	bge.n	8001636 <BSP_LCD_DisplayChar+0x66>
 8001634:	3307      	adds	r3, #7
 8001636:	10db      	asrs	r3, r3, #3
 8001638:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800163c:	18ca      	adds	r2, r1, r3
 800163e:	88b9      	ldrh	r1, [r7, #4]
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fbf8 	bl	8001e38 <DrawChar>
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}
 8001650:	2000013c 	.word	0x2000013c
 8001654:	20000140 	.word	0x20000140

08001658 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	60ba      	str	r2, [r7, #8]
 8001660:	461a      	mov	r2, r3
 8001662:	4603      	mov	r3, r0
 8001664:	81fb      	strh	r3, [r7, #14]
 8001666:	460b      	mov	r3, r1
 8001668:	81bb      	strh	r3, [r7, #12]
 800166a:	4613      	mov	r3, r2
 800166c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800166e:	2301      	movs	r3, #1
 8001670:	83fb      	strh	r3, [r7, #30]
 8001672:	2300      	movs	r3, #0
 8001674:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001682:	e002      	b.n	800168a <BSP_LCD_DisplayStringAt+0x32>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	3301      	adds	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	617a      	str	r2, [r7, #20]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f6      	bne.n	8001684 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001696:	f7ff feaf 	bl	80013f8 <BSP_LCD_GetXSize>
 800169a:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <BSP_LCD_DisplayStringAt+0x180>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	494f      	ldr	r1, [pc, #316]	; (80017dc <BSP_LCD_DisplayStringAt+0x184>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3308      	adds	r3, #8
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b4:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d01c      	beq.n	80016f6 <BSP_LCD_DisplayStringAt+0x9e>
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d017      	beq.n	80016f0 <BSP_LCD_DisplayStringAt+0x98>
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d12e      	bne.n	8001722 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad1      	subs	r1, r2, r3
 80016ca:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <BSP_LCD_DisplayStringAt+0x180>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4843      	ldr	r0, [pc, #268]	; (80017dc <BSP_LCD_DisplayStringAt+0x184>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4403      	add	r3, r0
 80016da:	3308      	adds	r3, #8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	fb03 f301 	mul.w	r3, r3, r1
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	4413      	add	r3, r2
 80016ec:	83fb      	strh	r3, [r7, #30]
      break;
 80016ee:	e01b      	b.n	8001728 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	83fb      	strh	r3, [r7, #30]
      break;
 80016f4:	e018      	b.n	8001728 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b299      	uxth	r1, r3
 80016fe:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <BSP_LCD_DisplayStringAt+0x180>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4836      	ldr	r0, [pc, #216]	; (80017dc <BSP_LCD_DisplayStringAt+0x184>)
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4403      	add	r3, r0
 800170e:	3308      	adds	r3, #8
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	889b      	ldrh	r3, [r3, #4]
 8001714:	fb11 f303 	smulbb	r3, r1, r3
 8001718:	b29a      	uxth	r2, r3
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	83fb      	strh	r3, [r7, #30]
      break;
 8001720:	e002      	b.n	8001728 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	83fb      	strh	r3, [r7, #30]
      break;
 8001726:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001728:	8bfb      	ldrh	r3, [r7, #30]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <BSP_LCD_DisplayStringAt+0xde>
 800172e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001732:	2b00      	cmp	r3, #0
 8001734:	da1d      	bge.n	8001772 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800173a:	e01a      	b.n	8001772 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	89b9      	ldrh	r1, [r7, #12]
 8001742:	8bfb      	ldrh	r3, [r7, #30]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff43 	bl	80015d0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <BSP_LCD_DisplayStringAt+0x180>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4923      	ldr	r1, [pc, #140]	; (80017dc <BSP_LCD_DisplayStringAt+0x184>)
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3308      	adds	r3, #8
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	889a      	ldrh	r2, [r3, #4]
 8001760:	8bfb      	ldrh	r3, [r7, #30]
 8001762:	4413      	add	r3, r2
 8001764:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3301      	adds	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
    i++;
 800176c:	8bbb      	ldrh	r3, [r7, #28]
 800176e:	3301      	adds	r3, #1
 8001770:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf14      	ite	ne
 800177a:	2301      	movne	r3, #1
 800177c:	2300      	moveq	r3, #0
 800177e:	b2dc      	uxtb	r4, r3
 8001780:	f7ff fe3a 	bl	80013f8 <BSP_LCD_GetXSize>
 8001784:	4605      	mov	r5, r0
 8001786:	8bb9      	ldrh	r1, [r7, #28]
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <BSP_LCD_DisplayStringAt+0x180>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4813      	ldr	r0, [pc, #76]	; (80017dc <BSP_LCD_DisplayStringAt+0x184>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4403      	add	r3, r0
 8001798:	3308      	adds	r3, #8
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	889b      	ldrh	r3, [r3, #4]
 800179e:	fb03 f301 	mul.w	r3, r3, r1
 80017a2:	1aeb      	subs	r3, r5, r3
 80017a4:	b299      	uxth	r1, r3
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <BSP_LCD_DisplayStringAt+0x180>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	480c      	ldr	r0, [pc, #48]	; (80017dc <BSP_LCD_DisplayStringAt+0x184>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4403      	add	r3, r0
 80017b6:	3308      	adds	r3, #8
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	889b      	ldrh	r3, [r3, #4]
 80017bc:	4299      	cmp	r1, r3
 80017be:	bf2c      	ite	cs
 80017c0:	2301      	movcs	r3, #1
 80017c2:	2300      	movcc	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4023      	ands	r3, r4
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1b6      	bne.n	800173c <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000013c 	.word	0x2000013c
 80017dc:	20000140 	.word	0x20000140

080017e0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	460b      	mov	r3, r1
 80017ec:	80bb      	strh	r3, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <BSP_LCD_DrawHLine+0x70>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <BSP_LCD_DrawHLine+0x74>)
 80017fc:	2134      	movs	r1, #52	; 0x34
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	335c      	adds	r3, #92	; 0x5c
 8001806:	681c      	ldr	r4, [r3, #0]
 8001808:	f7ff fdf6 	bl	80013f8 <BSP_LCD_GetXSize>
 800180c:	4602      	mov	r2, r0
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	fb03 f202 	mul.w	r2, r3, r2
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4423      	add	r3, r4
 800181c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <BSP_LCD_DrawHLine+0x70>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	68fc      	ldr	r4, [r7, #12]
 8001824:	887d      	ldrh	r5, [r7, #2]
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <BSP_LCD_DrawHLine+0x70>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	490b      	ldr	r1, [pc, #44]	; (8001858 <BSP_LCD_DrawHLine+0x78>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	2300      	movs	r3, #0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2301      	movs	r3, #1
 8001840:	462a      	mov	r2, r5
 8001842:	4621      	mov	r1, r4
 8001844:	f000 fbb0 	bl	8001fa8 <LL_FillBuffer>
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bdb0      	pop	{r4, r5, r7, pc}
 8001850:	2000013c 	.word	0x2000013c
 8001854:	200002fc 	.word	0x200002fc
 8001858:	20000140 	.word	0x20000140

0800185c <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	b087      	sub	sp, #28
 8001860:	af02      	add	r7, sp, #8
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
 8001866:	460b      	mov	r3, r1
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <BSP_LCD_DrawVLine+0x78>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <BSP_LCD_DrawVLine+0x7c>)
 8001878:	2134      	movs	r1, #52	; 0x34
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	335c      	adds	r3, #92	; 0x5c
 8001882:	681c      	ldr	r4, [r3, #0]
 8001884:	f7ff fdb8 	bl	80013f8 <BSP_LCD_GetXSize>
 8001888:	4602      	mov	r2, r0
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	fb03 f202 	mul.w	r2, r3, r2
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4423      	add	r3, r4
 8001898:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <BSP_LCD_DrawVLine+0x78>)
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	68fd      	ldr	r5, [r7, #12]
 80018a0:	887e      	ldrh	r6, [r7, #2]
 80018a2:	f7ff fda9 	bl	80013f8 <BSP_LCD_GetXSize>
 80018a6:	4603      	mov	r3, r0
 80018a8:	1e59      	subs	r1, r3, #1
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <BSP_LCD_DrawVLine+0x78>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <BSP_LCD_DrawVLine+0x80>)
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4403      	add	r3, r0
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	9100      	str	r1, [sp, #0]
 80018c0:	4633      	mov	r3, r6
 80018c2:	2201      	movs	r2, #1
 80018c4:	4629      	mov	r1, r5
 80018c6:	4620      	mov	r0, r4
 80018c8:	f000 fb6e 	bl	8001fa8 <LL_FillBuffer>
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d4:	2000013c 	.word	0x2000013c
 80018d8:	200002fc 	.word	0x200002fc
 80018dc:	20000140 	.word	0x20000140

080018e0 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	80bb      	strh	r3, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	f1c3 0303 	rsb	r3, r3, #3
 80018fa:	617b      	str	r3, [r7, #20]
  CurX = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001904:	e0cf      	b.n	8001aa6 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	b29a      	uxth	r2, r3
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	4413      	add	r3, r2
 800190e:	b298      	uxth	r0, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	b29b      	uxth	r3, r3
 8001914:	88ba      	ldrh	r2, [r7, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b29c      	uxth	r4, r3
 800191a:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4967      	ldr	r1, [pc, #412]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4621      	mov	r1, r4
 8001930:	f000 fa5c 	bl	8001dec <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	b29b      	uxth	r3, r3
 8001938:	88fa      	ldrh	r2, [r7, #6]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	b298      	uxth	r0, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	b29b      	uxth	r3, r3
 8001942:	88ba      	ldrh	r2, [r7, #4]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	b29c      	uxth	r4, r3
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	495b      	ldr	r1, [pc, #364]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	4621      	mov	r1, r4
 800195e:	f000 fa45 	bl	8001dec <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	b29a      	uxth	r2, r3
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4413      	add	r3, r2
 800196a:	b298      	uxth	r0, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	b29b      	uxth	r3, r3
 8001970:	88ba      	ldrh	r2, [r7, #4]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	b29c      	uxth	r4, r3
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4950      	ldr	r1, [pc, #320]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4621      	mov	r1, r4
 800198c:	f000 fa2e 	bl	8001dec <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	b29b      	uxth	r3, r3
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	b298      	uxth	r0, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	b29b      	uxth	r3, r3
 800199e:	88ba      	ldrh	r2, [r7, #4]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b29c      	uxth	r4, r3
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4944      	ldr	r1, [pc, #272]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4621      	mov	r1, r4
 80019ba:	f000 fa17 	bl	8001dec <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4413      	add	r3, r2
 80019c6:	b298      	uxth	r0, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	b29c      	uxth	r4, r3
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4939      	ldr	r1, [pc, #228]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4621      	mov	r1, r4
 80019e8:	f000 fa00 	bl	8001dec <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	88fa      	ldrh	r2, [r7, #6]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b298      	uxth	r0, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	b29c      	uxth	r4, r3
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	492d      	ldr	r1, [pc, #180]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4621      	mov	r1, r4
 8001a16:	f000 f9e9 	bl	8001dec <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4413      	add	r3, r2
 8001a22:	b298      	uxth	r0, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29c      	uxth	r4, r3
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4922      	ldr	r1, [pc, #136]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	f000 f9d2 	bl	8001dec <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b298      	uxth	r0, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	88bb      	ldrh	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	b29c      	uxth	r4, r3
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <BSP_LCD_DrawCircle+0x1d8>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4916      	ldr	r1, [pc, #88]	; (8001abc <BSP_LCD_DrawCircle+0x1dc>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f000 f9bb 	bl	8001dec <BSP_LCD_DrawPixel>

    if (D < 0)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da06      	bge.n	8001a8a <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	009a      	lsls	r2, r3, #2
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4413      	add	r3, r2
 8001a84:	3306      	adds	r3, #6
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e00a      	b.n	8001aa0 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	009a      	lsls	r2, r3, #2
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4413      	add	r3, r2
 8001a96:	330a      	adds	r3, #10
 8001a98:	617b      	str	r3, [r7, #20]
      CurY--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	f67f af2b 	bls.w	8001906 <BSP_LCD_DrawCircle+0x26>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}
 8001ab8:	2000013c 	.word	0x2000013c
 8001abc:	20000140 	.word	0x20000140

08001ac0 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af02      	add	r7, sp, #8
 8001ac8:	4604      	mov	r4, r0
 8001aca:	4608      	mov	r0, r1
 8001acc:	4611      	mov	r1, r2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	80fb      	strh	r3, [r7, #6]
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	80bb      	strh	r3, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <BSP_LCD_FillRect+0xa8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4920      	ldr	r1, [pc, #128]	; (8001b6c <BSP_LCD_FillRect+0xac>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fcf6 	bl	80014e8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <BSP_LCD_FillRect+0xa8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <BSP_LCD_FillRect+0xb0>)
 8001b02:	2134      	movs	r1, #52	; 0x34
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	335c      	adds	r3, #92	; 0x5c
 8001b0c:	681c      	ldr	r4, [r3, #0]
 8001b0e:	f7ff fc73 	bl	80013f8 <BSP_LCD_GetXSize>
 8001b12:	4602      	mov	r2, r0
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	fb03 f202 	mul.w	r2, r3, r2
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4423      	add	r3, r4
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <BSP_LCD_FillRect+0xa8>)
 8001b26:	681c      	ldr	r4, [r3, #0]
 8001b28:	68fd      	ldr	r5, [r7, #12]
 8001b2a:	887e      	ldrh	r6, [r7, #2]
 8001b2c:	f8b7 8000 	ldrh.w	r8, [r7]
 8001b30:	f7ff fc62 	bl	80013f8 <BSP_LCD_GetXSize>
 8001b34:	4602      	mov	r2, r0
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	1ad1      	subs	r1, r2, r3
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <BSP_LCD_FillRect+0xa8>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	480b      	ldr	r0, [pc, #44]	; (8001b6c <BSP_LCD_FillRect+0xac>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4403      	add	r3, r0
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	9100      	str	r1, [sp, #0]
 8001b50:	4643      	mov	r3, r8
 8001b52:	4632      	mov	r2, r6
 8001b54:	4629      	mov	r1, r5
 8001b56:	4620      	mov	r0, r4
 8001b58:	f000 fa26 	bl	8001fa8 <LL_FillBuffer>
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b66:	bf00      	nop
 8001b68:	2000013c 	.word	0x2000013c
 8001b6c:	20000140 	.word	0x20000140
 8001b70:	200002fc 	.word	0x200002fc

08001b74 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	80bb      	strh	r3, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	f1c3 0303 	rsb	r3, r3, #3
 8001b8e:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <BSP_LCD_FillCircle+0x138>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4944      	ldr	r1, [pc, #272]	; (8001cb0 <BSP_LCD_FillCircle+0x13c>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fc9c 	bl	80014e8 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001bb0:	e061      	b.n	8001c76 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d021      	beq.n	8001bfc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b298      	uxth	r0, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	88bb      	ldrh	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f7ff fe03 	bl	80017e0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b298      	uxth	r0, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	88ba      	ldrh	r2, [r7, #4]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b299      	uxth	r1, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f7ff fdf2 	bl	80017e0 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d021      	beq.n	8001c46 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b298      	uxth	r0, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	88ba      	ldrh	r2, [r7, #4]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b299      	uxth	r1, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f7ff fdde 	bl	80017e0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	88bb      	ldrh	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	b299      	uxth	r1, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	f7ff fdcd 	bl	80017e0 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	da06      	bge.n	8001c5a <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	009a      	lsls	r2, r3, #2
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4413      	add	r3, r2
 8001c54:	3306      	adds	r3, #6
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	009a      	lsls	r2, r3, #2
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	4413      	add	r3, r2
 8001c66:	330a      	adds	r3, #10
 8001c68:	617b      	str	r3, [r7, #20]
      CurY--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	3301      	adds	r3, #1
 8001c74:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d999      	bls.n	8001bb2 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <BSP_LCD_FillCircle+0x138>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	490b      	ldr	r1, [pc, #44]	; (8001cb0 <BSP_LCD_FillCircle+0x13c>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fc29 	bl	80014e8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	88b9      	ldrh	r1, [r7, #4]
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fe1f 	bl	80018e0 <BSP_LCD_DrawCircle>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000013c 	.word	0x2000013c
 8001cb0:	20000140 	.word	0x20000140

08001cb4 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d80d      	bhi.n	8001ce0 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	2215      	movs	r2, #21
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <DSI_IO_WriteCmd+0x50>)
 8001cda:	f002 fdef 	bl	80048bc <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001cde:	e00d      	b.n	8001cfc <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2239      	movs	r2, #57	; 0x39
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <DSI_IO_WriteCmd+0x50>)
 8001cf8:	f002 fe02 	bl	8004900 <HAL_DSI_LongWrite>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200003a4 	.word	0x200003a4

08001d08 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001d0c:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d40:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d4c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d70:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d7c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001d9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001da0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <BSP_LCD_MspInit+0xd0>)
 8001da8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001dac:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2103      	movs	r1, #3
 8001db2:	2058      	movs	r0, #88	; 0x58
 8001db4:	f001 f95f 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001db8:	2058      	movs	r0, #88	; 0x58
 8001dba:	f001 f978 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	205a      	movs	r0, #90	; 0x5a
 8001dc4:	f001 f957 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dc8:	205a      	movs	r0, #90	; 0x5a
 8001dca:	f001 f970 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	2062      	movs	r0, #98	; 0x62
 8001dd4:	f001 f94f 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001dd8:	2062      	movs	r0, #98	; 0x62
 8001dda:	f001 f968 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	603a      	str	r2, [r7, #0]
 8001df6:	80fb      	strh	r3, [r7, #6]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <BSP_LCD_DrawPixel+0x44>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <BSP_LCD_DrawPixel+0x48>)
 8001e02:	2134      	movs	r1, #52	; 0x34
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	335c      	adds	r3, #92	; 0x5c
 8001e0c:	681c      	ldr	r4, [r3, #0]
 8001e0e:	88bd      	ldrh	r5, [r7, #4]
 8001e10:	f7ff faf2 	bl	80013f8 <BSP_LCD_GetXSize>
 8001e14:	4603      	mov	r3, r0
 8001e16:	fb03 f205 	mul.w	r2, r3, r5
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4423      	add	r3, r4
 8001e22:	461a      	mov	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e30:	2000013c 	.word	0x2000013c
 8001e34:	200002fc 	.word	0x200002fc

08001e38 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	603a      	str	r2, [r7, #0]
 8001e42:	80fb      	strh	r3, [r7, #6]
 8001e44:	460b      	mov	r3, r1
 8001e46:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <DrawChar+0x168>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4953      	ldr	r1, [pc, #332]	; (8001fa4 <DrawChar+0x16c>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	3308      	adds	r3, #8
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	88db      	ldrh	r3, [r3, #6]
 8001e66:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <DrawChar+0x168>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <DrawChar+0x16c>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	889b      	ldrh	r3, [r3, #4]
 8001e7e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001e80:	8a3b      	ldrh	r3, [r7, #16]
 8001e82:	3307      	adds	r3, #7
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da00      	bge.n	8001e8a <DrawChar+0x52>
 8001e88:	3307      	adds	r3, #7
 8001e8a:	10db      	asrs	r3, r3, #3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	8a3b      	ldrh	r3, [r7, #16]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e076      	b.n	8001f8e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001ea0:	8a3b      	ldrh	r3, [r7, #16]
 8001ea2:	3307      	adds	r3, #7
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da00      	bge.n	8001eaa <DrawChar+0x72>
 8001ea8:	3307      	adds	r3, #7
 8001eaa:	10db      	asrs	r3, r3, #3
 8001eac:	461a      	mov	r2, r3
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fb03 f302 	mul.w	r3, r3, r2
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001eba:	8a3b      	ldrh	r3, [r7, #16]
 8001ebc:	3307      	adds	r3, #7
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da00      	bge.n	8001ec4 <DrawChar+0x8c>
 8001ec2:	3307      	adds	r3, #7
 8001ec4:	10db      	asrs	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d002      	beq.n	8001ed0 <DrawChar+0x98>
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d004      	beq.n	8001ed8 <DrawChar+0xa0>
 8001ece:	e00c      	b.n	8001eea <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	617b      	str	r3, [r7, #20]
      break;
 8001ed6:	e016      	b.n	8001f06 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	3201      	adds	r2, #1
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
      break;
 8001ee8:	e00d      	b.n	8001f06 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	041a      	lsls	r2, r3, #16
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	3202      	adds	r2, #2
 8001efe:	7812      	ldrb	r2, [r2, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
      break;
 8001f04:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e036      	b.n	8001f7a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001f0c:	8a3a      	ldrh	r2, [r7, #16]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad2      	subs	r2, r2, r3
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	4413      	add	r3, r2
 8001f16:	3b01      	subs	r3, #1
 8001f18:	2201      	movs	r2, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d012      	beq.n	8001f4e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b298      	uxth	r0, r3
 8001f32:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <DrawChar+0x168>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	491b      	ldr	r1, [pc, #108]	; (8001fa4 <DrawChar+0x16c>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	88bb      	ldrh	r3, [r7, #4]
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7ff ff50 	bl	8001dec <BSP_LCD_DrawPixel>
 8001f4c:	e012      	b.n	8001f74 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4413      	add	r3, r2
 8001f56:	b298      	uxth	r0, r3
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <DrawChar+0x168>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4911      	ldr	r1, [pc, #68]	; (8001fa4 <DrawChar+0x16c>)
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3304      	adds	r3, #4
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	88bb      	ldrh	r3, [r7, #4]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7ff ff3c 	bl	8001dec <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	8a3b      	ldrh	r3, [r7, #16]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3c4      	bcc.n	8001f0c <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001f82:	88bb      	ldrh	r3, [r7, #4]
 8001f84:	3301      	adds	r3, #1
 8001f86:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	8a7b      	ldrh	r3, [r7, #18]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d384      	bcc.n	8001ea0 <DrawChar+0x68>
  }
}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000013c 	.word	0x2000013c
 8001fa4:	20000140 	.word	0x20000140

08001fa8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <LL_FillBuffer+0x68>)
 8001fb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fbc:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <LL_FillBuffer+0x68>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <LL_FillBuffer+0x68>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <LL_FillBuffer+0x68>)
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <LL_FillBuffer+0x6c>)
 8001fce:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001fd0:	480f      	ldr	r0, [pc, #60]	; (8002010 <LL_FillBuffer+0x68>)
 8001fd2:	f001 fa43 	bl	800345c <HAL_DMA2D_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d115      	bne.n	8002008 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <LL_FillBuffer+0x68>)
 8001fe0:	f001 fbaa 	bl	8003738 <HAL_DMA2D_ConfigLayer>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10e      	bne.n	8002008 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69f9      	ldr	r1, [r7, #28]
 8001ff4:	4806      	ldr	r0, [pc, #24]	; (8002010 <LL_FillBuffer+0x68>)
 8001ff6:	f001 fa8b 	bl	8003510 <HAL_DMA2D_Start>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002000:	210a      	movs	r1, #10
 8002002:	4803      	ldr	r0, [pc, #12]	; (8002010 <LL_FillBuffer+0x68>)
 8002004:	f001 faaf 	bl	8003566 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200002a4 	.word	0x200002a4
 8002014:	4002b000 	.word	0x4002b000

08002018 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 800201e:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <BSP_SDRAM_Init+0xb0>)
 8002020:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 8002024:	2202      	movs	r2, #2
 8002026:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 800202a:	2207      	movs	r2, #7
 800202c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800202e:	4b27      	ldr	r3, [pc, #156]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 8002030:	2204      	movs	r2, #4
 8002032:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 8002036:	2207      	movs	r2, #7
 8002038:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 800203c:	2202      	movs	r2, #2
 800203e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 8002042:	2202      	movs	r2, #2
 8002044:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 8002048:	2202      	movs	r2, #2
 800204a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 800205a:	2204      	movs	r2, #4
 800205c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800205e:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 8002060:	2220      	movs	r2, #32
 8002062:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 800206c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002070:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 800207a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800207e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 8002082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800208e:	2100      	movs	r1, #0
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 8002092:	f000 f87f 	bl	8002194 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002096:	490d      	ldr	r1, [pc, #52]	; (80020cc <BSP_SDRAM_Init+0xb4>)
 8002098:	480a      	ldr	r0, [pc, #40]	; (80020c4 <BSP_SDRAM_Init+0xac>)
 800209a:	f006 fa34 	bl	8008506 <HAL_SDRAM_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <BSP_SDRAM_Init+0xb8>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e002      	b.n	80020b2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <BSP_SDRAM_Init+0xb8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80020b2:	f240 6003 	movw	r0, #1539	; 0x603
 80020b6:	f000 f80d 	bl	80020d4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <BSP_SDRAM_Init+0xb8>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200003c0 	.word	0x200003c0
 80020c8:	a0000140 	.word	0xa0000140
 80020cc:	200001e8 	.word	0x200001e8
 80020d0:	20000050 	.word	0x20000050

080020d4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020e8:	2210      	movs	r2, #16
 80020ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80020f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020fc:	4923      	ldr	r1, [pc, #140]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020fe:	4824      	ldr	r0, [pc, #144]	; (8002190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002100:	f006 fa35 	bl	800856e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002104:	2001      	movs	r0, #1
 8002106:	f000 fb79 	bl	80027fc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800210c:	2202      	movs	r2, #2
 800210e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002112:	2210      	movs	r2, #16
 8002114:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002118:	2201      	movs	r2, #1
 800211a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002126:	4919      	ldr	r1, [pc, #100]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002128:	4819      	ldr	r0, [pc, #100]	; (8002190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800212a:	f006 fa20 	bl	800856e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002130:	2203      	movs	r2, #3
 8002132:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002136:	2210      	movs	r2, #16
 8002138:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800213c:	2208      	movs	r2, #8
 800213e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214a:	4910      	ldr	r1, [pc, #64]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800214c:	4810      	ldr	r0, [pc, #64]	; (8002190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800214e:	f006 fa0e 	bl	800856e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002152:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002156:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800215a:	2204      	movs	r2, #4
 800215c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002160:	2210      	movs	r2, #16
 8002162:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002166:	2201      	movs	r2, #1
 8002168:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800216e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002174:	4905      	ldr	r1, [pc, #20]	; (800218c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002178:	f006 f9f9 	bl	800856e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4804      	ldr	r0, [pc, #16]	; (8002190 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002180:	f006 fa20 	bl	80085c4 <HAL_SDRAM_ProgramRefreshRate>
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000204 	.word	0x20000204
 8002190:	200003c0 	.word	0x200003c0

08002194 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002194:	b580      	push	{r7, lr}
 8002196:	b090      	sub	sp, #64	; 0x40
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800219e:	4b71      	ldr	r3, [pc, #452]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	4a70      	ldr	r2, [pc, #448]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6393      	str	r3, [r2, #56]	; 0x38
 80021aa:	4b6e      	ldr	r3, [pc, #440]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80021b6:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b68      	ldr	r3, [pc, #416]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ce:	4b65      	ldr	r3, [pc, #404]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a64      	ldr	r2, [pc, #400]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021d4:	f043 0308 	orr.w	r3, r3, #8
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b62      	ldr	r3, [pc, #392]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021fe:	4b59      	ldr	r3, [pc, #356]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a58      	ldr	r2, [pc, #352]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b56      	ldr	r3, [pc, #344]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a52      	ldr	r2, [pc, #328]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 800221c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b50      	ldr	r3, [pc, #320]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222e:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a4c      	ldr	r2, [pc, #304]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a46      	ldr	r2, [pc, #280]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b44      	ldr	r3, [pc, #272]	; (8002364 <BSP_SDRAM_MspInit+0x1d0>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002262:	2301      	movs	r3, #1
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800226a:	230c      	movs	r3, #12
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800226e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002278:	4619      	mov	r1, r3
 800227a:	483b      	ldr	r0, [pc, #236]	; (8002368 <BSP_SDRAM_MspInit+0x1d4>)
 800227c:	f002 fc06 	bl	8004a8c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002280:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228a:	4619      	mov	r1, r3
 800228c:	4837      	ldr	r0, [pc, #220]	; (800236c <BSP_SDRAM_MspInit+0x1d8>)
 800228e:	f002 fbfd 	bl	8004a8c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002292:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229c:	4619      	mov	r1, r3
 800229e:	4834      	ldr	r0, [pc, #208]	; (8002370 <BSP_SDRAM_MspInit+0x1dc>)
 80022a0:	f002 fbf4 	bl	8004a8c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80022a4:	f248 1337 	movw	r3, #33079	; 0x8137
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80022aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ae:	4619      	mov	r1, r3
 80022b0:	4830      	ldr	r0, [pc, #192]	; (8002374 <BSP_SDRAM_MspInit+0x1e0>)
 80022b2:	f002 fbeb 	bl	8004a8c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80022b6:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80022bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c0:	4619      	mov	r1, r3
 80022c2:	482d      	ldr	r0, [pc, #180]	; (8002378 <BSP_SDRAM_MspInit+0x1e4>)
 80022c4:	f002 fbe2 	bl	8004a8c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80022c8:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80022ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d2:	4619      	mov	r1, r3
 80022d4:	4829      	ldr	r0, [pc, #164]	; (800237c <BSP_SDRAM_MspInit+0x1e8>)
 80022d6:	f002 fbd9 	bl	8004a8c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 80022e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ec:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 80022f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 80022f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022fc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002300:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002304:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002308:	2200      	movs	r2, #0
 800230a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 800230e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002312:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 800231c:	2203      	movs	r2, #3
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002322:	2200      	movs	r2, #0
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <BSP_SDRAM_MspInit+0x1f0>)
 8002330:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800233e:	4810      	ldr	r0, [pc, #64]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002340:	f000 ff7e 	bl	8003240 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002344:	480e      	ldr	r0, [pc, #56]	; (8002380 <BSP_SDRAM_MspInit+0x1ec>)
 8002346:	f000 fecd 	bl	80030e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	210f      	movs	r1, #15
 800234e:	2038      	movs	r0, #56	; 0x38
 8002350:	f000 fe91 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002354:	2038      	movs	r0, #56	; 0x38
 8002356:	f000 feaa 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3740      	adds	r7, #64	; 0x40
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	40020c00 	.word	0x40020c00
 800236c:	40021000 	.word	0x40021000
 8002370:	40021400 	.word	0x40021400
 8002374:	40021800 	.word	0x40021800
 8002378:	40021c00 	.word	0x40021c00
 800237c:	40022000 	.word	0x40022000
 8002380:	20000214 	.word	0x20000214
 8002384:	40026410 	.word	0x40026410

08002388 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	460a      	mov	r2, r1
 8002392:	80fb      	strh	r3, [r7, #6]
 8002394:	4613      	mov	r3, r2
 8002396:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <BSP_TS_Init+0xb0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a25      	ldr	r2, [pc, #148]	; (800243c <BSP_TS_Init+0xb4>)
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	b292      	uxth	r2, r2
 80023aa:	4610      	mov	r0, r2
 80023ac:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <BSP_TS_Init+0xb0>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2054      	movs	r0, #84	; 0x54
 80023b4:	4798      	blx	r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80023ba:	7b7b      	ldrb	r3, [r7, #13]
 80023bc:	2b11      	cmp	r3, #17
 80023be:	d009      	beq.n	80023d4 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <BSP_TS_Init+0xb0>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2070      	movs	r0, #112	; 0x70
 80023c6:	4798      	blx	r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <BSP_TS_Init+0xb4>)
 80023ce:	2270      	movs	r2, #112	; 0x70
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e002      	b.n	80023da <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <BSP_TS_Init+0xb4>)
 80023d6:	2254      	movs	r2, #84	; 0x54
 80023d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 80023da:	7b7b      	ldrb	r3, [r7, #13]
 80023dc:	2b11      	cmp	r3, #17
 80023de:	d002      	beq.n	80023e6 <BSP_TS_Init+0x5e>
 80023e0:	7bbb      	ldrb	r3, [r7, #14]
 80023e2:	2b11      	cmp	r3, #17
 80023e4:	d121      	bne.n	800242a <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <BSP_TS_Init+0xb8>)
 80023e8:	4a13      	ldr	r2, [pc, #76]	; (8002438 <BSP_TS_Init+0xb0>)
 80023ea:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	88bb      	ldrh	r3, [r7, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d203      	bcs.n	80023fc <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <BSP_TS_Init+0xbc>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e002      	b.n	8002402 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <BSP_TS_Init+0xbc>)
 80023fe:	220c      	movs	r2, #12
 8002400:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d112      	bne.n	800242e <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <BSP_TS_Init+0xb8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <BSP_TS_Init+0xb4>)
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	b292      	uxth	r2, r2
 8002414:	4610      	mov	r0, r2
 8002416:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <BSP_TS_Init+0xb8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <BSP_TS_Init+0xb4>)
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	b292      	uxth	r2, r2
 8002424:	4610      	mov	r0, r2
 8002426:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002428:	e001      	b.n	800242e <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800242a:	2303      	movs	r3, #3
 800242c:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000000 	.word	0x20000000
 800243c:	20000279 	.word	0x20000279
 8002440:	20000274 	.word	0x20000274
 8002444:	20000278 	.word	0x20000278

08002448 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8002452:	f000 f94f 	bl	80026f4 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 8002456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245a:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800245c:	2301      	movs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002460:	2302      	movs	r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <BSP_TS_ITConfig+0x54>)
 8002466:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002468:	463b      	mov	r3, r7
 800246a:	4619      	mov	r1, r3
 800246c:	480c      	ldr	r0, [pc, #48]	; (80024a0 <BSP_TS_ITConfig+0x58>)
 800246e:	f002 fb0d 	bl	8004a8c <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8002472:	2200      	movs	r2, #0
 8002474:	210f      	movs	r1, #15
 8002476:	2028      	movs	r0, #40	; 0x28
 8002478:	f000 fdfd 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800247c:	2028      	movs	r0, #40	; 0x28
 800247e:	f000 fe16 	bl	80030ae <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <BSP_TS_ITConfig+0x5c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <BSP_TS_ITConfig+0x60>)
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	b292      	uxth	r2, r2
 800248e:	4610      	mov	r0, r2
 8002490:	4798      	blx	r3

  return (ts_status);
 8002492:	7dfb      	ldrb	r3, [r7, #23]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	10210000 	.word	0x10210000
 80024a0:	40022000 	.word	0x40022000
 80024a4:	20000274 	.word	0x20000274
 80024a8:	20000279 	.word	0x20000279

080024ac <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 80024b8:	4b89      	ldr	r3, [pc, #548]	; (80026e0 <BSP_TS_GetState+0x234>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	4a89      	ldr	r2, [pc, #548]	; (80026e4 <BSP_TS_GetState+0x238>)
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	b292      	uxth	r2, r2
 80024c4:	4610      	mov	r0, r2
 80024c6:	4798      	blx	r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80fe 	beq.w	80026d6 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e0f3      	b.n	80026c8 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80024e0:	4b7f      	ldr	r3, [pc, #508]	; (80026e0 <BSP_TS_GetState+0x234>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4a7f      	ldr	r2, [pc, #508]	; (80026e4 <BSP_TS_GetState+0x238>)
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	b290      	uxth	r0, r2
 80024ec:	f107 0110 	add.w	r1, r7, #16
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	0052      	lsls	r2, r2, #1
 80024f4:	188c      	adds	r4, r1, r2
 80024f6:	f107 010c 	add.w	r1, r7, #12
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	0052      	lsls	r2, r2, #1
 80024fe:	440a      	add	r2, r1
 8002500:	4621      	mov	r1, r4
 8002502:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002504:	4b78      	ldr	r3, [pc, #480]	; (80026e8 <BSP_TS_GetState+0x23c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01d      	beq.n	800254c <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	f107 0220 	add.w	r2, r7, #32
 8002518:	4413      	add	r3, r2
 800251a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800251e:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	f107 0220 	add.w	r2, r7, #32
 8002528:	4413      	add	r3, r2
 800252a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	f107 0120 	add.w	r1, r7, #32
 8002536:	440b      	add	r3, r1
 8002538:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	f107 0220 	add.w	r2, r7, #32
 8002544:	4413      	add	r3, r2
 8002546:	8b3a      	ldrh	r2, [r7, #24]
 8002548:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <BSP_TS_GetState+0x23c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d011      	beq.n	800257c <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	f107 0220 	add.w	r2, r7, #32
 8002560:	4413      	add	r3, r2
 8002562:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002566:	f240 331f 	movw	r3, #799	; 0x31f
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	b29a      	uxth	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	f107 0120 	add.w	r1, r7, #32
 8002576:	440b      	add	r3, r1
 8002578:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 800257c:	4b5a      	ldr	r3, [pc, #360]	; (80026e8 <BSP_TS_GetState+0x23c>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d011      	beq.n	80025ac <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	f107 0220 	add.w	r2, r7, #32
 8002590:	4413      	add	r3, r2
 8002592:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002596:	f240 13df 	movw	r3, #479	; 0x1df
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	b29a      	uxth	r2, r3
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	f107 0120 	add.w	r1, r7, #32
 80025a6:	440b      	add	r3, r1
 80025a8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	f107 0220 	add.w	r2, r7, #32
 80025b4:	4413      	add	r3, r2
 80025b6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4a4b      	ldr	r2, [pc, #300]	; (80026ec <BSP_TS_GetState+0x240>)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c4:	4299      	cmp	r1, r3
 80025c6:	d90e      	bls.n	80025e6 <BSP_TS_GetState+0x13a>
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	f107 0220 	add.w	r2, r7, #32
 80025d0:	4413      	add	r3, r2
 80025d2:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80025d6:	4945      	ldr	r1, [pc, #276]	; (80026ec <BSP_TS_GetState+0x240>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	e00d      	b.n	8002602 <BSP_TS_GetState+0x156>
 80025e6:	4a41      	ldr	r2, [pc, #260]	; (80026ec <BSP_TS_GetState+0x240>)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f107 0120 	add.w	r1, r7, #32
 80025f8:	440b      	add	r3, r1
 80025fa:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	f107 0220 	add.w	r2, r7, #32
 800260c:	4413      	add	r3, r2
 800260e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002612:	4619      	mov	r1, r3
 8002614:	4a36      	ldr	r2, [pc, #216]	; (80026f0 <BSP_TS_GetState+0x244>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	4299      	cmp	r1, r3
 800261e:	d90e      	bls.n	800263e <BSP_TS_GetState+0x192>
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	f107 0220 	add.w	r2, r7, #32
 8002628:	4413      	add	r3, r2
 800262a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800262e:	4930      	ldr	r1, [pc, #192]	; (80026f0 <BSP_TS_GetState+0x244>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002636:	b29b      	uxth	r3, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	e00d      	b.n	800265a <BSP_TS_GetState+0x1ae>
 800263e:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <BSP_TS_GetState+0x244>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	b29a      	uxth	r2, r3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	f107 0120 	add.w	r1, r7, #32
 8002650:	440b      	add	r3, r1
 8002652:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	b29b      	uxth	r3, r3
 800265a:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800265c:	8afa      	ldrh	r2, [r7, #22]
 800265e:	8abb      	ldrh	r3, [r7, #20]
 8002660:	4413      	add	r3, r2
 8002662:	2b05      	cmp	r3, #5
 8002664:	dd17      	ble.n	8002696 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	f107 0220 	add.w	r2, r7, #32
 800266e:	4413      	add	r3, r2
 8002670:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002674:	4619      	mov	r1, r3
 8002676:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <BSP_TS_GetState+0x240>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	f107 0220 	add.w	r2, r7, #32
 8002686:	4413      	add	r3, r2
 8002688:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800268c:	4619      	mov	r1, r3
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <BSP_TS_GetState+0x244>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <BSP_TS_GetState+0x240>)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269e:	b299      	uxth	r1, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	460a      	mov	r2, r1
 80026aa:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80026ac:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <BSP_TS_GetState+0x244>)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	b299      	uxth	r1, r3
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	460a      	mov	r2, r1
 80026c0:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4293      	cmp	r3, r2
 80026d2:	f4ff af05 	bcc.w	80024e0 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80026d6:	7efb      	ldrb	r3, [r7, #27]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3724      	adds	r7, #36	; 0x24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd90      	pop	{r4, r7, pc}
 80026e0:	20000274 	.word	0x20000274
 80026e4:	20000279 	.word	0x20000279
 80026e8:	20000278 	.word	0x20000278
 80026ec:	2000027c 	.word	0x2000027c
 80026f0:	20000284 	.word	0x20000284

080026f4 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <BSP_TS_INT_MspInit+0x44>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <BSP_TS_INT_MspInit+0x44>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <BSP_TS_INT_MspInit+0x44>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 8002712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002716:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800271c:	2301      	movs	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4804      	ldr	r0, [pc, #16]	; (800273c <BSP_TS_INT_MspInit+0x48>)
 800272a:	f002 f9af 	bl	8004a8c <HAL_GPIO_Init>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 fc8b 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274a:	2000      	movs	r0, #0
 800274c:	f000 f806 	bl	800275c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002750:	f008 fb7c 	bl	800ae4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x54>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x58>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002772:	fbb3 f3f1 	udiv	r3, r3, r1
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fca5 	bl	80030ca <HAL_SYSTICK_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e00e      	b.n	80027a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d80a      	bhi.n	80027a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 fc6d 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <HAL_InitTick+0x5c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	2000005c 	.word	0x2000005c
 80027b4:	20000058 	.word	0x20000058
 80027b8:	20000054 	.word	0x20000054

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000058 	.word	0x20000058
 80027e0:	200003f4 	.word	0x200003f4

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200003f4 	.word	0x200003f4

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff ffee 	bl	80027e4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d005      	beq.n	8002822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_Delay+0x40>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002822:	bf00      	nop
 8002824:	f7ff ffde 	bl	80027e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	d8f7      	bhi.n	8002824 <HAL_Delay+0x28>
  {
  }
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000058 	.word	0x20000058

08002840 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e031      	b.n	80028ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f008 fb18 	bl	800ae94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_ADC_Init+0x84>)
 8002884:	4013      	ands	r3, r2
 8002886:	f043 0202 	orr.w	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa1c 	bl	8002ccc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
 80028aa:	e001      	b.n	80028b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	ffffeefd 	.word	0xffffeefd

080028c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Start+0x1a>
 80028de:	2302      	movs	r3, #2
 80028e0:	e0a0      	b.n	8002a24 <HAL_ADC_Start+0x15c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d018      	beq.n	800292a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_ADC_Start+0x168>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a49      	ldr	r2, [pc, #292]	; (8002a34 <HAL_ADC_Start+0x16c>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0c9a      	lsrs	r2, r3, #18
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800291c:	e002      	b.n	8002924 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3b01      	subs	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f9      	bne.n	800291e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d174      	bne.n	8002a22 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <HAL_ADC_Start+0x170>)
 800293e:	4013      	ands	r3, r2
 8002940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800295e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d106      	bne.n	8002982 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f023 0206 	bic.w	r2, r3, #6
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
 8002980:	e002      	b.n	8002988 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002998:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_ADC_Start+0x174>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d136      	bne.n	8002a22 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e02d      	b.n	8002a22 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_ADC_Start+0x178>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d10e      	bne.n	80029ee <HAL_ADC_Start+0x126>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ec:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_ADC_Start+0x174>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d113      	bne.n	8002a22 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <HAL_ADC_Start+0x17c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10e      	bne.n	8002a22 <HAL_ADC_Start+0x15a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d107      	bne.n	8002a22 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a20:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	2000005c 	.word	0x2000005c
 8002a34:	431bde83 	.word	0x431bde83
 8002a38:	fffff8fe 	.word	0xfffff8fe
 8002a3c:	40012300 	.word	0x40012300
 8002a40:	40012000 	.word	0x40012000
 8002a44:	40012200 	.word	0x40012200

08002a48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1c>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e115      	b.n	8002cac <HAL_ADC_ConfigChannel+0x248>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	d935      	bls.n	8002afc <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68d9      	ldr	r1, [r3, #12]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b1e      	subs	r3, #30
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43da      	mvns	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a7f      	ldr	r2, [pc, #508]	; (8002cb8 <HAL_ADC_ConfigChannel+0x254>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10a      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68d9      	ldr	r1, [r3, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	061a      	lsls	r2, r3, #24
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	e035      	b.n	8002b42 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68d9      	ldr	r1, [r3, #12]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	4603      	mov	r3, r0
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4403      	add	r3, r0
 8002aee:	3b1e      	subs	r3, #30
 8002af0:	409a      	lsls	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	e022      	b.n	8002b42 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6919      	ldr	r1, [r3, #16]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	2207      	movs	r2, #7
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6919      	ldr	r1, [r3, #16]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4403      	add	r3, r0
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d824      	bhi.n	8002b94 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b05      	subs	r3, #5
 8002b5c:	221f      	movs	r2, #31
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b05      	subs	r3, #5
 8002b86:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
 8002b92:	e04c      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d824      	bhi.n	8002be6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	3b23      	subs	r3, #35	; 0x23
 8002bae:	221f      	movs	r2, #31
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	400a      	ands	r2, r1
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b23      	subs	r3, #35	; 0x23
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
 8002be4:	e023      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b41      	subs	r3, #65	; 0x41
 8002bf8:	221f      	movs	r2, #31
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	400a      	ands	r2, r1
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	3b41      	subs	r3, #65	; 0x41
 8002c22:	fa00 f203 	lsl.w	r2, r0, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_ADC_ConfigChannel+0x258>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1e8>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d105      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c4a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_ADC_ConfigChannel+0x258>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d125      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x23e>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <HAL_ADC_ConfigChannel+0x254>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x204>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b11      	cmp	r3, #17
 8002c66:	d11c      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <HAL_ADC_ConfigChannel+0x25c>)
 8002c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c72:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_ADC_ConfigChannel+0x254>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d111      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_ADC_ConfigChannel+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_ADC_ConfigChannel+0x264>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	0c9a      	lsrs	r2, r3, #18
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c94:	e002      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f9      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	10000012 	.word	0x10000012
 8002cbc:	40012000 	.word	0x40012000
 8002cc0:	40012300 	.word	0x40012300
 8002cc4:	2000005c 	.word	0x2000005c
 8002cc8:	431bde83 	.word	0x431bde83

08002ccc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd4:	4b78      	ldr	r3, [pc, #480]	; (8002eb8 <ADC_Init+0x1ec>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a77      	ldr	r2, [pc, #476]	; (8002eb8 <ADC_Init+0x1ec>)
 8002cda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cde:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ce0:	4b75      	ldr	r3, [pc, #468]	; (8002eb8 <ADC_Init+0x1ec>)
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4973      	ldr	r1, [pc, #460]	; (8002eb8 <ADC_Init+0x1ec>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	021a      	lsls	r2, r3, #8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6899      	ldr	r1, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	4a58      	ldr	r2, [pc, #352]	; (8002ebc <ADC_Init+0x1f0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e00f      	b.n	8002dc6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0202 	bic.w	r2, r2, #2
 8002dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	005a      	lsls	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	035a      	lsls	r2, r3, #13
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	e007      	b.n	8002e3c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	051a      	lsls	r2, r3, #20
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7e:	025a      	lsls	r2, r3, #9
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	029a      	lsls	r2, r3, #10
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40012300 	.word	0x40012300
 8002ebc:	0f000001 	.word	0x0f000001

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00
 8002f04:	05fa0000 	.word	0x05fa0000

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	; (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	; (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff3e 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff31 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa2 	bl	800301c <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff fb78 	bl	80027e4 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e099      	b.n	8003234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003120:	e00f      	b.n	8003142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003122:	f7ff fb5f 	bl	80027e4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b05      	cmp	r3, #5
 800312e:	d908      	bls.n	8003142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e078      	b.n	8003234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e8      	bne.n	8003122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4b38      	ldr	r3, [pc, #224]	; (800323c <HAL_DMA_Init+0x158>)
 800315c:	4013      	ands	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0307 	bic.w	r3, r3, #7
 80031c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d117      	bne.n	8003206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8bd 	bl	8003368 <DMA_CheckFifoParam>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003202:	2301      	movs	r3, #1
 8003204:	e016      	b.n	8003234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f874 	bl	80032fc <DMA_CalcBaseAndBitshift>
 8003214:	4603      	mov	r3, r0
 8003216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	223f      	movs	r2, #63	; 0x3f
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	e010803f 	.word	0xe010803f

08003240 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e050      	b.n	80032f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d101      	bne.n	8003262 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e048      	b.n	80032f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2221      	movs	r2, #33	; 0x21
 80032a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f82a 	bl	80032fc <DMA_CalcBaseAndBitshift>
 80032a8:	4603      	mov	r3, r0
 80032aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	223f      	movs	r2, #63	; 0x3f
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3b10      	subs	r3, #16
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <DMA_CalcBaseAndBitshift+0x60>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <DMA_CalcBaseAndBitshift+0x64>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d908      	bls.n	800333c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <DMA_CalcBaseAndBitshift+0x68>)
 8003332:	4013      	ands	r3, r2
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	; 0x58
 800333a:	e006      	b.n	800334a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <DMA_CalcBaseAndBitshift+0x68>)
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	aaaaaaab 	.word	0xaaaaaaab
 8003360:	0800d760 	.word	0x0800d760
 8003364:	fffffc00 	.word	0xfffffc00

08003368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d855      	bhi.n	8003434 <DMA_CheckFifoParam+0xcc>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <DMA_CheckFifoParam+0x28>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033b3 	.word	0x080033b3
 8003398:	080033a1 	.word	0x080033a1
 800339c:	08003435 	.word	0x08003435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d045      	beq.n	8003438 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b0:	e042      	b.n	8003438 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ba:	d13f      	bne.n	800343c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e03c      	b.n	800343c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	d121      	bne.n	8003410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d836      	bhi.n	8003440 <DMA_CheckFifoParam+0xd8>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <DMA_CheckFifoParam+0x70>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033ef 	.word	0x080033ef
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	08003401 	.word	0x08003401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e02f      	b.n	800344e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d024      	beq.n	8003444 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fe:	e021      	b.n	8003444 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003408:	d11e      	bne.n	8003448 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340e:	e01b      	b.n	8003448 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d902      	bls.n	800341c <DMA_CheckFifoParam+0xb4>
 8003416:	2b03      	cmp	r3, #3
 8003418:	d003      	beq.n	8003422 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800341a:	e018      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e015      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
      break;
 8003432:	e00b      	b.n	800344c <DMA_CheckFifoParam+0xe4>
      break;
 8003434:	bf00      	nop
 8003436:	e00a      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 8003438:	bf00      	nop
 800343a:	e008      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 800343c:	bf00      	nop
 800343e:	e006      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 8003440:	bf00      	nop
 8003442:	e004      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 8003444:	bf00      	nop
 8003446:	e002      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;   
 8003448:	bf00      	nop
 800344a:	e000      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 800344c:	bf00      	nop
    }
  } 
  
  return status; 
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e049      	b.n	8003502 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f007 fd26 	bl	800aed4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ac:	f023 0107 	bic.w	r1, r3, #7
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_DMA2D_Init+0xb0>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68d1      	ldr	r1, [r2, #12]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	051a      	lsls	r2, r3, #20
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	055b      	lsls	r3, r3, #21
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	ffffc000 	.word	0xffffc000

08003510 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_DMA2D_Start+0x1c>
 8003528:	2302      	movs	r3, #2
 800352a:	e018      	b.n	800355e <HAL_DMA2D_Start+0x4e>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f994 	bl	8003874 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d056      	beq.n	8003630 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003582:	f7ff f92f 	bl	80027e4 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003588:	e04b      	b.n	8003622 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003598:	2b00      	cmp	r3, #0
 800359a:	d023      	beq.n	80035e4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0202 	orr.w	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2221      	movs	r2, #33	; 0x21
 80035ce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2204      	movs	r2, #4
 80035d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0a5      	b.n	8003730 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d01a      	beq.n	8003622 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80035ec:	f7ff f8fa 	bl	80027e4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <HAL_DMA2D_PollForTransfer+0x9c>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2203      	movs	r2, #3
 8003612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e086      	b.n	8003730 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ac      	beq.n	800358a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d061      	beq.n	8003716 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003652:	f7ff f8c7 	bl	80027e4 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003658:	e056      	b.n	8003708 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003668:	2b00      	cmp	r3, #0
 800366a:	d02e      	beq.n	80036ca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	f043 0202 	orr.w	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2229      	movs	r2, #41	; 0x29
 80036b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e032      	b.n	8003730 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d01a      	beq.n	8003708 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80036d2:	f7ff f887 	bl	80027e4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <HAL_DMA2D_PollForTransfer+0x182>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2203      	movs	r2, #3
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e013      	b.n	8003730 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0a1      	beq.n	800365a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2212      	movs	r2, #18
 800371c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_DMA2D_ConfigLayer+0x20>
 8003754:	2302      	movs	r3, #2
 8003756:	e084      	b.n	8003862 <HAL_DMA2D_ConfigLayer+0x12a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	3320      	adds	r3, #32
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800378c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <HAL_DMA2D_ConfigLayer+0x138>)
 800379a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b0a      	cmp	r3, #10
 80037a2:	d003      	beq.n	80037ac <HAL_DMA2D_ConfigLayer+0x74>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b09      	cmp	r3, #9
 80037aa:	d107      	bne.n	80037bc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e005      	b.n	80037c8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d120      	bne.n	8003810 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	ea02 0103 	and.w	r1, r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b0a      	cmp	r3, #10
 80037f6:	d003      	beq.n	8003800 <HAL_DMA2D_ConfigLayer+0xc8>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b09      	cmp	r3, #9
 80037fe:	d127      	bne.n	8003850 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
 800380e:	e01f      	b.n	8003850 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	43db      	mvns	r3, r3
 800381a:	ea02 0103 	and.w	r1, r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	430a      	orrs	r2, r1
 8003826:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b0a      	cmp	r3, #10
 8003838:	d003      	beq.n	8003842 <HAL_DMA2D_ConfigLayer+0x10a>
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b09      	cmp	r3, #9
 8003840:	d106      	bne.n	8003850 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800384e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	ff33000f 	.word	0xff33000f

08003874 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003874:	b480      	push	{r7}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	041a      	lsls	r2, r3, #16
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	431a      	orrs	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ac:	d174      	bne.n	8003998 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80038b4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038bc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038c4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d108      	bne.n	80038e6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	431a      	orrs	r2, r3
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	4313      	orrs	r3, r2
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
 80038e4:	e053      	b.n	800398e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d106      	bne.n	80038fc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e048      	b.n	800398e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d111      	bne.n	8003928 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	0cdb      	lsrs	r3, r3, #19
 8003908:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	0a9b      	lsrs	r3, r3, #10
 800390e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	08db      	lsrs	r3, r3, #3
 8003914:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	02db      	lsls	r3, r3, #11
 800391e:	4313      	orrs	r3, r2
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	e032      	b.n	800398e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d117      	bne.n	8003960 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	0fdb      	lsrs	r3, r3, #31
 8003934:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	0cdb      	lsrs	r3, r3, #19
 800393a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	0adb      	lsrs	r3, r3, #11
 8003940:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	431a      	orrs	r2, r3
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	03db      	lsls	r3, r3, #15
 8003956:	4313      	orrs	r3, r2
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	e016      	b.n	800398e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	0f1b      	lsrs	r3, r3, #28
 8003964:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	0d1b      	lsrs	r3, r3, #20
 800396a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	0b1b      	lsrs	r3, r3, #12
 8003970:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	011a      	lsls	r2, r3, #4
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	431a      	orrs	r2, r3
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	031b      	lsls	r3, r3, #12
 8003986:	4313      	orrs	r3, r2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003994:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003996:	e003      	b.n	80039a0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	60da      	str	r2, [r3, #12]
}
 80039a0:	bf00      	nop
 80039a2:	372c      	adds	r7, #44	; 0x2c
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	019a      	lsls	r2, r3, #6
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	431a      	orrs	r2, r3
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ec:	f7fe fefa 	bl	80027e4 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80039f2:	e009      	b.n	8003a08 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80039f4:	f7fe fef6 	bl	80027e4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a02:	d901      	bls.n	8003a08 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e015      	b.n	8003a34 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ee      	beq.n	80039f4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	019a      	lsls	r2, r3, #6
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	ea42 0103 	orr.w	r1, r2, r3
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	041a      	lsls	r2, r3, #16
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e106      	b.n	8003c5e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7c5b      	ldrb	r3, [r3, #17]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f007 fa5a 	bl	800af14 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2203      	movs	r2, #3
 8003a64:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003a7a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8e:	f7fe fea9 	bl	80027e4 <HAL_GetTick>
 8003a92:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003a94:	e009      	b.n	8003aaa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003a96:	f7fe fea5 	bl	80027e4 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa4:	d901      	bls.n	8003aaa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0d9      	b.n	8003c5e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ed      	beq.n	8003a96 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <HAL_DSI_Init+0x22c>)
 8003ac8:	400b      	ands	r3, r1
 8003aca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	009a      	lsls	r2, r3, #2
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	02db      	lsls	r3, r3, #11
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b1e:	f7fe fe61 	bl	80027e4 <HAL_GetTick>
 8003b22:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003b24:	e009      	b.n	8003b3a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b26:	f7fe fe5d 	bl	80027e4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b34:	d901      	bls.n	8003b3a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e091      	b.n	8003c5e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0ed      	beq.n	8003b26 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0206 	orr.w	r2, r2, #6
 8003b5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0203 	bic.w	r2, r2, #3
 8003b6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0203 	bic.w	r2, r2, #3
 8003b9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bc4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_DSI_Init+0x1aa>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	e000      	b.n	8003be8 <HAL_DSI_Init+0x1ac>
 8003be6:	2301      	movs	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <HAL_DSI_Init+0x230>)
 8003bee:	fb02 f203 	mul.w	r2, r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003c1e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	fffc8603 	.word	0xfffc8603
 8003c6c:	003d0900 	.word	0x003d0900

08003c70 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e066      	b.n	8003d50 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2203      	movs	r2, #3
 8003c86:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0208 	bic.w	r2, r2, #8
 8003c9c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	605a      	str	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0206 	bic.w	r2, r2, #6
 8003ce2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003d22:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f007 f930 	bl	800af9c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7c1b      	ldrb	r3, [r3, #16]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_DSI_ConfigErrorMonitor+0x16>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0aa      	b.n	8003ec4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003da8:	430b      	orrs	r3, r1
 8003daa:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d009      	beq.n	8003dcc <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003dc8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0202 	orr.w	r2, r2, #2
 8003e04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 020c 	orr.w	r2, r2, #12
 8003e22:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0210 	orr.w	r2, r2, #16
 8003e40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003eb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7c1b      	ldrb	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_DSI_SetGenericVCID+0x16>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e016      	b.n	8003f14 <HAL_DSI_SetGenericVCID+0x44>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0203 	bic.w	r2, r2, #3
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7c1b      	ldrb	r3, [r3, #16]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_DSI_ConfigVideoMode+0x16>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e1ee      	b.n	8004314 <HAL_DSI_ConfigVideoMode+0x3f4>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0203 	bic.w	r2, r2, #3
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b8b      	ldr	r3, [pc, #556]	; (80041bc <HAL_DSI_ConfigVideoMode+0x29c>)
 8003f8e:	400b      	ands	r3, r1
 8003f90:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0203 	bic.w	r2, r2, #3
 8003ff6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68d9      	ldr	r1, [r3, #12]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0207 	bic.w	r2, r2, #7
 8004018:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6959      	ldr	r1, [r3, #20]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	431a      	orrs	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 020f 	bic.w	r2, r2, #15
 8004046:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6919      	ldr	r1, [r3, #16]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 020e 	bic.w	r2, r2, #14
 800406a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	005a      	lsls	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d110      	bne.n	80040b0 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800409c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6919      	ldr	r1, [r3, #16]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80040bc:	400b      	ands	r3, r1
 80040be:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80040de:	400b      	ands	r3, r1
 80040e0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b32      	ldr	r3, [pc, #200]	; (80041c8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004100:	400b      	ands	r3, r1
 8004102:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004122:	400b      	ands	r3, r1
 8004124:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004144:	400b      	ands	r3, r1
 8004146:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004166:	400b      	ands	r3, r1
 8004168:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_DSI_ConfigVideoMode+0x29c>)
 8004188:	400b      	ands	r3, r1
 800418a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b8:	e00a      	b.n	80041d0 <HAL_DSI_ConfigVideoMode+0x2b0>
 80041ba:	bf00      	nop
 80041bc:	ffffc000 	.word	0xffffc000
 80041c0:	ffffe000 	.word	0xffffe000
 80041c4:	fffff000 	.word	0xfffff000
 80041c8:	ffff8000 	.word	0xffff8000
 80041cc:	fffffc00 	.word	0xfffffc00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80041e6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	041a      	lsls	r2, r3, #16
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800420a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7c1b      	ldrb	r3, [r3, #16]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004332:	2302      	movs	r3, #2
 8004334:	e0c5      	b.n	80044c2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0203 	bic.w	r2, r2, #3
 8004382:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0207 	bic.w	r2, r2, #7
 80043a4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6959      	ldr	r1, [r3, #20]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 020f 	bic.w	r2, r2, #15
 80043d2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6919      	ldr	r1, [r3, #16]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 020e 	bic.w	r2, r2, #14
 80043f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	005a      	lsls	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800441e:	400b      	ands	r3, r1
 8004420:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004444:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	431a      	orrs	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0202 	orr.w	r2, r2, #2
 80044b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	ffff0000 	.word	0xffff0000

080044d4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7c1b      	ldrb	r3, [r3, #16]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_DSI_ConfigCommand+0x16>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e049      	b.n	800457e <HAL_DSI_ConfigCommand+0xaa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_DSI_ConfigCommand+0xb8>)
 80044fc:	400b      	ands	r3, r1
 80044fe:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800450e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004514:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800451a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004520:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004526:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800452c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004532:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004538:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800453e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004544:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800454a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0202 	bic.w	r2, r2, #2
 8004562:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	fef080ff 	.word	0xfef080ff

08004590 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7c1b      	ldrb	r3, [r3, #16]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_DSI_ConfigFlowControl+0x16>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e016      	b.n	80045d4 <HAL_DSI_ConfigFlowControl+0x44>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 021f 	bic.w	r2, r2, #31
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7c1b      	ldrb	r3, [r3, #16]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_DSI_ConfigPhyTimer+0x16>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e058      	b.n	80046a8 <HAL_DSI_ConfigPhyTimer+0xc8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4293      	cmp	r3, r2
 8004606:	bf38      	it	cc
 8004608:	4613      	movcc	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800461c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	041a      	lsls	r2, r3, #16
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800464a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004684:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	021a      	lsls	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7c1b      	ldrb	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_DSI_ConfigHostTimeouts+0x16>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0b4      	b.n	8004834 <HAL_DSI_ConfigHostTimeouts+0x180>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80046de:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	021a      	lsls	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	b292      	uxth	r2, r2
 8004700:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	041a      	lsls	r2, r3, #16
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004722:	400b      	ands	r3, r1
 8004724:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004744:	400b      	ands	r3, r1
 8004746:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004768:	400b      	ands	r3, r1
 800476a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004792:	400b      	ands	r3, r1
 8004794:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80047be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80047e6:	400b      	ands	r3, r1
 80047e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004810:	400b      	ands	r3, r1
 8004812:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	ffff0000 	.word	0xffff0000

08004844 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7c1b      	ldrb	r3, [r3, #16]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_DSI_Start+0x14>
 8004854:	2302      	movs	r3, #2
 8004856:	e02b      	b.n	80048b0 <HAL_DSI_Start+0x6c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0208 	orr.w	r2, r2, #8
 8004894:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	7c1b      	ldrb	r3, [r3, #16]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_DSI_ShortWrite+0x1a>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e010      	b.n	80048f8 <HAL_DSI_ShortWrite+0x3c>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff f879 	bl	80039de <DSI_ShortWrite>
 80048ec:	4603      	mov	r3, r0
 80048ee:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	741a      	strb	r2, [r3, #16]

  return status;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08c      	sub	sp, #48	; 0x30
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800490e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004910:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	7c1b      	ldrb	r3, [r3, #16]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_DSI_LongWrite+0x1e>
 800491a:	2302      	movs	r3, #2
 800491c:	e084      	b.n	8004a28 <HAL_DSI_LongWrite+0x128>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004924:	f7fd ff5e 	bl	80027e4 <HAL_GetTick>
 8004928:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800492a:	e00c      	b.n	8004946 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800492c:	f7fd ff5a 	bl	80027e4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493a:	d904      	bls.n	8004946 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e070      	b.n	8004a28 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0eb      	beq.n	800492c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b03      	cmp	r3, #3
 800495c:	bf28      	it	cs
 800495e:	2303      	movcs	r3, #3
 8004960:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004962:	2300      	movs	r3, #0
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	e00f      	b.n	8004988 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	3301      	adds	r3, #1
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	4313      	orrs	r3, r2
 8004980:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	3301      	adds	r3, #1
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	429a      	cmp	r2, r3
 800498e:	d3eb      	bcc.n	8004968 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80049a8:	e028      	b.n	80049fc <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	bf28      	it	cs
 80049b0:	2304      	movcs	r3, #4
 80049b2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	e00e      	b.n	80049dc <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	3301      	adds	r3, #1
 80049da:	623b      	str	r3, [r7, #32]
 80049dc:	6a3a      	ldr	r2, [r7, #32]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d3ec      	bcc.n	80049be <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1d3      	bne.n	80049aa <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004a0a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	f7fe ffc6 	bl	80039ac <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	; 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	7c1b      	ldrb	r3, [r3, #16]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e01b      	b.n	8004a7e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004a5c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	065a      	lsls	r2, r3, #25
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e175      	b.n	8004d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004aac:	2201      	movs	r2, #1
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	f040 8164 	bne.w	8004d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_Init+0x4e>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b12      	cmp	r3, #18
 8004ad8:	d123      	bne.n	8004b22 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	08da      	lsrs	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3208      	adds	r2, #8
 8004ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	220f      	movs	r2, #15
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	08da      	lsrs	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3208      	adds	r2, #8
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 0203 	and.w	r2, r3, #3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d00b      	beq.n	8004b76 <HAL_GPIO_Init+0xea>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b6a:	2b11      	cmp	r3, #17
 8004b6c:	d003      	beq.n	8004b76 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b12      	cmp	r3, #18
 8004b74:	d130      	bne.n	8004bd8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bac:	2201      	movs	r2, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 0201 	and.w	r2, r3, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80be 	beq.w	8004d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c16:	4b65      	ldr	r3, [pc, #404]	; (8004dac <HAL_GPIO_Init+0x320>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	4a64      	ldr	r2, [pc, #400]	; (8004dac <HAL_GPIO_Init+0x320>)
 8004c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c20:	6453      	str	r3, [r2, #68]	; 0x44
 8004c22:	4b62      	ldr	r3, [pc, #392]	; (8004dac <HAL_GPIO_Init+0x320>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c2e:	4a60      	ldr	r2, [pc, #384]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	089b      	lsrs	r3, r3, #2
 8004c34:	3302      	adds	r3, #2
 8004c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	220f      	movs	r2, #15
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a57      	ldr	r2, [pc, #348]	; (8004db4 <HAL_GPIO_Init+0x328>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d037      	beq.n	8004cca <HAL_GPIO_Init+0x23e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a56      	ldr	r2, [pc, #344]	; (8004db8 <HAL_GPIO_Init+0x32c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d031      	beq.n	8004cc6 <HAL_GPIO_Init+0x23a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a55      	ldr	r2, [pc, #340]	; (8004dbc <HAL_GPIO_Init+0x330>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d02b      	beq.n	8004cc2 <HAL_GPIO_Init+0x236>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a54      	ldr	r2, [pc, #336]	; (8004dc0 <HAL_GPIO_Init+0x334>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d025      	beq.n	8004cbe <HAL_GPIO_Init+0x232>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a53      	ldr	r2, [pc, #332]	; (8004dc4 <HAL_GPIO_Init+0x338>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <HAL_GPIO_Init+0x22e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_GPIO_Init+0x33c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d019      	beq.n	8004cb6 <HAL_GPIO_Init+0x22a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a51      	ldr	r2, [pc, #324]	; (8004dcc <HAL_GPIO_Init+0x340>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_GPIO_Init+0x226>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a50      	ldr	r2, [pc, #320]	; (8004dd0 <HAL_GPIO_Init+0x344>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00d      	beq.n	8004cae <HAL_GPIO_Init+0x222>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a4f      	ldr	r2, [pc, #316]	; (8004dd4 <HAL_GPIO_Init+0x348>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <HAL_GPIO_Init+0x21e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a4e      	ldr	r2, [pc, #312]	; (8004dd8 <HAL_GPIO_Init+0x34c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_GPIO_Init+0x21a>
 8004ca2:	2309      	movs	r3, #9
 8004ca4:	e012      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	e010      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004caa:	2308      	movs	r3, #8
 8004cac:	e00e      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cae:	2307      	movs	r3, #7
 8004cb0:	e00c      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	e00a      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cb6:	2305      	movs	r3, #5
 8004cb8:	e008      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cba:	2304      	movs	r3, #4
 8004cbc:	e006      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e004      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e002      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_GPIO_Init+0x240>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	f002 0203 	and.w	r2, r2, #3
 8004cd2:	0092      	lsls	r2, r2, #2
 8004cd4:	4093      	lsls	r3, r2
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004cdc:	4934      	ldr	r1, [pc, #208]	; (8004db0 <HAL_GPIO_Init+0x324>)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cea:	4b3c      	ldr	r3, [pc, #240]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d0e:	4a33      	ldr	r2, [pc, #204]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d14:	4b31      	ldr	r3, [pc, #196]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d3e:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d68:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d8c:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <HAL_GPIO_Init+0x350>)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3301      	adds	r3, #1
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b0f      	cmp	r3, #15
 8004d9c:	f67f ae86 	bls.w	8004aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004da0:	bf00      	nop
 8004da2:	3724      	adds	r7, #36	; 0x24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40013800 	.word	0x40013800
 8004db4:	40020000 	.word	0x40020000
 8004db8:	40020400 	.word	0x40020400
 8004dbc:	40020800 	.word	0x40020800
 8004dc0:	40020c00 	.word	0x40020c00
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40021400 	.word	0x40021400
 8004dcc:	40021800 	.word	0x40021800
 8004dd0:	40021c00 	.word	0x40021c00
 8004dd4:	40022000 	.word	0x40022000
 8004dd8:	40022400 	.word	0x40022400
 8004ddc:	40013c00 	.word	0x40013c00

08004de0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e0d9      	b.n	8004fb0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	f040 80c9 	bne.w	8004faa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004e18:	4a6a      	ldr	r2, [pc, #424]	; (8004fc4 <HAL_GPIO_DeInit+0x1e4>)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a62      	ldr	r2, [pc, #392]	; (8004fc8 <HAL_GPIO_DeInit+0x1e8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d037      	beq.n	8004eb2 <HAL_GPIO_DeInit+0xd2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a61      	ldr	r2, [pc, #388]	; (8004fcc <HAL_GPIO_DeInit+0x1ec>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d031      	beq.n	8004eae <HAL_GPIO_DeInit+0xce>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a60      	ldr	r2, [pc, #384]	; (8004fd0 <HAL_GPIO_DeInit+0x1f0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02b      	beq.n	8004eaa <HAL_GPIO_DeInit+0xca>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a5f      	ldr	r2, [pc, #380]	; (8004fd4 <HAL_GPIO_DeInit+0x1f4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d025      	beq.n	8004ea6 <HAL_GPIO_DeInit+0xc6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a5e      	ldr	r2, [pc, #376]	; (8004fd8 <HAL_GPIO_DeInit+0x1f8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01f      	beq.n	8004ea2 <HAL_GPIO_DeInit+0xc2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a5d      	ldr	r2, [pc, #372]	; (8004fdc <HAL_GPIO_DeInit+0x1fc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d019      	beq.n	8004e9e <HAL_GPIO_DeInit+0xbe>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a5c      	ldr	r2, [pc, #368]	; (8004fe0 <HAL_GPIO_DeInit+0x200>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <HAL_GPIO_DeInit+0xba>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a5b      	ldr	r2, [pc, #364]	; (8004fe4 <HAL_GPIO_DeInit+0x204>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00d      	beq.n	8004e96 <HAL_GPIO_DeInit+0xb6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a5a      	ldr	r2, [pc, #360]	; (8004fe8 <HAL_GPIO_DeInit+0x208>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <HAL_GPIO_DeInit+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a59      	ldr	r2, [pc, #356]	; (8004fec <HAL_GPIO_DeInit+0x20c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d101      	bne.n	8004e8e <HAL_GPIO_DeInit+0xae>
 8004e8a:	2309      	movs	r3, #9
 8004e8c:	e012      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004e8e:	230a      	movs	r3, #10
 8004e90:	e010      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004e92:	2308      	movs	r3, #8
 8004e94:	e00e      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004e96:	2307      	movs	r3, #7
 8004e98:	e00c      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004e9a:	2306      	movs	r3, #6
 8004e9c:	e00a      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004e9e:	2305      	movs	r3, #5
 8004ea0:	e008      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	e006      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e004      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e002      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_GPIO_DeInit+0xd4>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	f002 0203 	and.w	r2, r2, #3
 8004eba:	0092      	lsls	r2, r2, #2
 8004ebc:	4093      	lsls	r3, r2
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d132      	bne.n	8004f2a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	220f      	movs	r2, #15
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004ed4:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <HAL_GPIO_DeInit+0x1e4>)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	4837      	ldr	r0, [pc, #220]	; (8004fc4 <HAL_GPIO_DeInit+0x1e4>)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	089b      	lsrs	r3, r3, #2
 8004eea:	400a      	ands	r2, r1
 8004eec:	3302      	adds	r3, #2
 8004eee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ef2:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	493d      	ldr	r1, [pc, #244]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f00:	4b3b      	ldr	r3, [pc, #236]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	4939      	ldr	r1, [pc, #228]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004f0e:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	4936      	ldr	r1, [pc, #216]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f1c:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	4932      	ldr	r1, [pc, #200]	; (8004ff0 <HAL_GPIO_DeInit+0x210>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	2103      	movs	r1, #3
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	08da      	lsrs	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3208      	adds	r2, #8
 8004f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	220f      	movs	r2, #15
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	08d2      	lsrs	r2, r2, #3
 8004f60:	4019      	ands	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3208      	adds	r2, #8
 8004f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	2103      	movs	r1, #3
 8004f74:	fa01 f303 	lsl.w	r3, r1, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	2101      	movs	r1, #1
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	401a      	ands	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	2103      	movs	r1, #3
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	3301      	adds	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	f67f af22 	bls.w	8004dfc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	40013800 	.word	0x40013800
 8004fc8:	40020000 	.word	0x40020000
 8004fcc:	40020400 	.word	0x40020400
 8004fd0:	40020800 	.word	0x40020800
 8004fd4:	40020c00 	.word	0x40020c00
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40021400 	.word	0x40021400
 8004fe0:	40021800 	.word	0x40021800
 8004fe4:	40021c00 	.word	0x40021c00
 8004fe8:	40022000 	.word	0x40022000
 8004fec:	40022400 	.word	0x40022400
 8004ff0:	40013c00 	.word	0x40013c00

08004ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	e001      	b.n	8005016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	807b      	strh	r3, [r7, #2]
 8005030:	4613      	mov	r3, r2
 8005032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005034:	787b      	ldrb	r3, [r7, #1]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005040:	e003      	b.n	800504a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005042:	887b      	ldrh	r3, [r7, #2]
 8005044:	041a      	lsls	r2, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	619a      	str	r2, [r3, #24]
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	401a      	ands	r2, r3
 800506a:	887b      	ldrh	r3, [r7, #2]
 800506c:	429a      	cmp	r2, r3
 800506e:	d104      	bne.n	800507a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	041a      	lsls	r2, r3, #16
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005078:	e002      	b.n	8005080 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	619a      	str	r2, [r3, #24]
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005096:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050a2:	4a05      	ldr	r2, [pc, #20]	; (80050b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f004 fd60 	bl	8009b70 <HAL_GPIO_EXTI_Callback>
  }
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40013c00 	.word	0x40013c00

080050bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07f      	b.n	80051ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8a9 	bl	800523a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2224      	movs	r2, #36	; 0x24
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800510c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800511c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d107      	bne.n	8005136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	e006      	b.n	8005144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d104      	bne.n	8005156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b1d      	ldr	r3, [pc, #116]	; (80051d8 <HAL_I2C_Init+0x11c>)
 8005162:	430b      	orrs	r3, r1
 8005164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	ea42 0103 	orr.w	r1, r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	02008000 	.word	0x02008000

080051dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e021      	b.n	8005232 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2224      	movs	r2, #36	; 0x24
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f821 	bl	800524e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	4608      	mov	r0, r1
 800526e:	4611      	mov	r1, r2
 8005270:	461a      	mov	r2, r3
 8005272:	4603      	mov	r3, r0
 8005274:	817b      	strh	r3, [r7, #10]
 8005276:	460b      	mov	r3, r1
 8005278:	813b      	strh	r3, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b20      	cmp	r3, #32
 8005288:	f040 80f9 	bne.w	800547e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_I2C_Mem_Write+0x34>
 8005292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0ed      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_I2C_Mem_Write+0x4e>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e0e6      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052ba:	f7fd fa93 	bl	80027e4 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	2319      	movs	r3, #25
 80052c6:	2201      	movs	r2, #1
 80052c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fad1 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0d1      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2221      	movs	r2, #33	; 0x21
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a3a      	ldr	r2, [r7, #32]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005304:	88f8      	ldrh	r0, [r7, #6]
 8005306:	893a      	ldrh	r2, [r7, #8]
 8005308:	8979      	ldrh	r1, [r7, #10]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	4603      	mov	r3, r0
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f9e1 	bl	80056dc <I2C_RequestMemoryWrite>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0a9      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2bff      	cmp	r3, #255	; 0xff
 8005334:	d90e      	bls.n	8005354 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	22ff      	movs	r2, #255	; 0xff
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	b2da      	uxtb	r2, r3
 8005342:	8979      	ldrh	r1, [r7, #10]
 8005344:	2300      	movs	r3, #0
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fbb3 	bl	8005ab8 <I2C_TransferConfig>
 8005352:	e00f      	b.n	8005374 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	b2da      	uxtb	r2, r3
 8005364:	8979      	ldrh	r1, [r7, #10]
 8005366:	2300      	movs	r3, #0
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fba2 	bl	8005ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fabb 	bl	80058f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e07b      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d034      	beq.n	800542c <HAL_I2C_Mem_Write+0x1c8>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d130      	bne.n	800542c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2200      	movs	r2, #0
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fa4d 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e04d      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2bff      	cmp	r3, #255	; 0xff
 80053ec:	d90e      	bls.n	800540c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	22ff      	movs	r2, #255	; 0xff
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	8979      	ldrh	r1, [r7, #10]
 80053fc:	2300      	movs	r3, #0
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fb57 	bl	8005ab8 <I2C_TransferConfig>
 800540a:	e00f      	b.n	800542c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	b2da      	uxtb	r2, r3
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	2300      	movs	r3, #0
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fb46 	bl	8005ab8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d19e      	bne.n	8005374 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fa9a 	bl	8005974 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01a      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2220      	movs	r2, #32
 8005450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <HAL_I2C_Mem_Write+0x224>)
 800545e:	400b      	ands	r3, r1
 8005460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	fe00e800 	.word	0xfe00e800

0800548c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	4608      	mov	r0, r1
 8005496:	4611      	mov	r1, r2
 8005498:	461a      	mov	r2, r3
 800549a:	4603      	mov	r3, r0
 800549c:	817b      	strh	r3, [r7, #10]
 800549e:	460b      	mov	r3, r1
 80054a0:	813b      	strh	r3, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	f040 80fd 	bne.w	80056ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_I2C_Mem_Read+0x34>
 80054ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0f1      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_I2C_Mem_Read+0x4e>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e0ea      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054e2:	f7fd f97f 	bl	80027e4 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	2319      	movs	r3, #25
 80054ee:	2201      	movs	r2, #1
 80054f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f9bd 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0d5      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2222      	movs	r2, #34	; 0x22
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800552c:	88f8      	ldrh	r0, [r7, #6]
 800552e:	893a      	ldrh	r2, [r7, #8]
 8005530:	8979      	ldrh	r1, [r7, #10]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	4603      	mov	r3, r0
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f921 	bl	8005784 <I2C_RequestMemoryRead>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0ad      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2bff      	cmp	r3, #255	; 0xff
 800555c:	d90e      	bls.n	800557c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	22ff      	movs	r2, #255	; 0xff
 8005562:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005568:	b2da      	uxtb	r2, r3
 800556a:	8979      	ldrh	r1, [r7, #10]
 800556c:	4b52      	ldr	r3, [pc, #328]	; (80056b8 <HAL_I2C_Mem_Read+0x22c>)
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fa9f 	bl	8005ab8 <I2C_TransferConfig>
 800557a:	e00f      	b.n	800559c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558a:	b2da      	uxtb	r2, r3
 800558c:	8979      	ldrh	r1, [r7, #10]
 800558e:	4b4a      	ldr	r3, [pc, #296]	; (80056b8 <HAL_I2C_Mem_Read+0x22c>)
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fa8e 	bl	8005ab8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	2200      	movs	r2, #0
 80055a4:	2104      	movs	r1, #4
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f964 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e07c      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d034      	beq.n	800565c <HAL_I2C_Mem_Read+0x1d0>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d130      	bne.n	800565c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	2200      	movs	r2, #0
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f935 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e04d      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	2bff      	cmp	r3, #255	; 0xff
 800561c:	d90e      	bls.n	800563c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	22ff      	movs	r2, #255	; 0xff
 8005622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	b2da      	uxtb	r2, r3
 800562a:	8979      	ldrh	r1, [r7, #10]
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 fa3f 	bl	8005ab8 <I2C_TransferConfig>
 800563a:	e00f      	b.n	800565c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	b2da      	uxtb	r2, r3
 800564c:	8979      	ldrh	r1, [r7, #10]
 800564e:	2300      	movs	r3, #0
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fa2e 	bl	8005ab8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d19a      	bne.n	800559c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f982 	bl	8005974 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e01a      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2220      	movs	r2, #32
 8005680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_I2C_Mem_Read+0x230>)
 800568e:	400b      	ands	r3, r1
 8005690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	80002400 	.word	0x80002400
 80056bc:	fe00e800 	.word	0xfe00e800

080056c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ce:	b2db      	uxtb	r3, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	461a      	mov	r2, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	817b      	strh	r3, [r7, #10]
 80056ee:	460b      	mov	r3, r1
 80056f0:	813b      	strh	r3, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	8979      	ldrh	r1, [r7, #10]
 80056fc:	4b20      	ldr	r3, [pc, #128]	; (8005780 <I2C_RequestMemoryWrite+0xa4>)
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f9d7 	bl	8005ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	69b9      	ldr	r1, [r7, #24]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f8f0 	bl	80058f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e02c      	b.n	8005778 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d105      	bne.n	8005730 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005724:	893b      	ldrh	r3, [r7, #8]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	629a      	str	r2, [r3, #40]	; 0x28
 800572e:	e015      	b.n	800575c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005730:	893b      	ldrh	r3, [r7, #8]
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	b29b      	uxth	r3, r3
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f8d6 	bl	80058f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e012      	b.n	8005778 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005752:	893b      	ldrh	r3, [r7, #8]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2200      	movs	r2, #0
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f884 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	80002000 	.word	0x80002000

08005784 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	4608      	mov	r0, r1
 800578e:	4611      	mov	r1, r2
 8005790:	461a      	mov	r2, r3
 8005792:	4603      	mov	r3, r0
 8005794:	817b      	strh	r3, [r7, #10]
 8005796:	460b      	mov	r3, r1
 8005798:	813b      	strh	r3, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	8979      	ldrh	r1, [r7, #10]
 80057a4:	4b20      	ldr	r3, [pc, #128]	; (8005828 <I2C_RequestMemoryRead+0xa4>)
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	2300      	movs	r3, #0
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f984 	bl	8005ab8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	69b9      	ldr	r1, [r7, #24]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f89d 	bl	80058f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e02c      	b.n	800581e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d105      	bne.n	80057d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ca:	893b      	ldrh	r3, [r7, #8]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28
 80057d4:	e015      	b.n	8005802 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	0a1b      	lsrs	r3, r3, #8
 80057da:	b29b      	uxth	r3, r3
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	69b9      	ldr	r1, [r7, #24]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f883 	bl	80058f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e012      	b.n	800581e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057f8:	893b      	ldrh	r3, [r7, #8]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2200      	movs	r2, #0
 800580a:	2140      	movs	r1, #64	; 0x40
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f831 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	80002000 	.word	0x80002000

0800582c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b02      	cmp	r3, #2
 8005840:	d103      	bne.n	800584a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b01      	cmp	r3, #1
 8005856:	d007      	beq.n	8005868 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	619a      	str	r2, [r3, #24]
  }
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005884:	e022      	b.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d01e      	beq.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588e:	f7fc ffa9 	bl	80027e4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d113      	bne.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e00f      	b.n	80058ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d0cd      	beq.n	8005886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005900:	e02c      	b.n	800595c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f870 	bl	80059ec <I2C_IsAcknowledgeFailed>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e02a      	b.n	800596c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d01e      	beq.n	800595c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fc ff61 	bl	80027e4 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d113      	bne.n	800595c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d1cb      	bne.n	8005902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005980:	e028      	b.n	80059d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f830 	bl	80059ec <I2C_IsAcknowledgeFailed>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e026      	b.n	80059e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fc ff25 	bl	80027e4 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d113      	bne.n	80059d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e007      	b.n	80059e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d1cf      	bne.n	8005982 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d151      	bne.n	8005aaa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a06:	e022      	b.n	8005a4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d01e      	beq.n	8005a4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a10:	f7fc fee8 	bl	80027e4 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <I2C_IsAcknowledgeFailed+0x3a>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d113      	bne.n	8005a4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	f043 0220 	orr.w	r2, r3, #32
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e02e      	b.n	8005aac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d1d5      	bne.n	8005a08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2210      	movs	r2, #16
 8005a62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fedd 	bl	800582c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6859      	ldr	r1, [r3, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <I2C_IsAcknowledgeFailed+0xc8>)
 8005a7e:	400b      	ands	r3, r1
 8005a80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	f043 0204 	orr.w	r2, r3, #4
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	fe00e800 	.word	0xfe00e800

08005ab8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	0d5b      	lsrs	r3, r3, #21
 8005ad4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <I2C_TransferConfig+0x58>)
 8005ada:	430b      	orrs	r3, r1
 8005adc:	43db      	mvns	r3, r3
 8005ade:	ea02 0103 	and.w	r1, r2, r3
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ae8:	7a7b      	ldrb	r3, [r7, #9]
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	03ff63ff 	.word	0x03ff63ff

08005b14 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0bf      	b.n	8005ca6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f005 fa4c 	bl	800afd8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6999      	ldr	r1, [r3, #24]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6899      	ldr	r1, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b4a      	ldr	r3, [pc, #296]	; (8005cb0 <HAL_LTDC_Init+0x19c>)
 8005b88:	400b      	ands	r3, r1
 8005b8a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6899      	ldr	r1, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68d9      	ldr	r1, [r3, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b3e      	ldr	r3, [pc, #248]	; (8005cb0 <HAL_LTDC_Init+0x19c>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68d9      	ldr	r1, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1a      	ldr	r2, [r3, #32]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6919      	ldr	r1, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b33      	ldr	r3, [pc, #204]	; (8005cb0 <HAL_LTDC_Init+0x19c>)
 8005be4:	400b      	ands	r3, r1
 8005be6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6919      	ldr	r1, [r3, #16]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6959      	ldr	r1, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b27      	ldr	r3, [pc, #156]	; (8005cb0 <HAL_LTDC_Init+0x19c>)
 8005c12:	400b      	ands	r3, r1
 8005c14:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6959      	ldr	r1, [r3, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0206 	orr.w	r2, r2, #6
 8005c82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	f000f800 	.word	0xf000f800

08005cb4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cb4:	b5b0      	push	{r4, r5, r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_LTDC_ConfigLayer+0x1a>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e02c      	b.n	8005d28 <HAL_LTDC_ConfigLayer+0x74>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2134      	movs	r1, #52	; 0x34
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f811 	bl	8005d30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2201      	movs	r2, #1
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bdb0      	pop	{r4, r5, r7, pc}

08005d30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4c:	4413      	add	r3, r2
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	01db      	lsls	r3, r3, #7
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3384      	adds	r3, #132	; 0x84
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	4611      	mov	r1, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	01d2      	lsls	r2, r2, #7
 8005d6c:	440a      	add	r2, r1
 8005d6e:	3284      	adds	r2, #132	; 0x84
 8005d70:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d86:	4413      	add	r3, r2
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	01db      	lsls	r3, r3, #7
 8005d94:	440b      	add	r3, r1
 8005d96:	3384      	adds	r3, #132	; 0x84
 8005d98:	4619      	mov	r1, r3
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dae:	4413      	add	r3, r2
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	01db      	lsls	r3, r3, #7
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3384      	adds	r3, #132	; 0x84
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	01d2      	lsls	r2, r2, #7
 8005dce:	440a      	add	r2, r1
 8005dd0:	3284      	adds	r2, #132	; 0x84
 8005dd2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005dd6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005de6:	4413      	add	r3, r2
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4619      	mov	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	01db      	lsls	r3, r3, #7
 8005df4:	440b      	add	r3, r1
 8005df6:	3384      	adds	r3, #132	; 0x84
 8005df8:	4619      	mov	r1, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	01db      	lsls	r3, r3, #7
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3384      	adds	r3, #132	; 0x84
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	4611      	mov	r1, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	01d2      	lsls	r2, r2, #7
 8005e1a:	440a      	add	r2, r1
 8005e1c:	3284      	adds	r2, #132	; 0x84
 8005e1e:	f023 0307 	bic.w	r3, r3, #7
 8005e22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	01db      	lsls	r3, r3, #7
 8005e2e:	4413      	add	r3, r2
 8005e30:	3384      	adds	r3, #132	; 0x84
 8005e32:	461a      	mov	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	061b      	lsls	r3, r3, #24
 8005e54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	01db      	lsls	r3, r3, #7
 8005e60:	4413      	add	r3, r2
 8005e62:	3384      	adds	r3, #132	; 0x84
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	01db      	lsls	r3, r3, #7
 8005e70:	4413      	add	r3, r2
 8005e72:	3384      	adds	r3, #132	; 0x84
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e80:	461a      	mov	r2, r3
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	01db      	lsls	r3, r3, #7
 8005e94:	440b      	add	r3, r1
 8005e96:	3384      	adds	r3, #132	; 0x84
 8005e98:	4619      	mov	r1, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	01db      	lsls	r3, r3, #7
 8005eaa:	4413      	add	r3, r2
 8005eac:	3384      	adds	r3, #132	; 0x84
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	01d2      	lsls	r2, r2, #7
 8005eba:	440a      	add	r2, r1
 8005ebc:	3284      	adds	r2, #132	; 0x84
 8005ebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ec2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	01db      	lsls	r3, r3, #7
 8005ece:	4413      	add	r3, r2
 8005ed0:	3384      	adds	r3, #132	; 0x84
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	01db      	lsls	r3, r3, #7
 8005ee4:	4413      	add	r3, r2
 8005ee6:	3384      	adds	r3, #132	; 0x84
 8005ee8:	69da      	ldr	r2, [r3, #28]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	01db      	lsls	r3, r3, #7
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3384      	adds	r3, #132	; 0x84
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4b58      	ldr	r3, [pc, #352]	; (800605c <LTDC_SetConfig+0x32c>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	68f9      	ldr	r1, [r7, #12]
 8005f0a:	6809      	ldr	r1, [r1, #0]
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	01c9      	lsls	r1, r1, #7
 8005f12:	4401      	add	r1, r0
 8005f14:	3184      	adds	r1, #132	; 0x84
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	01db      	lsls	r3, r3, #7
 8005f24:	4413      	add	r3, r2
 8005f26:	3384      	adds	r3, #132	; 0x84
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	01db      	lsls	r3, r3, #7
 8005f34:	4413      	add	r3, r2
 8005f36:	3384      	adds	r3, #132	; 0x84
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	01db      	lsls	r3, r3, #7
 8005f48:	4413      	add	r3, r2
 8005f4a:	3384      	adds	r3, #132	; 0x84
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	e01b      	b.n	8005f9a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d102      	bne.n	8005f70 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	e014      	b.n	8005f9a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d00b      	beq.n	8005f90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d007      	beq.n	8005f90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d003      	beq.n	8005f90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f8c:	2b07      	cmp	r3, #7
 8005f8e:	d102      	bne.n	8005f96 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005f90:	2302      	movs	r3, #2
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	e001      	b.n	8005f9a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005f96:	2301      	movs	r3, #1
 8005f98:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3384      	adds	r3, #132	; 0x84
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	01d2      	lsls	r2, r2, #7
 8005fb4:	440a      	add	r2, r1
 8005fb6:	3284      	adds	r2, #132	; 0x84
 8005fb8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	fb02 f303 	mul.w	r3, r2, r3
 8005fc8:	041a      	lsls	r2, r3, #16
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6859      	ldr	r1, [r3, #4]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1acb      	subs	r3, r1, r3
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	3303      	adds	r3, #3
 8005fdc:	68f9      	ldr	r1, [r7, #12]
 8005fde:	6809      	ldr	r1, [r1, #0]
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	01c9      	lsls	r1, r1, #7
 8005fe6:	4401      	add	r1, r0
 8005fe8:	3184      	adds	r1, #132	; 0x84
 8005fea:	4313      	orrs	r3, r2
 8005fec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3384      	adds	r3, #132	; 0x84
 8005ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	01db      	lsls	r3, r3, #7
 8006008:	440b      	add	r3, r1
 800600a:	3384      	adds	r3, #132	; 0x84
 800600c:	4619      	mov	r1, r3
 800600e:	4b14      	ldr	r3, [pc, #80]	; (8006060 <LTDC_SetConfig+0x330>)
 8006010:	4013      	ands	r3, r2
 8006012:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	01db      	lsls	r3, r3, #7
 800601e:	4413      	add	r3, r2
 8006020:	3384      	adds	r3, #132	; 0x84
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	01db      	lsls	r3, r3, #7
 8006034:	4413      	add	r3, r2
 8006036:	3384      	adds	r3, #132	; 0x84
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	4611      	mov	r1, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	01d2      	lsls	r2, r2, #7
 8006044:	440a      	add	r2, r1
 8006046:	3284      	adds	r2, #132	; 0x84
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	6013      	str	r3, [r2, #0]
}
 800604e:	bf00      	nop
 8006050:	3724      	adds	r7, #36	; 0x24
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	fffff8f8 	.word	0xfffff8f8
 8006060:	fffff800 	.word	0xfffff800

08006064 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006076:	2200      	movs	r2, #0
 8006078:	e001      	b.n	800607e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800607a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800608a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800608e:	e000      	b.n	8006092 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006090:	2200      	movs	r2, #0
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800609e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060a2:	e000      	b.n	80060a6 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80060a4:	2200      	movs	r2, #0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	4413      	add	r3, r2
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	441a      	add	r2, r3
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	4413      	add	r3, r2
 80060d4:	1e5a      	subs	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	441a      	add	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	441a      	add	r2, r3
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	4413      	add	r3, r2
 80060f0:	1e5a      	subs	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4a22      	ldr	r2, [pc, #136]	; (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006118:	6413      	str	r3, [r2, #64]	; 0x40
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006126:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800612c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006130:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006132:	f7fc fb57 	bl	80027e4 <HAL_GetTick>
 8006136:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006138:	e009      	b.n	800614e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800613a:	f7fc fb53 	bl	80027e4 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006148:	d901      	bls.n	800614e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e022      	b.n	8006194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615a:	d1ee      	bne.n	800613a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006168:	f7fc fb3c 	bl	80027e4 <HAL_GetTick>
 800616c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800616e:	e009      	b.n	8006184 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006170:	f7fc fb38 	bl	80027e4 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617e:	d901      	bls.n	8006184 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e007      	b.n	8006194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006190:	d1ee      	bne.n	8006170 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	40007000 	.word	0x40007000

080061a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80061ac:	2300      	movs	r3, #0
 80061ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e25e      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8087 	beq.w	80062d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061c8:	4b96      	ldr	r3, [pc, #600]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 030c 	and.w	r3, r3, #12
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d00c      	beq.n	80061ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d4:	4b93      	ldr	r3, [pc, #588]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d112      	bne.n	8006206 <HAL_RCC_OscConfig+0x62>
 80061e0:	4b90      	ldr	r3, [pc, #576]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ec:	d10b      	bne.n	8006206 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ee:	4b8d      	ldr	r3, [pc, #564]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06c      	beq.n	80062d4 <HAL_RCC_OscConfig+0x130>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d168      	bne.n	80062d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e238      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620e:	d106      	bne.n	800621e <HAL_RCC_OscConfig+0x7a>
 8006210:	4b84      	ldr	r3, [pc, #528]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a83      	ldr	r2, [pc, #524]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e02e      	b.n	800627c <HAL_RCC_OscConfig+0xd8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10c      	bne.n	8006240 <HAL_RCC_OscConfig+0x9c>
 8006226:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a7e      	ldr	r2, [pc, #504]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800622c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b7c      	ldr	r3, [pc, #496]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7b      	ldr	r2, [pc, #492]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e01d      	b.n	800627c <HAL_RCC_OscConfig+0xd8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006248:	d10c      	bne.n	8006264 <HAL_RCC_OscConfig+0xc0>
 800624a:	4b76      	ldr	r3, [pc, #472]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a75      	ldr	r2, [pc, #468]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b73      	ldr	r3, [pc, #460]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a72      	ldr	r2, [pc, #456]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e00b      	b.n	800627c <HAL_RCC_OscConfig+0xd8>
 8006264:	4b6f      	ldr	r3, [pc, #444]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a6e      	ldr	r2, [pc, #440]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800626a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b6c      	ldr	r3, [pc, #432]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a6b      	ldr	r2, [pc, #428]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800627a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d013      	beq.n	80062ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006284:	f7fc faae 	bl	80027e4 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800628c:	f7fc faaa 	bl	80027e4 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e1ec      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629e:	4b61      	ldr	r3, [pc, #388]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0xe8>
 80062aa:	e014      	b.n	80062d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fc fa9a 	bl	80027e4 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fc fa96 	bl	80027e4 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e1d8      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c6:	4b57      	ldr	r3, [pc, #348]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x110>
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d069      	beq.n	80063b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062e2:	4b50      	ldr	r3, [pc, #320]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ee:	4b4d      	ldr	r3, [pc, #308]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d11c      	bne.n	8006334 <HAL_RCC_OscConfig+0x190>
 80062fa:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006306:	4b47      	ldr	r3, [pc, #284]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_RCC_OscConfig+0x17a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d001      	beq.n	800631e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e1ac      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631e:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	493d      	ldr	r1, [pc, #244]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006332:	e040      	b.n	80063b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d023      	beq.n	8006384 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800633c:	4b39      	ldr	r3, [pc, #228]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a38      	ldr	r2, [pc, #224]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fc fa4c 	bl	80027e4 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006350:	f7fc fa48 	bl	80027e4 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e18a      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006362:	4b30      	ldr	r3, [pc, #192]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0f0      	beq.n	8006350 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636e:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4929      	ldr	r1, [pc, #164]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
 8006382:	e018      	b.n	80063b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006384:	4b27      	ldr	r3, [pc, #156]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a26      	ldr	r2, [pc, #152]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006390:	f7fc fa28 	bl	80027e4 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006398:	f7fc fa24 	bl	80027e4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e166      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063aa:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d038      	beq.n	8006434 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d019      	beq.n	80063fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ce:	4a15      	ldr	r2, [pc, #84]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d6:	f7fc fa05 	bl	80027e4 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063de:	f7fc fa01 	bl	80027e4 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e143      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0f0      	beq.n	80063de <HAL_RCC_OscConfig+0x23a>
 80063fc:	e01a      	b.n	8006434 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006402:	4a08      	ldr	r2, [pc, #32]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640a:	f7fc f9eb 	bl	80027e4 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	e00a      	b.n	8006428 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006412:	f7fc f9e7 	bl	80027e4 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d903      	bls.n	8006428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e129      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
 8006424:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006428:	4b95      	ldr	r3, [pc, #596]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1ee      	bne.n	8006412 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80a4 	beq.w	800658a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006442:	4b8f      	ldr	r3, [pc, #572]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800644e:	4b8c      	ldr	r3, [pc, #560]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	4a8b      	ldr	r2, [pc, #556]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006458:	6413      	str	r3, [r2, #64]	; 0x40
 800645a:	4b89      	ldr	r3, [pc, #548]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800646a:	4b86      	ldr	r3, [pc, #536]	; (8006684 <HAL_RCC_OscConfig+0x4e0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d118      	bne.n	80064a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006476:	4b83      	ldr	r3, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x4e0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a82      	ldr	r2, [pc, #520]	; (8006684 <HAL_RCC_OscConfig+0x4e0>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006482:	f7fc f9af 	bl	80027e4 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800648a:	f7fc f9ab 	bl	80027e4 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b64      	cmp	r3, #100	; 0x64
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e0ed      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800649c:	4b79      	ldr	r3, [pc, #484]	; (8006684 <HAL_RCC_OscConfig+0x4e0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d106      	bne.n	80064be <HAL_RCC_OscConfig+0x31a>
 80064b0:	4b73      	ldr	r3, [pc, #460]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	4a72      	ldr	r2, [pc, #456]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6713      	str	r3, [r2, #112]	; 0x70
 80064bc:	e02d      	b.n	800651a <HAL_RCC_OscConfig+0x376>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCC_OscConfig+0x33c>
 80064c6:	4b6e      	ldr	r3, [pc, #440]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	4a6d      	ldr	r2, [pc, #436]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70
 80064d2:	4b6b      	ldr	r3, [pc, #428]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a6a      	ldr	r2, [pc, #424]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064d8:	f023 0304 	bic.w	r3, r3, #4
 80064dc:	6713      	str	r3, [r2, #112]	; 0x70
 80064de:	e01c      	b.n	800651a <HAL_RCC_OscConfig+0x376>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d10c      	bne.n	8006502 <HAL_RCC_OscConfig+0x35e>
 80064e8:	4b65      	ldr	r3, [pc, #404]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a64      	ldr	r2, [pc, #400]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064ee:	f043 0304 	orr.w	r3, r3, #4
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
 80064f4:	4b62      	ldr	r3, [pc, #392]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	4a61      	ldr	r2, [pc, #388]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006500:	e00b      	b.n	800651a <HAL_RCC_OscConfig+0x376>
 8006502:	4b5f      	ldr	r3, [pc, #380]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	4a5e      	ldr	r2, [pc, #376]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	6713      	str	r3, [r2, #112]	; 0x70
 800650e:	4b5c      	ldr	r3, [pc, #368]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	4a5b      	ldr	r2, [pc, #364]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006514:	f023 0304 	bic.w	r3, r3, #4
 8006518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d015      	beq.n	800654e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006522:	f7fc f95f 	bl	80027e4 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006528:	e00a      	b.n	8006540 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fc f95b 	bl	80027e4 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e09b      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006540:	4b4f      	ldr	r3, [pc, #316]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0ee      	beq.n	800652a <HAL_RCC_OscConfig+0x386>
 800654c:	e014      	b.n	8006578 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654e:	f7fc f949 	bl	80027e4 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006554:	e00a      	b.n	800656c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006556:	f7fc f945 	bl	80027e4 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f241 3288 	movw	r2, #5000	; 0x1388
 8006564:	4293      	cmp	r3, r2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e085      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656c:	4b44      	ldr	r3, [pc, #272]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1ee      	bne.n	8006556 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006578:	7dfb      	ldrb	r3, [r7, #23]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d105      	bne.n	800658a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657e:	4b40      	ldr	r3, [pc, #256]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a3f      	ldr	r2, [pc, #252]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d071      	beq.n	8006676 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006592:	4b3b      	ldr	r3, [pc, #236]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 030c 	and.w	r3, r3, #12
 800659a:	2b08      	cmp	r3, #8
 800659c:	d069      	beq.n	8006672 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d14b      	bne.n	800663e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a6:	4b36      	ldr	r3, [pc, #216]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a35      	ldr	r2, [pc, #212]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80065ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b2:	f7fc f917 	bl	80027e4 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ba:	f7fc f913 	bl	80027e4 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e055      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065cc:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1f0      	bne.n	80065ba <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	019b      	lsls	r3, r3, #6
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	3b01      	subs	r3, #1
 80065f2:	041b      	lsls	r3, r3, #16
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	061b      	lsls	r3, r3, #24
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	071b      	lsls	r3, r3, #28
 8006604:	491e      	ldr	r1, [pc, #120]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800660a:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1c      	ldr	r2, [pc, #112]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006616:	f7fc f8e5 	bl	80027e4 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800661e:	f7fc f8e1 	bl	80027e4 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e023      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x47a>
 800663c:	e01b      	b.n	8006676 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663e:	4b10      	ldr	r3, [pc, #64]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a0f      	ldr	r2, [pc, #60]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664a:	f7fc f8cb 	bl	80027e4 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006652:	f7fc f8c7 	bl	80027e4 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e009      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <HAL_RCC_OscConfig+0x4dc>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1f0      	bne.n	8006652 <HAL_RCC_OscConfig+0x4ae>
 8006670:	e001      	b.n	8006676 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40023800 	.word	0x40023800
 8006684:	40007000 	.word	0x40007000

08006688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0ce      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066a0:	4b69      	ldr	r3, [pc, #420]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d910      	bls.n	80066d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ae:	4b66      	ldr	r3, [pc, #408]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 020f 	bic.w	r2, r3, #15
 80066b6:	4964      	ldr	r1, [pc, #400]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066be:	4b62      	ldr	r3, [pc, #392]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d001      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0b6      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d020      	beq.n	800671e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d005      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e8:	4b58      	ldr	r3, [pc, #352]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	4a57      	ldr	r2, [pc, #348]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80066ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006700:	4b52      	ldr	r3, [pc, #328]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	4a51      	ldr	r2, [pc, #324]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006706:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800670a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800670c:	4b4f      	ldr	r3, [pc, #316]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	494c      	ldr	r1, [pc, #304]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d040      	beq.n	80067ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d107      	bne.n	8006742 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006732:	4b46      	ldr	r3, [pc, #280]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d115      	bne.n	800676a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e07d      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b02      	cmp	r3, #2
 8006748:	d107      	bne.n	800675a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674a:	4b40      	ldr	r3, [pc, #256]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e071      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675a:	4b3c      	ldr	r3, [pc, #240]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e069      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676a:	4b38      	ldr	r3, [pc, #224]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f023 0203 	bic.w	r2, r3, #3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	4935      	ldr	r1, [pc, #212]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006778:	4313      	orrs	r3, r2
 800677a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677c:	f7fc f832 	bl	80027e4 <HAL_GetTick>
 8006780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006782:	e00a      	b.n	800679a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006784:	f7fc f82e 	bl	80027e4 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e051      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679a:	4b2c      	ldr	r3, [pc, #176]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 020c 	and.w	r2, r3, #12
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d1eb      	bne.n	8006784 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ac:	4b26      	ldr	r3, [pc, #152]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d210      	bcs.n	80067dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ba:	4b23      	ldr	r3, [pc, #140]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f023 020f 	bic.w	r2, r3, #15
 80067c2:	4921      	ldr	r1, [pc, #132]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ca:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d001      	beq.n	80067dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e030      	b.n	800683e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e8:	4b18      	ldr	r3, [pc, #96]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4915      	ldr	r1, [pc, #84]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	490d      	ldr	r1, [pc, #52]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800681a:	f000 f81d 	bl	8006858 <HAL_RCC_GetSysClockFreq>
 800681e:	4601      	mov	r1, r0
 8006820:	4b0a      	ldr	r3, [pc, #40]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	4a09      	ldr	r2, [pc, #36]	; (8006850 <HAL_RCC_ClockConfig+0x1c8>)
 800682c:	5cd3      	ldrb	r3, [r2, r3]
 800682e:	fa21 f303 	lsr.w	r3, r1, r3
 8006832:	4a08      	ldr	r2, [pc, #32]	; (8006854 <HAL_RCC_ClockConfig+0x1cc>)
 8006834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006836:	2000      	movs	r0, #0
 8006838:	f7fb ff90 	bl	800275c <HAL_InitTick>

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40023c00 	.word	0x40023c00
 800684c:	40023800 	.word	0x40023800
 8006850:	0800d77c 	.word	0x0800d77c
 8006854:	2000005c 	.word	0x2000005c

08006858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	607b      	str	r3, [r7, #4]
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	2300      	movs	r3, #0
 8006868:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800686e:	4b50      	ldr	r3, [pc, #320]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b04      	cmp	r3, #4
 8006878:	d007      	beq.n	800688a <HAL_RCC_GetSysClockFreq+0x32>
 800687a:	2b08      	cmp	r3, #8
 800687c:	d008      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0x38>
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 808d 	bne.w	800699e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006884:	4b4b      	ldr	r3, [pc, #300]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006886:	60bb      	str	r3, [r7, #8]
       break;
 8006888:	e08c      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800688a:	4b4b      	ldr	r3, [pc, #300]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800688c:	60bb      	str	r3, [r7, #8]
      break;
 800688e:	e089      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006890:	4b47      	ldr	r3, [pc, #284]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006898:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800689a:	4b45      	ldr	r3, [pc, #276]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d023      	beq.n	80068ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068a6:	4b42      	ldr	r3, [pc, #264]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	099b      	lsrs	r3, r3, #6
 80068ac:	f04f 0400 	mov.w	r4, #0
 80068b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	ea03 0501 	and.w	r5, r3, r1
 80068bc:	ea04 0602 	and.w	r6, r4, r2
 80068c0:	4a3d      	ldr	r2, [pc, #244]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80068c2:	fb02 f106 	mul.w	r1, r2, r6
 80068c6:	2200      	movs	r2, #0
 80068c8:	fb02 f205 	mul.w	r2, r2, r5
 80068cc:	440a      	add	r2, r1
 80068ce:	493a      	ldr	r1, [pc, #232]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80068d0:	fba5 0101 	umull	r0, r1, r5, r1
 80068d4:	1853      	adds	r3, r2, r1
 80068d6:	4619      	mov	r1, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f04f 0400 	mov.w	r4, #0
 80068de:	461a      	mov	r2, r3
 80068e0:	4623      	mov	r3, r4
 80068e2:	f7f9 fca9 	bl	8000238 <__aeabi_uldivmod>
 80068e6:	4603      	mov	r3, r0
 80068e8:	460c      	mov	r4, r1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	e049      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ee:	4b30      	ldr	r3, [pc, #192]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	099b      	lsrs	r3, r3, #6
 80068f4:	f04f 0400 	mov.w	r4, #0
 80068f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	ea03 0501 	and.w	r5, r3, r1
 8006904:	ea04 0602 	and.w	r6, r4, r2
 8006908:	4629      	mov	r1, r5
 800690a:	4632      	mov	r2, r6
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	0154      	lsls	r4, r2, #5
 8006916:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800691a:	014b      	lsls	r3, r1, #5
 800691c:	4619      	mov	r1, r3
 800691e:	4622      	mov	r2, r4
 8006920:	1b49      	subs	r1, r1, r5
 8006922:	eb62 0206 	sbc.w	r2, r2, r6
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	f04f 0400 	mov.w	r4, #0
 800692e:	0194      	lsls	r4, r2, #6
 8006930:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006934:	018b      	lsls	r3, r1, #6
 8006936:	1a5b      	subs	r3, r3, r1
 8006938:	eb64 0402 	sbc.w	r4, r4, r2
 800693c:	f04f 0100 	mov.w	r1, #0
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	00e2      	lsls	r2, r4, #3
 8006946:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800694a:	00d9      	lsls	r1, r3, #3
 800694c:	460b      	mov	r3, r1
 800694e:	4614      	mov	r4, r2
 8006950:	195b      	adds	r3, r3, r5
 8006952:	eb44 0406 	adc.w	r4, r4, r6
 8006956:	f04f 0100 	mov.w	r1, #0
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	02a2      	lsls	r2, r4, #10
 8006960:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006964:	0299      	lsls	r1, r3, #10
 8006966:	460b      	mov	r3, r1
 8006968:	4614      	mov	r4, r2
 800696a:	4618      	mov	r0, r3
 800696c:	4621      	mov	r1, r4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f04f 0400 	mov.w	r4, #0
 8006974:	461a      	mov	r2, r3
 8006976:	4623      	mov	r3, r4
 8006978:	f7f9 fc5e 	bl	8000238 <__aeabi_uldivmod>
 800697c:	4603      	mov	r3, r0
 800697e:	460c      	mov	r4, r1
 8006980:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006982:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	0c1b      	lsrs	r3, r3, #16
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	3301      	adds	r3, #1
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	60bb      	str	r3, [r7, #8]
      break;
 800699c:	e002      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800699e:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80069a0:	60bb      	str	r3, [r7, #8]
      break;
 80069a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069a4:	68bb      	ldr	r3, [r7, #8]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	017d7840 	.word	0x017d7840

080069bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d012      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069e4:	4b69      	ldr	r3, [pc, #420]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	4a68      	ldr	r2, [pc, #416]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069ee:	6093      	str	r3, [r2, #8]
 80069f0:	4b66      	ldr	r3, [pc, #408]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f8:	4964      	ldr	r1, [pc, #400]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a06:	2301      	movs	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d017      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a16:	4b5d      	ldr	r3, [pc, #372]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	4959      	ldr	r1, [pc, #356]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a34:	d101      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a42:	2301      	movs	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d017      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a52:	4b4e      	ldr	r3, [pc, #312]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	494a      	ldr	r1, [pc, #296]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a70:	d101      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 808b 	beq.w	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aa0:	4b3a      	ldr	r3, [pc, #232]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	4a39      	ldr	r2, [pc, #228]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8006aac:	4b37      	ldr	r3, [pc, #220]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ab8:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a34      	ldr	r2, [pc, #208]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac4:	f7fb fe8e 	bl	80027e4 <HAL_GetTick>
 8006ac8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006acc:	f7fb fe8a 	bl	80027e4 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b64      	cmp	r3, #100	; 0x64
 8006ad8:	d901      	bls.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e38d      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ade:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aea:	4b28      	ldr	r3, [pc, #160]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d035      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d02e      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b08:	4b20      	ldr	r3, [pc, #128]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b12:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b22:	4a1a      	ldr	r2, [pc, #104]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b2a:	4a18      	ldr	r2, [pc, #96]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b30:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d114      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fb fe52 	bl	80027e4 <HAL_GetTick>
 8006b40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b42:	e00a      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b44:	f7fb fe4e 	bl	80027e4 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e34f      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0ee      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b72:	d111      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b82:	400b      	ands	r3, r1
 8006b84:	4901      	ldr	r1, [pc, #4]	; (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
 8006b8a:	e00b      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40007000 	.word	0x40007000
 8006b94:	0ffffcff 	.word	0x0ffffcff
 8006b98:	4bb3      	ldr	r3, [pc, #716]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4ab2      	ldr	r2, [pc, #712]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ba2:	6093      	str	r3, [r2, #8]
 8006ba4:	4bb0      	ldr	r3, [pc, #704]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb0:	49ad      	ldr	r1, [pc, #692]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0310 	and.w	r3, r3, #16
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bc2:	4ba9      	ldr	r3, [pc, #676]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc8:	4aa7      	ldr	r2, [pc, #668]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006bd2:	4ba5      	ldr	r3, [pc, #660]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	49a2      	ldr	r1, [pc, #648]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bf0:	4b9d      	ldr	r3, [pc, #628]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfe:	499a      	ldr	r1, [pc, #616]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c12:	4b95      	ldr	r3, [pc, #596]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c20:	4991      	ldr	r1, [pc, #580]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c34:	4b8c      	ldr	r3, [pc, #560]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c42:	4989      	ldr	r1, [pc, #548]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c56:	4b84      	ldr	r3, [pc, #528]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	4980      	ldr	r1, [pc, #512]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c78:	4b7b      	ldr	r3, [pc, #492]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f023 0203 	bic.w	r2, r3, #3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c86:	4978      	ldr	r1, [pc, #480]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c9a:	4b73      	ldr	r3, [pc, #460]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	f023 020c 	bic.w	r2, r3, #12
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca8:	496f      	ldr	r1, [pc, #444]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cbc:	4b6a      	ldr	r3, [pc, #424]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cca:	4967      	ldr	r1, [pc, #412]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cde:	4b62      	ldr	r3, [pc, #392]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	495e      	ldr	r1, [pc, #376]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d00:	4b59      	ldr	r3, [pc, #356]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	4956      	ldr	r1, [pc, #344]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d22:	4b51      	ldr	r3, [pc, #324]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	494d      	ldr	r1, [pc, #308]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d44:	4b48      	ldr	r3, [pc, #288]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d52:	4945      	ldr	r1, [pc, #276]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d66:	4b40      	ldr	r3, [pc, #256]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d74:	493c      	ldr	r1, [pc, #240]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d88:	4b37      	ldr	r3, [pc, #220]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d96:	4934      	ldr	r1, [pc, #208]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d011      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006daa:	4b2f      	ldr	r3, [pc, #188]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db8:	492b      	ldr	r1, [pc, #172]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dc8:	d101      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0308 	and.w	r3, r3, #8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dea:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df8:	491b      	ldr	r1, [pc, #108]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1c:	4912      	ldr	r1, [pc, #72]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e40:	4909      	ldr	r1, [pc, #36]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00f      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	4985      	ldr	r1, [pc, #532]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e80:	4b80      	ldr	r3, [pc, #512]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e90:	497c      	ldr	r1, [pc, #496]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d005      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea6:	f040 80d6 	bne.w	8007056 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006eaa:	4b76      	ldr	r3, [pc, #472]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a75      	ldr	r2, [pc, #468]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb6:	f7fb fc95 	bl	80027e4 <HAL_GetTick>
 8006eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ebe:	f7fb fc91 	bl	80027e4 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b64      	cmp	r3, #100	; 0x64
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e194      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ed0:	4b6c      	ldr	r3, [pc, #432]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f0      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d021      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d11d      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ef0:	4b64      	ldr	r3, [pc, #400]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef6:	0c1b      	lsrs	r3, r3, #16
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006efe:	4b61      	ldr	r3, [pc, #388]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f04:	0e1b      	lsrs	r3, r3, #24
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	019a      	lsls	r2, r3, #6
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	061b      	lsls	r3, r3, #24
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	071b      	lsls	r3, r3, #28
 8006f24:	4957      	ldr	r1, [pc, #348]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f40:	d00a      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d02e      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f56:	d129      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f58:	4b4a      	ldr	r3, [pc, #296]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5e:	0c1b      	lsrs	r3, r3, #16
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f66:	4b47      	ldr	r3, [pc, #284]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f6c:	0f1b      	lsrs	r3, r3, #28
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	019a      	lsls	r2, r3, #6
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	061b      	lsls	r3, r3, #24
 8006f86:	431a      	orrs	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	071b      	lsls	r3, r3, #28
 8006f8c:	493d      	ldr	r1, [pc, #244]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f94:	4b3b      	ldr	r3, [pc, #236]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9a:	f023 021f 	bic.w	r2, r3, #31
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	4937      	ldr	r1, [pc, #220]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01d      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fb8:	4b32      	ldr	r3, [pc, #200]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fbe:	0e1b      	lsrs	r3, r3, #24
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fcc:	0f1b      	lsrs	r3, r3, #28
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	019a      	lsls	r2, r3, #6
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	041b      	lsls	r3, r3, #16
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	061b      	lsls	r3, r3, #24
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	071b      	lsls	r3, r3, #28
 8006fec:	4925      	ldr	r1, [pc, #148]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d011      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	019a      	lsls	r2, r3, #6
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	061b      	lsls	r3, r3, #24
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	071b      	lsls	r3, r3, #28
 800701c:	4919      	ldr	r1, [pc, #100]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007024:	4b17      	ldr	r3, [pc, #92]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a16      	ldr	r2, [pc, #88]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800702a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800702e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007030:	f7fb fbd8 	bl	80027e4 <HAL_GetTick>
 8007034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007036:	e008      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007038:	f7fb fbd4 	bl	80027e4 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b64      	cmp	r3, #100	; 0x64
 8007044:	d901      	bls.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e0d7      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800704a:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b01      	cmp	r3, #1
 800705a:	f040 80cd 	bne.w	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a08      	ldr	r2, [pc, #32]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800706a:	f7fb fbbb 	bl	80027e4 <HAL_GetTick>
 800706e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007070:	e00a      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007072:	f7fb fbb7 	bl	80027e4 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b64      	cmp	r3, #100	; 0x64
 800707e:	d903      	bls.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e0ba      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007084:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007088:	4b5e      	ldr	r3, [pc, #376]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007094:	d0ed      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d02e      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d12a      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070be:	4b51      	ldr	r3, [pc, #324]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070cc:	4b4d      	ldr	r3, [pc, #308]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	019a      	lsls	r2, r3, #6
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	061b      	lsls	r3, r3, #24
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	071b      	lsls	r3, r3, #28
 80070f2:	4944      	ldr	r1, [pc, #272]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070fa:	4b42      	ldr	r3, [pc, #264]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007100:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007108:	3b01      	subs	r3, #1
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	493d      	ldr	r1, [pc, #244]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d022      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007128:	d11d      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800712a:	4b36      	ldr	r3, [pc, #216]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800712c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007130:	0e1b      	lsrs	r3, r3, #24
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007138:	4b32      	ldr	r3, [pc, #200]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	0f1b      	lsrs	r3, r3, #28
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	019a      	lsls	r2, r3, #6
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	431a      	orrs	r2, r3
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	061b      	lsls	r3, r3, #24
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	071b      	lsls	r3, r3, #28
 800715e:	4929      	ldr	r1, [pc, #164]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d028      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007172:	4b24      	ldr	r3, [pc, #144]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007178:	0e1b      	lsrs	r3, r3, #24
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007180:	4b20      	ldr	r3, [pc, #128]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	f003 0303 	and.w	r3, r3, #3
 800718c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	019a      	lsls	r2, r3, #6
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	431a      	orrs	r2, r3
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	071b      	lsls	r3, r3, #28
 80071a6:	4917      	ldr	r1, [pc, #92]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071ae:	4b15      	ldr	r3, [pc, #84]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	4911      	ldr	r1, [pc, #68]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a0e      	ldr	r2, [pc, #56]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071d0:	f7fb fb08 	bl	80027e4 <HAL_GetTick>
 80071d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071d6:	e008      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071d8:	f7fb fb04 	bl	80027e4 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b64      	cmp	r3, #100	; 0x64
 80071e4:	d901      	bls.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e007      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071ea:	4b06      	ldr	r3, [pc, #24]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f6:	d1ef      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3720      	adds	r7, #32
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800

08007208 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e01d      	b.n	8007256 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f003 fef3 	bl	800b018 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2203      	movs	r2, #3
 8007236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f80f 	bl	800725e <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800725e:	b5b0      	push	{r4, r5, r7, lr}
 8007260:	b08e      	sub	sp, #56	; 0x38
 8007262:	af04      	add	r7, sp, #16
 8007264:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007266:	2300      	movs	r3, #0
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007276:	2300      	movs	r3, #0
 8007278:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800727e:	2376      	movs	r3, #118	; 0x76
 8007280:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	466c      	mov	r4, sp
 8007288:	f107 0318 	add.w	r3, r7, #24
 800728c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800729a:	4628      	mov	r0, r5
 800729c:	f001 fd90 	bl	8008dc0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ae:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 fdcd 	bl	8008e54 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c8:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80072ca:	2002      	movs	r0, #2
 80072cc:	f7fb fa96 	bl	80027fc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fee3 	bl	800809c <SD_PowerON>
 80072d6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e013      	b.n	800731e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fe07 	bl	8007f0a <SD_InitCard>
 80072fc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3728      	adds	r7, #40	; 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bdb0      	pop	{r4, r5, r7, pc}

08007326 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b08f      	sub	sp, #60	; 0x3c
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007334:	2300      	movs	r3, #0
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007338:	f7fb fa54 	bl	80027e4 <HAL_GetTick>
 800733c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 800733e:	2300      	movs	r3, #0
 8007340:	633b      	str	r3, [r7, #48]	; 0x30
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d107      	bne.n	800735c <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e176      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	f040 8169 	bne.w	800763c <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	429a      	cmp	r2, r3
 800737c:	d907      	bls.n	800738e <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e15d      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2200      	movs	r2, #0
 800739c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d002      	beq.n	80073ac <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	025b      	lsls	r3, r3, #9
 80073aa:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fde1 	bl	8008f7c <SDMMC_CmdBlockLength>
 80073ba:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80073bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d2:	431a      	orrs	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e132      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295
 80073e8:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	025b      	lsls	r3, r3, #9
 80073ee:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80073f0:	2390      	movs	r3, #144	; 0x90
 80073f2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073f4:	2302      	movs	r3, #2
 80073f6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f107 0210 	add.w	r2, r7, #16
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f001 fd8a 	bl	8008f24 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d90a      	bls.n	800742c <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2202      	movs	r2, #2
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fdf2 	bl	800900c <SDMMC_CmdReadMultiBlock>
 8007428:	6378      	str	r0, [r7, #52]	; 0x34
 800742a:	e009      	b.n	8007440 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2201      	movs	r2, #1
 8007430:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	f001 fdc3 	bl	8008fc4 <SDMMC_CmdReadSingleBlock>
 800743e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	2b00      	cmp	r3, #0
 8007444:	d04a      	beq.n	80074dc <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800744e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007456:	431a      	orrs	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0f0      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007476:	2300      	movs	r3, #0
 8007478:	633b      	str	r3, [r7, #48]	; 0x30
 800747a:	e00d      	b.n	8007498 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007486:	18d4      	adds	r4, r2, r3
 8007488:	4608      	mov	r0, r1
 800748a:	f001 fcc5 	bl	8008e18 <SDMMC_ReadFIFO>
 800748e:	4603      	mov	r3, r0
 8007490:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	3301      	adds	r3, #1
 8007496:	633b      	str	r3, [r7, #48]	; 0x30
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	2b07      	cmp	r3, #7
 800749c:	d9ee      	bls.n	800747c <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	3320      	adds	r3, #32
 80074a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <HAL_SD_ReadBlocks+0x194>
 80074aa:	f7fb f99b 	bl	80027e4 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d810      	bhi.n	80074dc <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e0b6      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0be      	beq.n	8007468 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <HAL_SD_ReadBlocks+0x214>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d91d      	bls.n	800753a <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007502:	2b03      	cmp	r3, #3
 8007504:	d019      	beq.n	800753a <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f001 fdea 	bl	80090e4 <SDMMC_CmdStopTransfer>
 8007510:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	2b00      	cmp	r3, #0
 8007516:	d010      	beq.n	800753a <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e087      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d010      	beq.n	800756a <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007550:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f043 0208 	orr.w	r2, r3, #8
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e06f      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d010      	beq.n	800759a <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	f043 0202 	orr.w	r2, r3, #2
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e057      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d037      	beq.n	8007618 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e03f      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 fc22 	bl	8008e18 <SDMMC_ReadFIFO>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	3304      	adds	r3, #4
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80075e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <HAL_SD_ReadBlocks+0x2d0>
 80075e6:	f7fb f8fd 	bl	80027e4 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d810      	bhi.n	8007618 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e018      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1d1      	bne.n	80075ca <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800762e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e006      	b.n	800764a <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
  }
}
 800764a:	4618      	mov	r0, r3
 800764c:	373c      	adds	r7, #60	; 0x3c
 800764e:	46bd      	mov	sp, r7
 8007650:	bd90      	pop	{r4, r7, pc}

08007652 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b08e      	sub	sp, #56	; 0x38
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007660:	2300      	movs	r3, #0
 8007662:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007664:	f7fb f8be 	bl	80027e4 <HAL_GetTick>
 8007668:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d107      	bne.n	8007688 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e147      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	f040 813a 	bne.w	800790a <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d907      	bls.n	80076ba <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e12e      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2203      	movs	r2, #3
 80076be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2200      	movs	r2, #0
 80076c8:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d002      	beq.n	80076d8 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	025b      	lsls	r3, r3, #9
 80076d6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 fc4b 	bl	8008f7c <SDMMC_CmdBlockLength>
 80076e6:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80076e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d010      	beq.n	8007710 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fe:	431a      	orrs	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e103      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d90a      	bls.n	800772c <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2220      	movs	r2, #32
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4618      	mov	r0, r3
 8007724:	f001 fcba 	bl	800909c <SDMMC_CmdWriteMultiBlock>
 8007728:	6378      	str	r0, [r7, #52]	; 0x34
 800772a:	e009      	b.n	8007740 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2210      	movs	r2, #16
 8007730:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4618      	mov	r0, r3
 800773a:	f001 fc8b 	bl	8009054 <SDMMC_CmdWriteSingleBlock>
 800773e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	2b00      	cmp	r3, #0
 8007744:	d010      	beq.n	8007768 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800774e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	431a      	orrs	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0d7      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007768:	f04f 33ff 	mov.w	r3, #4294967295
 800776c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	025b      	lsls	r3, r3, #9
 8007772:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007774:	2390      	movs	r3, #144	; 0x90
 8007776:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800777c:	2300      	movs	r3, #0
 800777e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007780:	2301      	movs	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f107 0210 	add.w	r2, r7, #16
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f001 fbc8 	bl	8008f24 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007794:	e037      	b.n	8007806 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d014      	beq.n	80077ce <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80077a4:	2300      	movs	r3, #0
 80077a6:	633b      	str	r3, [r7, #48]	; 0x30
 80077a8:	e00b      	b.n	80077c2 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b4:	4413      	add	r3, r2
 80077b6:	4619      	mov	r1, r3
 80077b8:	f001 fb3b 	bl	8008e32 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	3301      	adds	r3, #1
 80077c0:	633b      	str	r3, [r7, #48]	; 0x30
 80077c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c4:	2b07      	cmp	r3, #7
 80077c6:	d9f0      	bls.n	80077aa <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	3320      	adds	r3, #32
 80077cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80077ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d007      	beq.n	80077e4 <HAL_SD_WriteBlocks+0x192>
 80077d4:	f7fb f806 	bl	80027e4 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d810      	bhi.n	8007806 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e088      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0c0      	beq.n	8007796 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781e:	2b00      	cmp	r3, #0
 8007820:	d020      	beq.n	8007864 <HAL_SD_WriteBlocks+0x212>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d91d      	bls.n	8007864 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782c:	2b03      	cmp	r3, #3
 800782e:	d019      	beq.n	8007864 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4618      	mov	r0, r3
 8007836:	f001 fc55 	bl	80090e4 <SDMMC_CmdStopTransfer>
 800783a:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	2b00      	cmp	r3, #0
 8007840:	d010      	beq.n	8007864 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007852:	431a      	orrs	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e059      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d010      	beq.n	8007894 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	f043 0208 	orr.w	r2, r3, #8
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e041      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	f043 0202 	orr.w	r2, r3, #2
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e029      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d010      	beq.n	80078f4 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	f043 0210 	orr.w	r2, r3, #16
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e011      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e006      	b.n	8007918 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3738      	adds	r7, #56	; 0x38
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007932:	0e1b      	lsrs	r3, r3, #24
 8007934:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	099b      	lsrs	r3, r3, #6
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	b2da      	uxtb	r2, r3
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	089b      	lsrs	r3, r3, #2
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	b2da      	uxtb	r2, r3
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	b2db      	uxtb	r3, r3
 800796c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	b2db      	uxtb	r3, r3
 800797e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	b2da      	uxtb	r2, r3
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800798c:	b2db      	uxtb	r3, r3
 800798e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	b2da      	uxtb	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799c:	0e1b      	lsrs	r3, r3, #24
 800799e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b0:	0c1b      	lsrs	r3, r3, #16
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	88db      	ldrh	r3, [r3, #6]
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	091b      	lsrs	r3, r3, #4
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4313      	orrs	r3, r2
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e2:	0a1b      	lsrs	r3, r3, #8
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	09db      	lsrs	r3, r3, #7
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	099b      	lsrs	r3, r3, #6
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	091b      	lsrs	r3, r3, #4
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 8086 	bne.w	8007b44 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	029b      	lsls	r3, r3, #10
 8007a3c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	431a      	orrs	r2, r3
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5e:	0e1b      	lsrs	r3, r3, #24
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	099b      	lsrs	r3, r3, #6
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	431a      	orrs	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	08db      	lsrs	r3, r3, #3
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	089b      	lsrs	r3, r3, #2
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	f003 0306 	and.w	r3, r3, #6
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad4:	0a1b      	lsrs	r3, r3, #8
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	7e1b      	ldrb	r3, [r3, #24]
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	09db      	lsrs	r3, r3, #7
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	7e1b      	ldrb	r3, [r3, #24]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	3302      	adds	r3, #2
 8007b06:	2201      	movs	r2, #1
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0e:	fb02 f203 	mul.w	r2, r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	7a1b      	ldrb	r3, [r3, #8]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4093      	lsls	r3, r2
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b30:	0a52      	lsrs	r2, r2, #9
 8007b32:	fb02 f203 	mul.w	r2, r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b40:	661a      	str	r2, [r3, #96]	; 0x60
 8007b42:	e04d      	b.n	8007be0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d138      	bne.n	8007bbe <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b64:	0e1b      	lsrs	r3, r3, #24
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	691a      	ldr	r2, [r3, #16]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	431a      	orrs	r2, r3
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	691a      	ldr	r2, [r3, #16]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	029a      	lsls	r2, r3, #10
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	661a      	str	r2, [r3, #96]	; 0x60
 8007bbc:	e010      	b.n	8007be0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0c1      	b.n	8007d64 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	099b      	lsrs	r3, r3, #6
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	7e9b      	ldrb	r3, [r3, #26]
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	09db      	lsrs	r3, r3, #7
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	0e1b      	lsrs	r3, r3, #24
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	09db      	lsrs	r3, r3, #7
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	089b      	lsrs	r3, r3, #2
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 030c 	and.w	r3, r3, #12
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c82:	0c1b      	lsrs	r3, r3, #16
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	7fdb      	ldrb	r3, [r3, #31]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	099b      	lsrs	r3, r3, #6
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	095b      	lsrs	r3, r3, #5
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	0a1b      	lsrs	r3, r3, #8
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	09db      	lsrs	r3, r3, #7
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	099b      	lsrs	r3, r3, #6
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	089b      	lsrs	r3, r3, #2
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f003 0303 	and.w	r3, r3, #3
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	085b      	lsrs	r3, r3, #1
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007dc8:	b5b0      	push	{r4, r5, r7, lr}
 8007dca:	b08e      	sub	sp, #56	; 0x38
 8007dcc:	af04      	add	r7, sp, #16
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2203      	movs	r2, #3
 8007dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d02e      	beq.n	8007e44 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dec:	d106      	bne.n	8007dfc <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	639a      	str	r2, [r3, #56]	; 0x38
 8007dfa:	e029      	b.n	8007e50 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e02:	d10a      	bne.n	8007e1a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fa1b 	bl	8008240 <SD_WideBus_Enable>
 8007e0a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
 8007e18:	e01a      	b.n	8007e50 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fa5a 	bl	80082da <SD_WideBus_Disable>
 8007e26:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38
 8007e34:	e00c      	b.n	8007e50 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	639a      	str	r2, [r3, #56]	; 0x38
 8007e42:	e005      	b.n	8007e50 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e024      	b.n	8007eb8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681d      	ldr	r5, [r3, #0]
 8007e94:	466c      	mov	r4, sp
 8007e96:	f107 0318 	add.w	r3, r7, #24
 8007e9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ea2:	f107 030c 	add.w	r3, r7, #12
 8007ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 ff89 	bl	8008dc0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3728      	adds	r7, #40	; 0x28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bdb0      	pop	{r4, r5, r7, pc}

08007ec0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8007ec8:	2304      	movs	r3, #4
 8007eca:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8007ed4:	f107 030c 	add.w	r3, r7, #12
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f986 	bl	80081ec <SD_SendStatus>
 8007ee0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	0a5b      	lsrs	r3, r3, #9
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f0a:	b5b0      	push	{r4, r5, r7, lr}
 8007f0c:	b094      	sub	sp, #80	; 0x50
 8007f0e:	af04      	add	r7, sp, #16
 8007f10:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8007f16:	2301      	movs	r3, #1
 8007f18:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 ffa6 	bl	8008e70 <SDMMC_GetPowerState>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d102      	bne.n	8007f30 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007f2e:	e0b1      	b.n	8008094 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d02f      	beq.n	8007f98 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 f9ec 	bl	800931a <SDMMC_CmdSendCID>
 8007f42:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <SD_InitCard+0x44>
    {
      return errorstate;
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4c:	e0a2      	b.n	8008094 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 ffd0 	bl	8008efa <SDMMC_GetResponse>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2104      	movs	r1, #4
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 ffc7 	bl	8008efa <SDMMC_GetResponse>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2108      	movs	r1, #8
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 ffbe 	bl	8008efa <SDMMC_GetResponse>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	210c      	movs	r1, #12
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 ffb5 	bl	8008efa <SDMMC_GetResponse>
 8007f90:	4602      	mov	r2, r0
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d00d      	beq.n	8007fbc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f107 020e 	add.w	r2, r7, #14
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 f9f6 	bl	800939c <SDMMC_CmdSetRelAdd>
 8007fb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <SD_InitCard+0xb2>
    {
      return errorstate;
 8007fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fba:	e06b      	b.n	8008094 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d036      	beq.n	8008032 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd4:	041b      	lsls	r3, r3, #16
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f001 f9be 	bl	800935a <SDMMC_CmdSendCSD>
 8007fde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <SD_InitCard+0xe0>
    {
      return errorstate;
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	e054      	b.n	8008094 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2100      	movs	r1, #0
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 ff82 	bl	8008efa <SDMMC_GetResponse>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2104      	movs	r1, #4
 8008002:	4618      	mov	r0, r3
 8008004:	f000 ff79 	bl	8008efa <SDMMC_GetResponse>
 8008008:	4602      	mov	r2, r0
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2108      	movs	r1, #8
 8008014:	4618      	mov	r0, r3
 8008016:	f000 ff70 	bl	8008efa <SDMMC_GetResponse>
 800801a:	4602      	mov	r2, r0
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	210c      	movs	r1, #12
 8008026:	4618      	mov	r0, r3
 8008028:	f000 ff67 	bl	8008efa <SDMMC_GetResponse>
 800802c:	4602      	mov	r2, r0
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2104      	movs	r1, #4
 8008038:	4618      	mov	r0, r3
 800803a:	f000 ff5e 	bl	8008efa <SDMMC_GetResponse>
 800803e:	4603      	mov	r3, r0
 8008040:	0d1a      	lsrs	r2, r3, #20
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008046:	f107 0310 	add.w	r3, r7, #16
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff fc67 	bl	8007920 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6819      	ldr	r1, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	f04f 0400 	mov.w	r4, #0
 8008060:	461a      	mov	r2, r3
 8008062:	4623      	mov	r3, r4
 8008064:	4608      	mov	r0, r1
 8008066:	f001 f861 	bl	800912c <SDMMC_CmdSelDesel>
 800806a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800806c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <SD_InitCard+0x16c>
  {
    return errorstate;
 8008072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008074:	e00e      	b.n	8008094 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681d      	ldr	r5, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	466c      	mov	r4, sp
 800807e:	f103 0210 	add.w	r2, r3, #16
 8008082:	ca07      	ldmia	r2, {r0, r1, r2}
 8008084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008088:	3304      	adds	r3, #4
 800808a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800808c:	4628      	mov	r0, r5
 800808e:	f000 fe97 	bl	8008dc0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3740      	adds	r7, #64	; 0x40
 8008098:	46bd      	mov	sp, r7
 800809a:	bdb0      	pop	{r4, r5, r7, pc}

0800809c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	2300      	movs	r3, #0
 80080ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 f85c 	bl	8009176 <SDMMC_CmdGoIdleState>
 80080be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <SD_PowerON+0x2e>
  {
    return errorstate;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	e08c      	b.n	80081e4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 f871 	bl	80091b6 <SDMMC_CmdOperCond>
 80080d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d03d      	beq.n	8008158 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80080e2:	e032      	b.n	800814a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	60ba      	str	r2, [r7, #8]
 80080ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d102      	bne.n	80080f8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80080f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080f6:	e075      	b.n	80081e4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f001 f87a 	bl	80091f8 <SDMMC_CmdAppCommand>
 8008104:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800810c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008110:	e068      	b.n	80081e4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2100      	movs	r1, #0
 8008118:	4618      	mov	r0, r3
 800811a:	f001 f891 	bl	8009240 <SDMMC_CmdAppOperCommand>
 800811e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008126:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800812a:	e05b      	b.n	80081e4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fee1 	bl	8008efa <SDMMC_GetResponse>
 8008138:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	0fdb      	lsrs	r3, r3, #31
 800813e:	2b01      	cmp	r3, #1
 8008140:	bf0c      	ite	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	2300      	movne	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0c9      	beq.n	80080e4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	645a      	str	r2, [r3, #68]	; 0x44
 8008156:	e044      	b.n	80081e2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800815e:	e031      	b.n	80081c4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	60ba      	str	r2, [r7, #8]
 8008166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816a:	4293      	cmp	r3, r2
 800816c:	d102      	bne.n	8008174 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800816e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008172:	e037      	b.n	80081e4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2100      	movs	r1, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f001 f83c 	bl	80091f8 <SDMMC_CmdAppCommand>
 8008180:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <SD_PowerON+0xf0>
      {
        return errorstate;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	e02b      	b.n	80081e4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008194:	4618      	mov	r0, r3
 8008196:	f001 f853 	bl	8009240 <SDMMC_CmdAppOperCommand>
 800819a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <SD_PowerON+0x10a>
      {
        return errorstate;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	e01e      	b.n	80081e4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2100      	movs	r1, #0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fea4 	bl	8008efa <SDMMC_GetResponse>
 80081b2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	0fdb      	lsrs	r3, r3, #31
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	bf0c      	ite	eq
 80081bc:	2301      	moveq	r3, #1
 80081be:	2300      	movne	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0ca      	beq.n	8008160 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	645a      	str	r2, [r3, #68]	; 0x44
 80081da:	e002      	b.n	80081e2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d102      	bne.n	8008206 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008200:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008204:	e018      	b.n	8008238 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	4619      	mov	r1, r3
 8008212:	4610      	mov	r0, r2
 8008214:	f001 f8e5 	bl	80093e2 <SDMMC_CmdSendStatus>
 8008218:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <SD_SendStatus+0x38>
  {
    return errorstate;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	e009      	b.n	8008238 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fe65 	bl	8008efa <SDMMC_GetResponse>
 8008230:	4602      	mov	r2, r0
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	2300      	movs	r3, #0
 800824e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2100      	movs	r1, #0
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fe4d 	bl	8008efa <SDMMC_GetResponse>
 8008260:	4603      	mov	r3, r0
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800826a:	d102      	bne.n	8008272 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800826c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008270:	e02f      	b.n	80082d2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008272:	f107 030c 	add.w	r3, r7, #12
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f87b 	bl	8008374 <SD_FindSCR>
 800827e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	e023      	b.n	80082d2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01c      	beq.n	80082ce <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829c:	041b      	lsls	r3, r3, #16
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f000 ffa9 	bl	80091f8 <SDMMC_CmdAppCommand>
 80082a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	e00f      	b.n	80082d2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2102      	movs	r1, #2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 ffe7 	bl	800928c <SDMMC_CmdBusWidth>
 80082be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	e003      	b.n	80082d2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e001      	b.n	80082d2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b086      	sub	sp, #24
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	2300      	movs	r3, #0
 80082e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fe00 	bl	8008efa <SDMMC_GetResponse>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008304:	d102      	bne.n	800830c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008306:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800830a:	e02f      	b.n	800836c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800830c:	f107 030c 	add.w	r3, r7, #12
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f82e 	bl	8008374 <SD_FindSCR>
 8008318:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	e023      	b.n	800836c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d01c      	beq.n	8008368 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f000 ff5c 	bl	80091f8 <SDMMC_CmdAppCommand>
 8008340:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	e00f      	b.n	800836c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f000 ff9a 	bl	800928c <SDMMC_CmdBusWidth>
 8008358:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	e003      	b.n	800836c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008364:	2300      	movs	r3, #0
 8008366:	e001      	b.n	800836c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008368:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b08f      	sub	sp, #60	; 0x3c
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800837e:	2300      	movs	r3, #0
 8008380:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008382:	f7fa fa2f 	bl	80027e4 <HAL_GetTick>
 8008386:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	2300      	movs	r3, #0
 8008392:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2108      	movs	r1, #8
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fdee 	bl	8008f7c <SDMMC_CmdBlockLength>
 80083a0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	e0a8      	b.n	80084fe <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b4:	041b      	lsls	r3, r3, #16
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f000 ff1d 	bl	80091f8 <SDMMC_CmdAppCommand>
 80083be:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	e099      	b.n	80084fe <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083ca:	f04f 33ff 	mov.w	r3, #4294967295
 80083ce:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80083d0:	2308      	movs	r3, #8
 80083d2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80083d4:	2330      	movs	r3, #48	; 0x30
 80083d6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80083d8:	2302      	movs	r3, #2
 80083da:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80083dc:	2300      	movs	r3, #0
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f107 0214 	add.w	r2, r7, #20
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fd98 	bl	8008f24 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 ff6b 	bl	80092d4 <SDMMC_CmdSendSCR>
 80083fe:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	2b00      	cmp	r3, #0
 8008404:	d022      	beq.n	800844c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	e079      	b.n	80084fe <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00e      	beq.n	8008436 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6819      	ldr	r1, [r3, #0]
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	f107 020c 	add.w	r2, r7, #12
 8008424:	18d4      	adds	r4, r2, r3
 8008426:	4608      	mov	r0, r1
 8008428:	f000 fcf6 	bl	8008e18 <SDMMC_ReadFIFO>
 800842c:	4603      	mov	r3, r0
 800842e:	6023      	str	r3, [r4, #0]
      index++;
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	3301      	adds	r3, #1
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008436:	f7fa f9d5 	bl	80027e4 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d102      	bne.n	800844c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008446:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800844a:	e058      	b.n	80084fe <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008452:	f240 432a 	movw	r3, #1066	; 0x42a
 8008456:	4013      	ands	r3, r2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0d6      	beq.n	800840a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2208      	movs	r2, #8
 8008470:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008472:	2308      	movs	r3, #8
 8008474:	e043      	b.n	80084fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2202      	movs	r2, #2
 800848a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800848c:	2302      	movs	r3, #2
 800848e:	e036      	b.n	80084fe <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008496:	f003 0320 	and.w	r3, r3, #32
 800849a:	2b00      	cmp	r3, #0
 800849c:	d005      	beq.n	80084aa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2220      	movs	r2, #32
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80084a6:	2320      	movs	r3, #32
 80084a8:	e029      	b.n	80084fe <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	061a      	lsls	r2, r3, #24
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084c0:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	0a1b      	lsrs	r3, r3, #8
 80084c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084ca:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80084d6:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80084d8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	061a      	lsls	r2, r3, #24
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	021b      	lsls	r3, r3, #8
 80084e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084e6:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	0a1b      	lsrs	r3, r3, #8
 80084ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084f0:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	0e1b      	lsrs	r3, r3, #24
 80084f6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	373c      	adds	r7, #60	; 0x3c
 8008502:	46bd      	mov	sp, r7
 8008504:	bd90      	pop	{r4, r7, pc}

08008506 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e025      	b.n	8008566 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f002 fef4 	bl	800b31c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f000 fb14 	bl	8008b74 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	461a      	mov	r2, r3
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	f000 fb7e 	bl	8008c58 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d101      	bne.n	800858a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008586:	2302      	movs	r3, #2
 8008588:	e018      	b.n	80085bc <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fbdc 	bl	8008d58 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d104      	bne.n	80085b2 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2205      	movs	r2, #5
 80085ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80085b0:	e003      	b.n	80085ba <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d101      	bne.n	80085de <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80085da:	2302      	movs	r3, #2
 80085dc:	e00e      	b.n	80085fc <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fbd4 	bl	8008d9a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e01d      	b.n	8008652 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f002 fd74 	bl	800b118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f000 f97c 	bl	8008940 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <HAL_TIM_Base_Start_IT+0x50>)
 800867c:	4013      	ands	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b06      	cmp	r3, #6
 8008684:	d00b      	beq.n	800869e <HAL_TIM_Base_Start_IT+0x42>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868c:	d007      	beq.n	800869e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f042 0201 	orr.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	00010007 	.word	0x00010007

080086b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d122      	bne.n	800870c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d11b      	bne.n	800870c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0202 	mvn.w	r2, #2
 80086dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f905 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
 80086f8:	e005      	b.n	8008706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8f7 	bl	80088ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f908 	bl	8008916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b04      	cmp	r3, #4
 8008718:	d122      	bne.n	8008760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b04      	cmp	r3, #4
 8008726:	d11b      	bne.n	8008760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0204 	mvn.w	r2, #4
 8008730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8db 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
 800874c:	e005      	b.n	800875a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f8cd 	bl	80088ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f8de 	bl	8008916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	2b08      	cmp	r3, #8
 800876c:	d122      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b08      	cmp	r3, #8
 800877a:	d11b      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0208 	mvn.w	r2, #8
 8008784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2204      	movs	r2, #4
 800878a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8b1 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
 80087a0:	e005      	b.n	80087ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f8a3 	bl	80088ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f8b4 	bl	8008916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	2b10      	cmp	r3, #16
 80087c0:	d122      	bne.n	8008808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	d11b      	bne.n	8008808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f06f 0210 	mvn.w	r2, #16
 80087d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2208      	movs	r2, #8
 80087de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f887 	bl	8008902 <HAL_TIM_IC_CaptureCallback>
 80087f4:	e005      	b.n	8008802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f879 	bl	80088ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f88a 	bl	8008916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b01      	cmp	r3, #1
 8008814:	d10e      	bne.n	8008834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b01      	cmp	r3, #1
 8008822:	d107      	bne.n	8008834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f06f 0201 	mvn.w	r2, #1
 800882c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f9c0 	bl	8009bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883e:	2b80      	cmp	r3, #128	; 0x80
 8008840:	d10e      	bne.n	8008860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884c:	2b80      	cmp	r3, #128	; 0x80
 800884e:	d107      	bne.n	8008860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f976 	bl	8008b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886e:	d10e      	bne.n	800888e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887a:	2b80      	cmp	r3, #128	; 0x80
 800887c:	d107      	bne.n	800888e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f969 	bl	8008b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d10e      	bne.n	80088ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d107      	bne.n	80088ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f838 	bl	800892a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f003 0320 	and.w	r3, r3, #32
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d10e      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d107      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f06f 0220 	mvn.w	r2, #32
 80088de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f929 	bl	8008b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800891e:	bf00      	nop
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
	...

08008940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a40      	ldr	r2, [pc, #256]	; (8008a54 <TIM_Base_SetConfig+0x114>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d013      	beq.n	8008980 <TIM_Base_SetConfig+0x40>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800895e:	d00f      	beq.n	8008980 <TIM_Base_SetConfig+0x40>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a3d      	ldr	r2, [pc, #244]	; (8008a58 <TIM_Base_SetConfig+0x118>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00b      	beq.n	8008980 <TIM_Base_SetConfig+0x40>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a3c      	ldr	r2, [pc, #240]	; (8008a5c <TIM_Base_SetConfig+0x11c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d007      	beq.n	8008980 <TIM_Base_SetConfig+0x40>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a3b      	ldr	r2, [pc, #236]	; (8008a60 <TIM_Base_SetConfig+0x120>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_Base_SetConfig+0x40>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a3a      	ldr	r2, [pc, #232]	; (8008a64 <TIM_Base_SetConfig+0x124>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d108      	bne.n	8008992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a2f      	ldr	r2, [pc, #188]	; (8008a54 <TIM_Base_SetConfig+0x114>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d02b      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a0:	d027      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a2c      	ldr	r2, [pc, #176]	; (8008a58 <TIM_Base_SetConfig+0x118>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d023      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a2b      	ldr	r2, [pc, #172]	; (8008a5c <TIM_Base_SetConfig+0x11c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d01f      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a2a      	ldr	r2, [pc, #168]	; (8008a60 <TIM_Base_SetConfig+0x120>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d01b      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a29      	ldr	r2, [pc, #164]	; (8008a64 <TIM_Base_SetConfig+0x124>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d017      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a28      	ldr	r2, [pc, #160]	; (8008a68 <TIM_Base_SetConfig+0x128>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a27      	ldr	r2, [pc, #156]	; (8008a6c <TIM_Base_SetConfig+0x12c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00f      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a26      	ldr	r2, [pc, #152]	; (8008a70 <TIM_Base_SetConfig+0x130>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00b      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a25      	ldr	r2, [pc, #148]	; (8008a74 <TIM_Base_SetConfig+0x134>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d007      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a24      	ldr	r2, [pc, #144]	; (8008a78 <TIM_Base_SetConfig+0x138>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d003      	beq.n	80089f2 <TIM_Base_SetConfig+0xb2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a23      	ldr	r2, [pc, #140]	; (8008a7c <TIM_Base_SetConfig+0x13c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d108      	bne.n	8008a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	; (8008a54 <TIM_Base_SetConfig+0x114>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d003      	beq.n	8008a38 <TIM_Base_SetConfig+0xf8>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a0c      	ldr	r2, [pc, #48]	; (8008a64 <TIM_Base_SetConfig+0x124>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d103      	bne.n	8008a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	615a      	str	r2, [r3, #20]
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	40010000 	.word	0x40010000
 8008a58:	40000400 	.word	0x40000400
 8008a5c:	40000800 	.word	0x40000800
 8008a60:	40000c00 	.word	0x40000c00
 8008a64:	40010400 	.word	0x40010400
 8008a68:	40014000 	.word	0x40014000
 8008a6c:	40014400 	.word	0x40014400
 8008a70:	40014800 	.word	0x40014800
 8008a74:	40001800 	.word	0x40001800
 8008a78:	40001c00 	.word	0x40001c00
 8008a7c:	40002000 	.word	0x40002000

08008a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e045      	b.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d004      	beq.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1b      	ldr	r2, [pc, #108]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d108      	bne.n	8008ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	40010000 	.word	0x40010000
 8008b34:	40010400 	.word	0x40010400

08008b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d027      	beq.n	8008bde <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4b2f      	ldr	r3, [pc, #188]	; (8008c54 <FMC_SDRAM_Init+0xe0>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ba4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008baa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008bb0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008bb6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008bbc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008bc2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008bc8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008bce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e032      	b.n	8008c44 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008bf4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008bfa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <FMC_SDRAM_Init+0xe0>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c18:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008c1e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008c24:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008c2a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008c30:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	ffff8000 	.word	0xffff8000

08008c58 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d02e      	beq.n	8008cd0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c7e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008c8e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008c98:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008ca2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008cac:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008cb6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	609a      	str	r2, [r3, #8]
 8008cce:	e039      	b.n	8008d44 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <FMC_SDRAM_Timing_Init+0xfc>)
 8008cda:	4013      	ands	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008d02:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008d12:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008d1c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008d26:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008d30:	4313      	orrs	r3, r2
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	371c      	adds	r7, #28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	ff0f0fff 	.word	0xff0f0fff

08008d58 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008d70:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008d7a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	695a      	ldr	r2, [r3, #20]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	431a      	orrs	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	f107 001c 	add.w	r0, r7, #28
 8008dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008dd6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008dda:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008dde:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008de2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008de6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008dea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <SDMMC_Init+0x54>)
 8008df8:	4013      	ands	r3, r2
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	b004      	add	sp, #16
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	ffff8100 	.word	0xffff8100

08008e18 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0303 	and.w	r3, r3, #3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eaa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008eb0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008eb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <SDMMC_SendCommand+0x50>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	431a      	orrs	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	fffff000 	.word	0xfffff000

08008ee0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	b2db      	uxtb	r3, r3
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3314      	adds	r3, #20
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	4413      	add	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
}  
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f4a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f50:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0

}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f8e:	2310      	movs	r3, #16
 8008f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f92:	2340      	movs	r3, #64	; 0x40
 8008f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f9e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fa0:	f107 0308 	add.w	r3, r7, #8
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7ff ff70 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb0:	2110      	movs	r1, #16
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa64 	bl	8009480 <SDMMC_GetCmdResp1>
 8008fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fba:	69fb      	ldr	r3, [r7, #28]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008fd6:	2311      	movs	r3, #17
 8008fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fda:	2340      	movs	r3, #64	; 0x40
 8008fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff ff4c 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff8:	2111      	movs	r1, #17
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa40 	bl	8009480 <SDMMC_GetCmdResp1>
 8009000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800901e:	2312      	movs	r3, #18
 8009020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800902a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800902e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009030:	f107 0308 	add.w	r3, r7, #8
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff ff28 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800903c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009040:	2112      	movs	r1, #18
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa1c 	bl	8009480 <SDMMC_GetCmdResp1>
 8009048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800904a:	69fb      	ldr	r3, [r7, #28]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800905e:	2300      	movs	r3, #0
 8009060:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009066:	2318      	movs	r3, #24
 8009068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800906a:	2340      	movs	r3, #64	; 0x40
 800906c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009076:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009078:	f107 0308 	add.w	r3, r7, #8
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff ff04 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009084:	f241 3288 	movw	r2, #5000	; 0x1388
 8009088:	2118      	movs	r1, #24
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f9f8 	bl	8009480 <SDMMC_GetCmdResp1>
 8009090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009092:	69fb      	ldr	r3, [r7, #28]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3720      	adds	r7, #32
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80090a6:	2300      	movs	r3, #0
 80090a8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80090ae:	2319      	movs	r3, #25
 80090b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090b2:	2340      	movs	r3, #64	; 0x40
 80090b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090b6:	2300      	movs	r3, #0
 80090b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090c0:	f107 0308 	add.w	r3, r7, #8
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fee0 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80090cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d0:	2119      	movs	r1, #25
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9d4 	bl	8009480 <SDMMC_GetCmdResp1>
 80090d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80090ec:	2300      	movs	r3, #0
 80090ee:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80090f4:	230c      	movs	r3, #12
 80090f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090f8:	2340      	movs	r3, #64	; 0x40
 80090fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009104:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff febd 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009112:	4a05      	ldr	r2, [pc, #20]	; (8009128 <SDMMC_CmdStopTransfer+0x44>)
 8009114:	210c      	movs	r1, #12
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9b2 	bl	8009480 <SDMMC_GetCmdResp1>
 800911c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800911e:	69fb      	ldr	r3, [r7, #28]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3720      	adds	r7, #32
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	05f5e100 	.word	0x05f5e100

0800912c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08a      	sub	sp, #40	; 0x28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009138:	2300      	movs	r3, #0
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009140:	2307      	movs	r3, #7
 8009142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009144:	2340      	movs	r3, #64	; 0x40
 8009146:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009148:	2300      	movs	r3, #0
 800914a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800914c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009150:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009152:	f107 0310 	add.w	r3, r7, #16
 8009156:	4619      	mov	r1, r3
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7ff fe97 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800915e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009162:	2107      	movs	r1, #7
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f98b 	bl	8009480 <SDMMC_GetCmdResp1>
 800916a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800916e:	4618      	mov	r0, r3
 8009170:	3728      	adds	r7, #40	; 0x28
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b088      	sub	sp, #32
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800917e:	2300      	movs	r3, #0
 8009180:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800918a:	2300      	movs	r3, #0
 800918c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800918e:	2300      	movs	r3, #0
 8009190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009196:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009198:	f107 0308 	add.w	r3, r7, #8
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff fe74 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f941 	bl	800942c <SDMMC_GetCmdError>
 80091aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ac:	69fb      	ldr	r3, [r7, #28]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3720      	adds	r7, #32
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b088      	sub	sp, #32
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80091be:	2300      	movs	r3, #0
 80091c0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80091c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80091c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80091c8:	2308      	movs	r3, #8
 80091ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091cc:	2340      	movs	r3, #64	; 0x40
 80091ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091da:	f107 0308 	add.w	r3, r7, #8
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff fe53 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fb12 	bl	8009810 <SDMMC_GetCmdResp7>
 80091ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ee:	69fb      	ldr	r3, [r7, #28]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3720      	adds	r7, #32
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009202:	2300      	movs	r3, #0
 8009204:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800920a:	2337      	movs	r3, #55	; 0x37
 800920c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800920e:	2340      	movs	r3, #64	; 0x40
 8009210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800921a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800921c:	f107 0308 	add.w	r3, r7, #8
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7ff fe32 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009228:	f241 3288 	movw	r2, #5000	; 0x1388
 800922c:	2137      	movs	r1, #55	; 0x37
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f926 	bl	8009480 <SDMMC_GetCmdResp1>
 8009234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009236:	69fb      	ldr	r3, [r7, #28]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800924a:	2300      	movs	r3, #0
 800924c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <SDMMC_CmdAppOperCommand+0x48>)
 8009252:	4313      	orrs	r3, r2
 8009254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009256:	2329      	movs	r3, #41	; 0x29
 8009258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800925a:	2340      	movs	r3, #64	; 0x40
 800925c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800925e:	2300      	movs	r3, #0
 8009260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009266:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009268:	f107 0308 	add.w	r3, r7, #8
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff fe0c 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fa29 	bl	80096cc <SDMMC_GetCmdResp3>
 800927a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800927c:	69fb      	ldr	r3, [r7, #28]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3720      	adds	r7, #32
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	80100000 	.word	0x80100000

0800928c <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
 8009298:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800929e:	2306      	movs	r3, #6
 80092a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092a2:	2340      	movs	r3, #64	; 0x40
 80092a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ae:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092b0:	f107 0308 	add.w	r3, r7, #8
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff fde8 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80092bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c0:	2106      	movs	r1, #6
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f8dc 	bl	8009480 <SDMMC_GetCmdResp1>
 80092c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ca:	69fb      	ldr	r3, [r7, #28]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3720      	adds	r7, #32
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092dc:	2300      	movs	r3, #0
 80092de:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80092e4:	2333      	movs	r3, #51	; 0x33
 80092e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092e8:	2340      	movs	r3, #64	; 0x40
 80092ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092f6:	f107 0308 	add.w	r3, r7, #8
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff fdc5 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009302:	f241 3288 	movw	r2, #5000	; 0x1388
 8009306:	2133      	movs	r1, #51	; 0x33
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f8b9 	bl	8009480 <SDMMC_GetCmdResp1>
 800930e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009310:	69fb      	ldr	r3, [r7, #28]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b088      	sub	sp, #32
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009322:	2300      	movs	r3, #0
 8009324:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800932a:	2302      	movs	r3, #2
 800932c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800932e:	23c0      	movs	r3, #192	; 0xc0
 8009330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800933c:	f107 0308 	add.w	r3, r7, #8
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff fda2 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f97f 	bl	800964c <SDMMC_GetCmdResp2>
 800934e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009350:	69fb      	ldr	r3, [r7, #28]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3720      	adds	r7, #32
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b088      	sub	sp, #32
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800936c:	2309      	movs	r3, #9
 800936e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009370:	23c0      	movs	r3, #192	; 0xc0
 8009372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009374:	2300      	movs	r3, #0
 8009376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800937c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800937e:	f107 0308 	add.w	r3, r7, #8
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff fd81 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f95e 	bl	800964c <SDMMC_GetCmdResp2>
 8009390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009392:	69fb      	ldr	r3, [r7, #28]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3720      	adds	r7, #32
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80093ae:	2303      	movs	r3, #3
 80093b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093b2:	2340      	movs	r3, #64	; 0x40
 80093b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093b6:	2300      	movs	r3, #0
 80093b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fd60 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	2103      	movs	r1, #3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9af 	bl	8009734 <SDMMC_GetCmdResp6>
 80093d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093d8:	69fb      	ldr	r3, [r7, #28]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80093f4:	230d      	movs	r3, #13
 80093f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093f8:	2340      	movs	r3, #64	; 0x40
 80093fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093fc:	2300      	movs	r3, #0
 80093fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009404:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009406:	f107 0308 	add.w	r3, r7, #8
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff fd3d 	bl	8008e8c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009412:	f241 3288 	movw	r2, #5000	; 0x1388
 8009416:	210d      	movs	r1, #13
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f831 	bl	8009480 <SDMMC_GetCmdResp1>
 800941e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009420:	69fb      	ldr	r3, [r7, #28]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3720      	adds	r7, #32
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800942c:	b490      	push	{r4, r7}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009434:	4b10      	ldr	r3, [pc, #64]	; (8009478 <SDMMC_GetCmdError+0x4c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a10      	ldr	r2, [pc, #64]	; (800947c <SDMMC_GetCmdError+0x50>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	0a5b      	lsrs	r3, r3, #9
 8009440:	f241 3288 	movw	r2, #5000	; 0x1388
 8009444:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009448:	4623      	mov	r3, r4
 800944a:	1e5c      	subs	r4, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009450:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009454:	e00a      	b.n	800946c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0f2      	beq.n	8009448 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bc90      	pop	{r4, r7}
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	2000005c 	.word	0x2000005c
 800947c:	10624dd3 	.word	0x10624dd3

08009480 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	460b      	mov	r3, r1
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800948e:	4b6c      	ldr	r3, [pc, #432]	; (8009640 <SDMMC_GetCmdResp1+0x1c0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a6c      	ldr	r2, [pc, #432]	; (8009644 <SDMMC_GetCmdResp1+0x1c4>)
 8009494:	fba2 2303 	umull	r2, r3, r2, r3
 8009498:	0a5b      	lsrs	r3, r3, #9
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80094a0:	4623      	mov	r3, r4
 80094a2:	1e5c      	subs	r4, r3, #1
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ac:	e0c3      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0f2      	beq.n	80094a0 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094be:	f003 0304 	and.w	r3, r3, #4
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d004      	beq.n	80094d0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2204      	movs	r2, #4
 80094ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094cc:	2304      	movs	r3, #4
 80094ce:	e0b2      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e0a7      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f7ff fcfa 	bl	8008ee0 <SDMMC_GetCommandResponse>
 80094ec:	4603      	mov	r3, r0
 80094ee:	461a      	mov	r2, r3
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d001      	beq.n	80094fa <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e09d      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff fcf8 	bl	8008efa <SDMMC_GetResponse>
 800950a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	4b4e      	ldr	r3, [pc, #312]	; (8009648 <SDMMC_GetCmdResp1+0x1c8>)
 8009510:	4013      	ands	r3, r2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009516:	2300      	movs	r3, #0
 8009518:	e08d      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	da02      	bge.n	8009526 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009524:	e087      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009530:	2340      	movs	r3, #64	; 0x40
 8009532:	e080      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800953e:	2380      	movs	r3, #128	; 0x80
 8009540:	e079      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800954c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009550:	e071      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800955c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009560:	e069      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800956c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009570:	e061      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800957c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009580:	e059      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800958c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009590:	e051      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800959c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095a0:	e049      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80095ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095b0:	e041      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80095bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095c0:	e039      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80095cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095d0:	e031      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80095dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095e0:	e029      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80095ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095f0:	e021      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80095fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009600:	e019      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800960c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009610:	e011      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800961c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009620:	e009      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f003 0308 	and.w	r3, r3, #8
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800962c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009630:	e001      	b.n	8009636 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009636:	4618      	mov	r0, r3
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	bd90      	pop	{r4, r7, pc}
 800963e:	bf00      	nop
 8009640:	2000005c 	.word	0x2000005c
 8009644:	10624dd3 	.word	0x10624dd3
 8009648:	fdffe008 	.word	0xfdffe008

0800964c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800964c:	b490      	push	{r4, r7}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009654:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <SDMMC_GetCmdResp2+0x78>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1b      	ldr	r2, [pc, #108]	; (80096c8 <SDMMC_GetCmdResp2+0x7c>)
 800965a:	fba2 2303 	umull	r2, r3, r2, r3
 800965e:	0a5b      	lsrs	r3, r3, #9
 8009660:	f241 3288 	movw	r2, #5000	; 0x1388
 8009664:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009668:	4623      	mov	r3, r4
 800966a:	1e5c      	subs	r4, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009674:	e020      	b.n	80096b8 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0f2      	beq.n	8009668 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009686:	f003 0304 	and.w	r3, r3, #4
 800968a:	2b00      	cmp	r3, #0
 800968c:	d004      	beq.n	8009698 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2204      	movs	r2, #4
 8009692:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009694:	2304      	movs	r3, #4
 8009696:	e00f      	b.n	80096b8 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e004      	b.n	80096b8 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80096b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bc90      	pop	{r4, r7}
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	2000005c 	.word	0x2000005c
 80096c8:	10624dd3 	.word	0x10624dd3

080096cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80096cc:	b490      	push	{r4, r7}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80096d4:	4b15      	ldr	r3, [pc, #84]	; (800972c <SDMMC_GetCmdResp3+0x60>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a15      	ldr	r2, [pc, #84]	; (8009730 <SDMMC_GetCmdResp3+0x64>)
 80096da:	fba2 2303 	umull	r2, r3, r2, r3
 80096de:	0a5b      	lsrs	r3, r3, #9
 80096e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80096e8:	4623      	mov	r3, r4
 80096ea:	1e5c      	subs	r4, r3, #1
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096f4:	e015      	b.n	8009722 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0f2      	beq.n	80096e8 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009706:	f003 0304 	and.w	r3, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d004      	beq.n	8009718 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2204      	movs	r2, #4
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009714:	2304      	movs	r3, #4
 8009716:	e004      	b.n	8009722 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800971e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bc90      	pop	{r4, r7}
 800972a:	4770      	bx	lr
 800972c:	2000005c 	.word	0x2000005c
 8009730:	10624dd3 	.word	0x10624dd3

08009734 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009734:	b590      	push	{r4, r7, lr}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	460b      	mov	r3, r1
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009742:	4b31      	ldr	r3, [pc, #196]	; (8009808 <SDMMC_GetCmdResp6+0xd4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a31      	ldr	r2, [pc, #196]	; (800980c <SDMMC_GetCmdResp6+0xd8>)
 8009748:	fba2 2303 	umull	r2, r3, r2, r3
 800974c:	0a5b      	lsrs	r3, r3, #9
 800974e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009752:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009756:	4623      	mov	r3, r4
 8009758:	1e5c      	subs	r4, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800975e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009762:	e04c      	b.n	80097fe <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009768:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0f2      	beq.n	8009756 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2204      	movs	r2, #4
 8009780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009782:	2304      	movs	r3, #4
 8009784:	e03b      	b.n	80097fe <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009798:	2301      	movs	r3, #1
 800979a:	e030      	b.n	80097fe <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7ff fb9f 	bl	8008ee0 <SDMMC_GetCommandResponse>
 80097a2:	4603      	mov	r3, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d001      	beq.n	80097b0 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e026      	b.n	80097fe <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80097b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80097b8:	2100      	movs	r1, #0
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7ff fb9d 	bl	8008efa <SDMMC_GetResponse>
 80097c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d106      	bne.n	80097da <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	0c1b      	lsrs	r3, r3, #16
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e011      	b.n	80097fe <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80097e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097e8:	e009      	b.n	80097fe <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80097f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097f8:	e001      	b.n	80097fe <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80097fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80097fe:	4618      	mov	r0, r3
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd90      	pop	{r4, r7, pc}
 8009806:	bf00      	nop
 8009808:	2000005c 	.word	0x2000005c
 800980c:	10624dd3 	.word	0x10624dd3

08009810 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009810:	b490      	push	{r4, r7}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009818:	4b18      	ldr	r3, [pc, #96]	; (800987c <SDMMC_GetCmdResp7+0x6c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a18      	ldr	r2, [pc, #96]	; (8009880 <SDMMC_GetCmdResp7+0x70>)
 800981e:	fba2 2303 	umull	r2, r3, r2, r3
 8009822:	0a5b      	lsrs	r3, r3, #9
 8009824:	f241 3288 	movw	r2, #5000	; 0x1388
 8009828:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800982c:	4623      	mov	r3, r4
 800982e:	1e5c      	subs	r4, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d102      	bne.n	800983a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009834:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009838:	e01a      	b.n	8009870 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0f2      	beq.n	800982c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d004      	beq.n	800985c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2240      	movs	r2, #64	; 0x40
 8009856:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009858:	2304      	movs	r3, #4
 800985a:	e009      	b.n	8009870 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2240      	movs	r2, #64	; 0x40
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800986e:	2300      	movs	r3, #0
  
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bc90      	pop	{r4, r7}
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	2000005c 	.word	0x2000005c
 8009880:	10624dd3 	.word	0x10624dd3

08009884 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4613      	mov	r3, r2
 8009890:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009892:	2301      	movs	r3, #1
 8009894:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800989a:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 800989c:	7a5b      	ldrb	r3, [r3, #9]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d131      	bne.n	8009908 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098a6:	7a5b      	ldrb	r3, [r3, #9]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098ae:	2100      	movs	r1, #0
 80098b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80098b2:	4b19      	ldr	r3, [pc, #100]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098b4:	7a5b      	ldrb	r3, [r3, #9]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	4a17      	ldr	r2, [pc, #92]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098c4:	7a5b      	ldrb	r3, [r3, #9]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	4b13      	ldr	r3, [pc, #76]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098cc:	4413      	add	r3, r2
 80098ce:	79fa      	ldrb	r2, [r7, #7]
 80098d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80098d2:	4b11      	ldr	r3, [pc, #68]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098d4:	7a5b      	ldrb	r3, [r3, #9]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	b2d1      	uxtb	r1, r2
 80098dc:	4a0e      	ldr	r2, [pc, #56]	; (8009918 <FATFS_LinkDriverEx+0x94>)
 80098de:	7251      	strb	r1, [r2, #9]
 80098e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80098e2:	7dbb      	ldrb	r3, [r7, #22]
 80098e4:	3330      	adds	r3, #48	; 0x30
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	3301      	adds	r3, #1
 80098f0:	223a      	movs	r2, #58	; 0x3a
 80098f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	3302      	adds	r3, #2
 80098f8:	222f      	movs	r2, #47	; 0x2f
 80098fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3303      	adds	r3, #3
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
}
 800990a:	4618      	mov	r0, r3
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	2000028c 	.word	0x2000028c

0800991c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009926:	2200      	movs	r2, #0
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff ffaa 	bl	8009884 <FATFS_LinkDriverEx>
 8009930:	4603      	mov	r3, r0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009946:	f000 f879 	bl	8009a3c <BSP_SD_IsDetected>
 800994a:	4603      	mov	r3, r0
 800994c:	2b01      	cmp	r3, #1
 800994e:	d001      	beq.n	8009954 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009950:	2302      	movs	r3, #2
 8009952:	e012      	b.n	800997a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8009954:	480b      	ldr	r0, [pc, #44]	; (8009984 <BSP_SD_Init+0x48>)
 8009956:	f7fd fc57 	bl	8007208 <HAL_SD_Init>
 800995a:	4603      	mov	r3, r0
 800995c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d109      	bne.n	8009978 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009964:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009968:	4806      	ldr	r0, [pc, #24]	; (8009984 <BSP_SD_Init+0x48>)
 800996a:	f7fe fa2d 	bl	8007dc8 <HAL_SD_ConfigWideBusOperation>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009978:	79fb      	ldrb	r3, [r7, #7]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20000ccc 	.word	0x20000ccc

08009988 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af02      	add	r7, sp, #8
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	4806      	ldr	r0, [pc, #24]	; (80099c0 <BSP_SD_ReadBlocks+0x38>)
 80099a6:	f7fd fcbe 	bl	8007326 <HAL_SD_ReadBlocks>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20000ccc 	.word	0x20000ccc

080099c4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	4806      	ldr	r0, [pc, #24]	; (80099fc <BSP_SD_WriteBlocks+0x38>)
 80099e2:	f7fd fe36 	bl	8007652 <HAL_SD_WriteBlocks>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20000ccc 	.word	0x20000ccc

08009a00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009a04:	4805      	ldr	r0, [pc, #20]	; (8009a1c <BSP_SD_GetCardState+0x1c>)
 8009a06:	f7fe fa5b 	bl	8007ec0 <HAL_SD_GetCardState>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	bf14      	ite	ne
 8009a10:	2301      	movne	r3, #1
 8009a12:	2300      	moveq	r3, #0
 8009a14:	b2db      	uxtb	r3, r3
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000ccc 	.word	0x20000ccc

08009a20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	4803      	ldr	r0, [pc, #12]	; (8009a38 <BSP_SD_GetCardInfo+0x18>)
 8009a2c:	f7fe f9a0 	bl	8007d70 <HAL_SD_GetCardInfo>
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	20000ccc 	.word	0x20000ccc

08009a3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009a42:	2301      	movs	r3, #1
 8009a44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009a46:	f000 f81d 	bl	8009a84 <BSP_PlatformIsDetected>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009a50:	2300      	movs	r3, #0
 8009a52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	b2db      	uxtb	r3, r3
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a64:	4904      	ldr	r1, [pc, #16]	; (8009a78 <MX_FATFS_Init+0x18>)
 8009a66:	4805      	ldr	r0, [pc, #20]	; (8009a7c <MX_FATFS_Init+0x1c>)
 8009a68:	f7ff ff58 	bl	800991c <FATFS_LinkDriver>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	461a      	mov	r2, r3
 8009a70:	4b03      	ldr	r3, [pc, #12]	; (8009a80 <MX_FATFS_Init+0x20>)
 8009a72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009a74:	bf00      	nop
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	200003fc 	.word	0x200003fc
 8009a7c:	0800d768 	.word	0x0800d768
 8009a80:	200003f8 	.word	0x200003f8

08009a84 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a92:	4806      	ldr	r0, [pc, #24]	; (8009aac <BSP_PlatformIsDetected+0x28>)
 8009a94:	f7fb faae 	bl	8004ff4 <HAL_GPIO_ReadPin>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
}  
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	40022000 	.word	0x40022000

08009ab0 <SCB_EnableICache>:
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009ab4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009ab8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009abc:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <SCB_EnableICache+0x3c>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009ac8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <SCB_EnableICache+0x3c>)
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	4a06      	ldr	r2, [pc, #24]	; (8009aec <SCB_EnableICache+0x3c>)
 8009ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ad6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009ad8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009adc:	f3bf 8f6f 	isb	sy
}
 8009ae0:	bf00      	nop
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	e000ed00 	.word	0xe000ed00

08009af0 <SCB_EnableDCache>:
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8009af6:	4b1d      	ldr	r3, [pc, #116]	; (8009b6c <SCB_EnableDCache+0x7c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009afe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8009b02:	4b1a      	ldr	r3, [pc, #104]	; (8009b6c <SCB_EnableDCache+0x7c>)
 8009b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b08:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	0b5b      	lsrs	r3, r3, #13
 8009b0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009b12:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	08db      	lsrs	r3, r3, #3
 8009b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b1c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009b26:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009b2c:	490f      	ldr	r1, [pc, #60]	; (8009b6c <SCB_EnableDCache+0x7c>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	1e5a      	subs	r2, r3, #1
 8009b38:	60ba      	str	r2, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1ef      	bne.n	8009b1e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	1e5a      	subs	r2, r3, #1
 8009b42:	60fa      	str	r2, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e5      	bne.n	8009b14 <SCB_EnableDCache+0x24>
 8009b48:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009b4c:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <SCB_EnableDCache+0x7c>)
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	4a06      	ldr	r2, [pc, #24]	; (8009b6c <SCB_EnableDCache+0x7c>)
 8009b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b56:	6153      	str	r3, [r2, #20]
 8009b58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009b5c:	f3bf 8f6f 	isb	sy
}
 8009b60:	bf00      	nop
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	e000ed00 	.word	0xe000ed00

08009b70 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13){
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b80:	d108      	bne.n	8009b94 <HAL_GPIO_EXTI_Callback+0x24>
		BSP_TS_GetState(&TS_State);
 8009b82:	4809      	ldr	r0, [pc, #36]	; (8009ba8 <HAL_GPIO_EXTI_Callback+0x38>)
 8009b84:	f7f8 fc92 	bl	80024ac <BSP_TS_GetState>
		flagTouch=1;
 8009b88:	4b08      	ldr	r3, [pc, #32]	; (8009bac <HAL_GPIO_EXTI_Callback+0x3c>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8009b8e:	2064      	movs	r0, #100	; 0x64
 8009b90:	f7f8 fe34 	bl	80027fc <HAL_Delay>
	}
	if(GPIO_Pin == GPIO_PIN_0){
 8009b94:	88fb      	ldrh	r3, [r7, #6]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d102      	bne.n	8009ba0 <HAL_GPIO_EXTI_Callback+0x30>
		flagPrintMenu=1;
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <HAL_GPIO_EXTI_Callback+0x40>)
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	701a      	strb	r2, [r3, #0]
	}
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000f20 	.word	0x20000f20
 8009bac:	20000299 	.word	0x20000299
 8009bb0:	2000029a 	.word	0x2000029a

08009bb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)  // timer confg 2 segundos - temperatura
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a15      	ldr	r2, [pc, #84]	; (8009c18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d102      	bne.n	8009bcc <HAL_TIM_PeriodElapsedCallback+0x18>
			  flagTemperatura=1;
 8009bc6:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8009bc8:	2201      	movs	r2, #1
 8009bca:	701a      	strb	r2, [r3, #0]

	if(htim->Instance == TIM6) //timer confg a 1segundo - contagem global do tempo
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d106      	bne.n	8009be4 <HAL_TIM_PeriodElapsedCallback+0x30>
		counter++;
 8009bd6:	4b13      	ldr	r3, [pc, #76]	; (8009c24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	3301      	adds	r3, #1
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	4b10      	ldr	r3, [pc, #64]	; (8009c24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8009be2:	701a      	strb	r2, [r3, #0]

	if(htim->Instance == TIM13) //timer confg a 1segundo - contagem tempo max da jogada
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a0f      	ldr	r2, [pc, #60]	; (8009c28 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d10e      	bne.n	8009c0c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		counterPlay--;
 8009bee:	4b0f      	ldr	r3, [pc, #60]	; (8009c2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8009bfa:	701a      	strb	r2, [r3, #0]
	if(counterPlay == 0 )
 8009bfc:	4b0b      	ldr	r3, [pc, #44]	; (8009c2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d102      	bne.n	8009c0c <HAL_TIM_PeriodElapsedCallback+0x58>
		counterPlay =20;
 8009c06:	4b09      	ldr	r3, [pc, #36]	; (8009c2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8009c08:	2214      	movs	r2, #20
 8009c0a:	701a      	strb	r2, [r3, #0]
	}
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	40001400 	.word	0x40001400
 8009c1c:	20000298 	.word	0x20000298
 8009c20:	40001000 	.word	0x40001000
 8009c24:	2000029b 	.word	0x2000029b
 8009c28:	40001c00 	.word	0x40001c00
 8009c2c:	20000059 	.word	0x20000059

08009c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c30:	b598      	push	{r3, r4, r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	displayMenu=TRUE;
 8009c34:	4b3c      	ldr	r3, [pc, #240]	; (8009d28 <main+0xf8>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8009c3a:	f7ff ff39 	bl	8009ab0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8009c3e:	f7ff ff57 	bl	8009af0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c42:	f7f8 fd7d 	bl	8002740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c46:	f000 f87f 	bl	8009d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c4a:	f000 fc53 	bl	800a4f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009c4e:	f000 f91d 	bl	8009e8c <MX_ADC1_Init>
  MX_DMA2D_Init();
 8009c52:	f000 f96f 	bl	8009f34 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8009c56:	f000 f9a5 	bl	8009fa4 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8009c5a:	f000 fbfd 	bl	800a458 <MX_FMC_Init>
  MX_LTDC_Init();
 8009c5e:	f000 fa95 	bl	800a18c <MX_LTDC_Init>
  MX_TIM6_Init();
 8009c62:	f000 fb65 	bl	800a330 <MX_TIM6_Init>
  MX_TIM7_Init();
 8009c66:	f000 fb9b 	bl	800a3a0 <MX_TIM7_Init>
  MX_SDMMC2_SD_Init();
 8009c6a:	f000 fb41 	bl	800a2f0 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 8009c6e:	f7ff fef7 	bl	8009a60 <MX_FATFS_Init>
  MX_TIM13_Init();
 8009c72:	f000 fbcd 	bl	800a410 <MX_TIM13_Init>

  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8009c76:	2001      	movs	r0, #1
 8009c78:	f7f6 ffec 	bl	8000c54 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	f7f6 ffe9 	bl	8000c54 <BSP_LED_Init>
  HAL_ADC_Start(&hadc1);
 8009c82:	482a      	ldr	r0, [pc, #168]	; (8009d2c <main+0xfc>)
 8009c84:	f7f8 fe20 	bl	80028c8 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8009c88:	4829      	ldr	r0, [pc, #164]	; (8009d30 <main+0x100>)
 8009c8a:	f7fe fce7 	bl	800865c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8009c8e:	4829      	ldr	r0, [pc, #164]	; (8009d34 <main+0x104>)
 8009c90:	f7fe fce4 	bl	800865c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8009c94:	4828      	ldr	r0, [pc, #160]	; (8009d38 <main+0x108>)
 8009c96:	f7fe fce1 	bl	800865c <HAL_TIM_Base_Start_IT>
  LCD_Config();
 8009c9a:	f000 fce5 	bl	800a668 <LCD_Config>
  printBoardGame();
 8009c9e:	f000 fd43 	bl	800a728 <printBoardGame>
  printScoreTable();
 8009ca2:	f000 fe0d 	bl	800a8c0 <printScoreTable>
  firstPlays ();
 8009ca6:	f000 fe83 	bl	800a9b0 <firstPlays>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8009caa:	f7f7 fba5 	bl	80013f8 <BSP_LCD_GetXSize>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	b29c      	uxth	r4, r3
 8009cb2:	f7f7 fbad 	bl	8001410 <BSP_LCD_GetYSize>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7f8 fb63 	bl	8002388 <BSP_TS_Init>
   BSP_TS_ITConfig();
 8009cc2:	f7f8 fbc1 	bl	8002448 <BSP_TS_ITConfig>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   printMenu();
 8009cc6:	f000 feb1 	bl	800aa2c <printMenu>

  while (1)
  {
	  if(flagTemperatura)
 8009cca:	4b1c      	ldr	r3, [pc, #112]	; (8009d3c <main+0x10c>)
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <main+0xa8>
	  {
		  TempCalc ();
 8009cd4:	f000 fe34 	bl	800a940 <TempCalc>
	  }

	  if(displayMenu){
 8009cd8:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <main+0xf8>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00f      	beq.n	8009d00 <main+0xd0>

		  printMenu();
 8009ce0:	f000 fea4 	bl	800aa2c <printMenu>

		  if(flagTouch){
 8009ce4:	4b16      	ldr	r3, [pc, #88]	; (8009d40 <main+0x110>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <main+0xc2>

			  touchMenu();
 8009cee:	f000 ff5b 	bl	800aba8 <touchMenu>
		  }

		  if(!displayMenu){
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <main+0xf8>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e7      	bne.n	8009cca <main+0x9a>
			  printBoardGame();
 8009cfa:	f000 fd15 	bl	800a728 <printBoardGame>
 8009cfe:	e7e4      	b.n	8009cca <main+0x9a>
			 // findPossiblePlaces(playerTurn);
		  }
	  }

	  else{
		  if(flagTouch){
 8009d00:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <main+0x110>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <main+0xe0>
			  flagTouch=0;
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <main+0x110>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
			 // gameStats(playerTurn);
			 // refreshBoard();

		  }

		  if(flagPrintMenu){
 8009d10:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <main+0x114>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0d7      	beq.n	8009cca <main+0x9a>
			  flagPrintMenu=0;
 8009d1a:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <main+0x114>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	701a      	strb	r2, [r3, #0]
			 // BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
			//  BSP_LCD_FillRect(boardX0-1, boardY0, xSize-(boardX0-1), ySize-boardY0);
			  printMenu();
 8009d20:	f000 fe84 	bl	800aa2c <printMenu>
	  if(flagTemperatura)
 8009d24:	e7d1      	b.n	8009cca <main+0x9a>
 8009d26:	bf00      	nop
 8009d28:	20000e84 	.word	0x20000e84
 8009d2c:	20000df8 	.word	0x20000df8
 8009d30:	20000e88 	.word	0x20000e88
 8009d34:	20000f60 	.word	0x20000f60
 8009d38:	20000e44 	.word	0x20000e44
 8009d3c:	20000298 	.word	0x20000298
 8009d40:	20000299 	.word	0x20000299
 8009d44:	2000029a 	.word	0x2000029a

08009d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b0b8      	sub	sp, #224	; 0xe0
 8009d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009d52:	2234      	movs	r2, #52	; 0x34
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fbca 	bl	800b4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	605a      	str	r2, [r3, #4]
 8009d66:	609a      	str	r2, [r3, #8]
 8009d68:	60da      	str	r2, [r3, #12]
 8009d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d6c:	f107 0308 	add.w	r3, r7, #8
 8009d70:	2290      	movs	r2, #144	; 0x90
 8009d72:	2100      	movs	r1, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f001 fbbb 	bl	800b4f0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d7a:	4b41      	ldr	r3, [pc, #260]	; (8009e80 <SystemClock_Config+0x138>)
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7e:	4a40      	ldr	r2, [pc, #256]	; (8009e80 <SystemClock_Config+0x138>)
 8009d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d84:	6413      	str	r3, [r2, #64]	; 0x40
 8009d86:	4b3e      	ldr	r3, [pc, #248]	; (8009e80 <SystemClock_Config+0x138>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d8e:	607b      	str	r3, [r7, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d92:	4b3c      	ldr	r3, [pc, #240]	; (8009e84 <SystemClock_Config+0x13c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a3b      	ldr	r2, [pc, #236]	; (8009e84 <SystemClock_Config+0x13c>)
 8009d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	4b39      	ldr	r3, [pc, #228]	; (8009e84 <SystemClock_Config+0x13c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009da6:	603b      	str	r3, [r7, #0]
 8009da8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009daa:	2301      	movs	r3, #1
 8009dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009db8:	2302      	movs	r3, #2
 8009dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8009dc6:	2319      	movs	r3, #25
 8009dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8009dcc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8009dda:	2308      	movs	r3, #8
 8009ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009de0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fc f9dd 	bl	80061a4 <HAL_RCC_OscConfig>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8009df0:	f000 ff36 	bl	800ac60 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009df4:	f7fc f986 	bl	8006104 <HAL_PWREx_EnableOverDrive>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8009dfe:	f000 ff2f 	bl	800ac60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e02:	230f      	movs	r3, #15
 8009e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009e14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8009e24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009e28:	2106      	movs	r1, #6
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fc fc2c 	bl	8006688 <HAL_RCC_ClockConfig>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009e36:	f000 ff13 	bl	800ac60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 8009e3a:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <SystemClock_Config+0x140>)
 8009e3c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8009e3e:	23c0      	movs	r3, #192	; 0xc0
 8009e40:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8009e42:	2302      	movs	r3, #2
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009e46:	2302      	movs	r3, #2
 8009e48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8009e52:	2300      	movs	r3, #0
 8009e54:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e62:	f107 0308 	add.w	r3, r7, #8
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fc fda8 	bl	80069bc <HAL_RCCEx_PeriphCLKConfig>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8009e72:	f000 fef5 	bl	800ac60 <Error_Handler>
  }
}
 8009e76:	bf00      	nop
 8009e78:	37e0      	adds	r7, #224	; 0xe0
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	40023800 	.word	0x40023800
 8009e84:	40007000 	.word	0x40007000
 8009e88:	04200008 	.word	0x04200008

08009e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009e92:	463b      	mov	r3, r7
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	609a      	str	r2, [r3, #8]
 8009e9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8009e9e:	4b21      	ldr	r3, [pc, #132]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ea0:	4a21      	ldr	r2, [pc, #132]	; (8009f28 <MX_ADC1_Init+0x9c>)
 8009ea2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009ea4:	4b1f      	ldr	r3, [pc, #124]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ea6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009eaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009eac:	4b1d      	ldr	r3, [pc, #116]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009eb2:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009eb8:	4b1a      	ldr	r3, [pc, #104]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009ebe:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009ec6:	4b17      	ldr	r3, [pc, #92]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009ecc:	4b15      	ldr	r3, [pc, #84]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ece:	4a17      	ldr	r2, [pc, #92]	; (8009f2c <MX_ADC1_Init+0xa0>)
 8009ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009ed2:	4b14      	ldr	r3, [pc, #80]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009ed8:	4b12      	ldr	r3, [pc, #72]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009eda:	2201      	movs	r2, #1
 8009edc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009ede:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009eec:	480d      	ldr	r0, [pc, #52]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009eee:	f7f8 fca7 	bl	8002840 <HAL_ADC_Init>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009ef8:	f000 feb2 	bl	800ac60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009efc:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <MX_ADC1_Init+0xa4>)
 8009efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009f00:	2301      	movs	r3, #1
 8009f02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009f04:	2303      	movs	r3, #3
 8009f06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f08:	463b      	mov	r3, r7
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4805      	ldr	r0, [pc, #20]	; (8009f24 <MX_ADC1_Init+0x98>)
 8009f0e:	f7f8 fda9 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009f18:	f000 fea2 	bl	800ac60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	20000df8 	.word	0x20000df8
 8009f28:	40012000 	.word	0x40012000
 8009f2c:	0f000001 	.word	0x0f000001
 8009f30:	10000012 	.word	0x10000012

08009f34 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8009f38:	4b18      	ldr	r3, [pc, #96]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f3a:	4a19      	ldr	r2, [pc, #100]	; (8009fa0 <MX_DMA2D_Init+0x6c>)
 8009f3c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8009f3e:	4b17      	ldr	r3, [pc, #92]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009f44:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009f4a:	4b14      	ldr	r3, [pc, #80]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8009f50:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009f56:	4b11      	ldr	r3, [pc, #68]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009f5c:	4b0f      	ldr	r3, [pc, #60]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8009f62:	4b0e      	ldr	r3, [pc, #56]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8009f68:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8009f6e:	4b0b      	ldr	r3, [pc, #44]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009f74:	4809      	ldr	r0, [pc, #36]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f76:	f7f9 fa71 	bl	800345c <HAL_DMA2D_Init>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8009f80:	f000 fe6e 	bl	800ac60 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8009f84:	2101      	movs	r1, #1
 8009f86:	4805      	ldr	r0, [pc, #20]	; (8009f9c <MX_DMA2D_Init+0x68>)
 8009f88:	f7f9 fbd6 	bl	8003738 <HAL_DMA2D_ConfigLayer>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8009f92:	f000 fe65 	bl	800ac60 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8009f96:	bf00      	nop
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20000ec8 	.word	0x20000ec8
 8009fa0:	4002b000 	.word	0x4002b000

08009fa4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b0aa      	sub	sp, #168	; 0xa8
 8009fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8009faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009fae:	2200      	movs	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	605a      	str	r2, [r3, #4]
 8009fb4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8009fb6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009fba:	2224      	movs	r2, #36	; 0x24
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f001 fa96 	bl	800b4f0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8009fc4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	609a      	str	r2, [r3, #8]
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	611a      	str	r2, [r3, #16]
 8009fd4:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8009fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fda:	2234      	movs	r2, #52	; 0x34
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 fa86 	bl	800b4f0 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	222c      	movs	r2, #44	; 0x2c
 8009fe8:	2100      	movs	r1, #0
 8009fea:	4618      	mov	r0, r3
 8009fec:	f001 fa80 	bl	800b4f0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8009ff0:	4b64      	ldr	r3, [pc, #400]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009ff2:	4a65      	ldr	r2, [pc, #404]	; (800a188 <MX_DSIHOST_DSI_Init+0x1e4>)
 8009ff4:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8009ff6:	4b63      	ldr	r3, [pc, #396]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8009ffc:	4b61      	ldr	r3, [pc, #388]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009ffe:	2204      	movs	r2, #4
 800a000:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800a002:	4b60      	ldr	r3, [pc, #384]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a004:	2200      	movs	r2, #0
 800a006:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800a008:	2314      	movs	r3, #20
 800a00a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800a00e:	2301      	movs	r3, #1
 800a010:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800a014:	2300      	movs	r3, #0
 800a016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800a01a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a01e:	4619      	mov	r1, r3
 800a020:	4858      	ldr	r0, [pc, #352]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a022:	f7f9 fd0b 	bl	8003a3c <HAL_DSI_Init>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800a02c:	f000 fe18 	bl	800ac60 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800a030:	2301      	movs	r3, #1
 800a032:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800a050:	2300      	movs	r3, #0
 800a052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800a05c:	2300      	movs	r3, #0
 800a05e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800a062:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a066:	4619      	mov	r1, r3
 800a068:	4846      	ldr	r0, [pc, #280]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a06a:	f7fa fb23 	bl	80046b4 <HAL_DSI_ConfigHostTimeouts>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800a074:	f000 fdf4 	bl	800ac60 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800a078:	231c      	movs	r3, #28
 800a07a:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800a07c:	2321      	movs	r3, #33	; 0x21
 800a07e:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800a080:	230f      	movs	r3, #15
 800a082:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800a084:	2319      	movs	r3, #25
 800a086:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800a090:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a094:	4619      	mov	r1, r3
 800a096:	483b      	ldr	r0, [pc, #236]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a098:	f7fa faa2 	bl	80045e0 <HAL_DSI_ConfigPhyTimer>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800a0a2:	f000 fddd 	bl	800ac60 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800a0a6:	2104      	movs	r1, #4
 800a0a8:	4836      	ldr	r0, [pc, #216]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a0aa:	f7fa fa71 	bl	8004590 <HAL_DSI_ConfigFlowControl>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800a0b4:	f000 fdd4 	bl	800ac60 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800a0b8:	f242 7110 	movw	r1, #10000	; 0x2710
 800a0bc:	4831      	ldr	r0, [pc, #196]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a0be:	f7fa fcb7 	bl	8004a30 <HAL_DSI_SetLowPowerRXFilter>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800a0c8:	f000 fdca 	bl	800ac60 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	482d      	ldr	r0, [pc, #180]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a0d0:	f7f9 fe42 	bl	8003d58 <HAL_DSI_ConfigErrorMonitor>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800a0da:	f000 fdc1 	bl	800ac60 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800a102:	2300      	movs	r3, #0
 800a104:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800a106:	2300      	movs	r3, #0
 800a108:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800a10e:	2300      	movs	r3, #0
 800a110:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800a112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a116:	4619      	mov	r1, r3
 800a118:	481a      	ldr	r0, [pc, #104]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a11a:	f7fa f9db 	bl	80044d4 <HAL_DSI_ConfigCommand>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800a124:	f000 fd9c 	bl	800ac60 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800a12c:	2305      	movs	r3, #5
 800a12e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800a130:	f44f 7320 	mov.w	r3, #640	; 0x280
 800a134:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800a136:	2310      	movs	r3, #16
 800a138:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800a13e:	2304      	movs	r3, #4
 800a140:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800a142:	2302      	movs	r3, #2
 800a144:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800a146:	2300      	movs	r3, #0
 800a148:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800a14a:	2300      	movs	r3, #0
 800a14c:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800a14e:	2340      	movs	r3, #64	; 0x40
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800a152:	2300      	movs	r3, #0
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800a156:	463b      	mov	r3, r7
 800a158:	4619      	mov	r1, r3
 800a15a:	480a      	ldr	r0, [pc, #40]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a15c:	f7fa f8e0 	bl	8004320 <HAL_DSI_ConfigAdaptedCommandMode>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800a166:	f000 fd7b 	bl	800ac60 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800a16a:	2100      	movs	r1, #0
 800a16c:	4805      	ldr	r0, [pc, #20]	; (800a184 <MX_DSIHOST_DSI_Init+0x1e0>)
 800a16e:	f7f9 feaf 	bl	8003ed0 <HAL_DSI_SetGenericVCID>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800a178:	f000 fd72 	bl	800ac60 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800a17c:	bf00      	nop
 800a17e:	37a8      	adds	r7, #168	; 0xa8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000c4c 	.word	0x20000c4c
 800a188:	40016c00 	.word	0x40016c00

0800a18c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b09a      	sub	sp, #104	; 0x68
 800a190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800a192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a196:	2234      	movs	r2, #52	; 0x34
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 f9a8 	bl	800b4f0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800a1a0:	463b      	mov	r3, r7
 800a1a2:	2234      	movs	r2, #52	; 0x34
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f001 f9a2 	bl	800b4f0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800a1ac:	4b4e      	ldr	r3, [pc, #312]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1ae:	4a4f      	ldr	r2, [pc, #316]	; (800a2ec <MX_LTDC_Init+0x160>)
 800a1b0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a1b2:	4b4d      	ldr	r3, [pc, #308]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a1b8:	4b4b      	ldr	r3, [pc, #300]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a1be:	4b4a      	ldr	r3, [pc, #296]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a1c4:	4b48      	ldr	r3, [pc, #288]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800a1ca:	4b47      	ldr	r3, [pc, #284]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1cc:	2207      	movs	r2, #7
 800a1ce:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800a1d0:	4b45      	ldr	r3, [pc, #276]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800a1d6:	4b44      	ldr	r3, [pc, #272]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1d8:	220e      	movs	r2, #14
 800a1da:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800a1dc:	4b42      	ldr	r3, [pc, #264]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1de:	2205      	movs	r2, #5
 800a1e0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800a1e2:	4b41      	ldr	r3, [pc, #260]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1e4:	f240 228e 	movw	r2, #654	; 0x28e
 800a1e8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800a1ea:	4b3f      	ldr	r3, [pc, #252]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1ec:	f240 12e5 	movw	r2, #485	; 0x1e5
 800a1f0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800a1f2:	4b3d      	ldr	r3, [pc, #244]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1f4:	f44f 7225 	mov.w	r2, #660	; 0x294
 800a1f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800a1fa:	4b3b      	ldr	r3, [pc, #236]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a1fc:	f240 12e7 	movw	r2, #487	; 0x1e7
 800a200:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a202:	4b39      	ldr	r3, [pc, #228]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a20a:	4b37      	ldr	r3, [pc, #220]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a212:	4b35      	ldr	r3, [pc, #212]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a21a:	4833      	ldr	r0, [pc, #204]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a21c:	f7fb fc7a 	bl	8005b14 <HAL_LTDC_Init>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800a226:	f000 fd1b 	bl	800ac60 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800a23a:	2300      	movs	r3, #0
 800a23c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800a246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a24a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800a24c:	2305      	movs	r3, #5
 800a24e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a26e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a272:	2200      	movs	r2, #0
 800a274:	4619      	mov	r1, r3
 800a276:	481c      	ldr	r0, [pc, #112]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a278:	f7fb fd1c 	bl	8005cb4 <HAL_LTDC_ConfigLayer>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800a282:	f000 fced 	bl	800ac60 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800a28a:	2300      	movs	r3, #0
 800a28c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800a296:	2300      	movs	r3, #0
 800a298:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800a2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800a2a8:	2305      	movs	r3, #5
 800a2aa:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4805      	ldr	r0, [pc, #20]	; (800a2e8 <MX_LTDC_Init+0x15c>)
 800a2d2:	f7fb fcef 	bl	8005cb4 <HAL_LTDC_ConfigLayer>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800a2dc:	f000 fcc0 	bl	800ac60 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800a2e0:	bf00      	nop
 800a2e2:	3768      	adds	r7, #104	; 0x68
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	20000d50 	.word	0x20000d50
 800a2ec:	40016800 	.word	0x40016800

0800a2f0 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <MX_SDMMC2_SD_Init+0x38>)
 800a2f6:	4a0d      	ldr	r2, [pc, #52]	; (800a32c <MX_SDMMC2_SD_Init+0x3c>)
 800a2f8:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a2fa:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <MX_SDMMC2_SD_Init+0x38>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800a300:	4b09      	ldr	r3, [pc, #36]	; (800a328 <MX_SDMMC2_SD_Init+0x38>)
 800a302:	2200      	movs	r2, #0
 800a304:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a306:	4b08      	ldr	r3, [pc, #32]	; (800a328 <MX_SDMMC2_SD_Init+0x38>)
 800a308:	2200      	movs	r2, #0
 800a30a:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800a30c:	4b06      	ldr	r3, [pc, #24]	; (800a328 <MX_SDMMC2_SD_Init+0x38>)
 800a30e:	2200      	movs	r2, #0
 800a310:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a312:	4b05      	ldr	r3, [pc, #20]	; (800a328 <MX_SDMMC2_SD_Init+0x38>)
 800a314:	2200      	movs	r2, #0
 800a316:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800a318:	4b03      	ldr	r3, [pc, #12]	; (800a328 <MX_SDMMC2_SD_Init+0x38>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800a31e:	bf00      	nop
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	20000ccc 	.word	0x20000ccc
 800a32c:	40011c00 	.word	0x40011c00

0800a330 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a336:	1d3b      	adds	r3, r7, #4
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
 800a33c:	605a      	str	r2, [r3, #4]
 800a33e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a340:	4b15      	ldr	r3, [pc, #84]	; (800a398 <MX_TIM6_Init+0x68>)
 800a342:	4a16      	ldr	r2, [pc, #88]	; (800a39c <MX_TIM6_Init+0x6c>)
 800a344:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800a346:	4b14      	ldr	r3, [pc, #80]	; (800a398 <MX_TIM6_Init+0x68>)
 800a348:	f242 720f 	movw	r2, #9999	; 0x270f
 800a34c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a34e:	4b12      	ldr	r3, [pc, #72]	; (800a398 <MX_TIM6_Init+0x68>)
 800a350:	2200      	movs	r2, #0
 800a352:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800a354:	4b10      	ldr	r3, [pc, #64]	; (800a398 <MX_TIM6_Init+0x68>)
 800a356:	f242 720f 	movw	r2, #9999	; 0x270f
 800a35a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a35c:	4b0e      	ldr	r3, [pc, #56]	; (800a398 <MX_TIM6_Init+0x68>)
 800a35e:	2200      	movs	r2, #0
 800a360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a362:	480d      	ldr	r0, [pc, #52]	; (800a398 <MX_TIM6_Init+0x68>)
 800a364:	f7fe f94e 	bl	8008604 <HAL_TIM_Base_Init>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800a36e:	f000 fc77 	bl	800ac60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a372:	2300      	movs	r3, #0
 800a374:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a376:	2300      	movs	r3, #0
 800a378:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a37a:	1d3b      	adds	r3, r7, #4
 800a37c:	4619      	mov	r1, r3
 800a37e:	4806      	ldr	r0, [pc, #24]	; (800a398 <MX_TIM6_Init+0x68>)
 800a380:	f7fe fb7e 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800a38a:	f000 fc69 	bl	800ac60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000e88 	.word	0x20000e88
 800a39c:	40001000 	.word	0x40001000

0800a3a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a3a6:	1d3b      	adds	r3, r7, #4
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	601a      	str	r2, [r3, #0]
 800a3ac:	605a      	str	r2, [r3, #4]
 800a3ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800a3b0:	4b15      	ldr	r3, [pc, #84]	; (800a408 <MX_TIM7_Init+0x68>)
 800a3b2:	4a16      	ldr	r2, [pc, #88]	; (800a40c <MX_TIM7_Init+0x6c>)
 800a3b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19999;
 800a3b6:	4b14      	ldr	r3, [pc, #80]	; (800a408 <MX_TIM7_Init+0x68>)
 800a3b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800a3bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3be:	4b12      	ldr	r3, [pc, #72]	; (800a408 <MX_TIM7_Init+0x68>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800a3c4:	4b10      	ldr	r3, [pc, #64]	; (800a408 <MX_TIM7_Init+0x68>)
 800a3c6:	f242 720f 	movw	r2, #9999	; 0x270f
 800a3ca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <MX_TIM7_Init+0x68>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a3d2:	480d      	ldr	r0, [pc, #52]	; (800a408 <MX_TIM7_Init+0x68>)
 800a3d4:	f7fe f916 	bl	8008604 <HAL_TIM_Base_Init>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800a3de:	f000 fc3f 	bl	800ac60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a3ea:	1d3b      	adds	r3, r7, #4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4806      	ldr	r0, [pc, #24]	; (800a408 <MX_TIM7_Init+0x68>)
 800a3f0:	f7fe fb46 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800a3fa:	f000 fc31 	bl	800ac60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800a3fe:	bf00      	nop
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000f60 	.word	0x20000f60
 800a40c:	40001400 	.word	0x40001400

0800a410 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800a414:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <MX_TIM13_Init+0x40>)
 800a416:	4a0f      	ldr	r2, [pc, #60]	; (800a454 <MX_TIM13_Init+0x44>)
 800a418:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 9999;
 800a41a:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <MX_TIM13_Init+0x40>)
 800a41c:	f242 720f 	movw	r2, #9999	; 0x270f
 800a420:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <MX_TIM13_Init+0x40>)
 800a424:	2200      	movs	r2, #0
 800a426:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800a428:	4b09      	ldr	r3, [pc, #36]	; (800a450 <MX_TIM13_Init+0x40>)
 800a42a:	f242 720f 	movw	r2, #9999	; 0x270f
 800a42e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <MX_TIM13_Init+0x40>)
 800a432:	2200      	movs	r2, #0
 800a434:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a436:	4b06      	ldr	r3, [pc, #24]	; (800a450 <MX_TIM13_Init+0x40>)
 800a438:	2200      	movs	r2, #0
 800a43a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800a43c:	4804      	ldr	r0, [pc, #16]	; (800a450 <MX_TIM13_Init+0x40>)
 800a43e:	f7fe f8e1 	bl	8008604 <HAL_TIM_Base_Init>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800a448:	f000 fc0a 	bl	800ac60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800a44c:	bf00      	nop
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	20000e44 	.word	0x20000e44
 800a454:	40001c00 	.word	0x40001c00

0800a458 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b088      	sub	sp, #32
 800a45c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a45e:	1d3b      	adds	r3, r7, #4
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	609a      	str	r2, [r3, #8]
 800a468:	60da      	str	r2, [r3, #12]
 800a46a:	611a      	str	r2, [r3, #16]
 800a46c:	615a      	str	r2, [r3, #20]
 800a46e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a470:	4b1e      	ldr	r3, [pc, #120]	; (800a4ec <MX_FMC_Init+0x94>)
 800a472:	4a1f      	ldr	r2, [pc, #124]	; (800a4f0 <MX_FMC_Init+0x98>)
 800a474:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800a476:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <MX_FMC_Init+0x94>)
 800a478:	2201      	movs	r2, #1
 800a47a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a47c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ec <MX_FMC_Init+0x94>)
 800a47e:	2200      	movs	r2, #0
 800a480:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800a482:	4b1a      	ldr	r3, [pc, #104]	; (800a4ec <MX_FMC_Init+0x94>)
 800a484:	2208      	movs	r2, #8
 800a486:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a488:	4b18      	ldr	r3, [pc, #96]	; (800a4ec <MX_FMC_Init+0x94>)
 800a48a:	2220      	movs	r2, #32
 800a48c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a48e:	4b17      	ldr	r3, [pc, #92]	; (800a4ec <MX_FMC_Init+0x94>)
 800a490:	2240      	movs	r2, #64	; 0x40
 800a492:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800a494:	4b15      	ldr	r3, [pc, #84]	; (800a4ec <MX_FMC_Init+0x94>)
 800a496:	2280      	movs	r2, #128	; 0x80
 800a498:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <MX_FMC_Init+0x94>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800a4a0:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <MX_FMC_Init+0x94>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800a4a6:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <MX_FMC_Init+0x94>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a4ac:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <MX_FMC_Init+0x94>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800a4ba:	2310      	movs	r3, #16
 800a4bc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800a4be:	2310      	movs	r3, #16
 800a4c0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800a4c2:	2310      	movs	r3, #16
 800a4c4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800a4c6:	2310      	movs	r3, #16
 800a4c8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800a4ca:	2310      	movs	r3, #16
 800a4cc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a4ce:	1d3b      	adds	r3, r7, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4806      	ldr	r0, [pc, #24]	; (800a4ec <MX_FMC_Init+0x94>)
 800a4d4:	f7fe f817 	bl	8008506 <HAL_SDRAM_Init>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800a4de:	f000 fbbf 	bl	800ac60 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800a4e2:	bf00      	nop
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000f2c 	.word	0x20000f2c
 800a4f0:	a0000140 	.word	0xa0000140

0800a4f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08e      	sub	sp, #56	; 0x38
 800a4f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	605a      	str	r2, [r3, #4]
 800a504:	609a      	str	r2, [r3, #8]
 800a506:	60da      	str	r2, [r3, #12]
 800a508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a50a:	4b53      	ldr	r3, [pc, #332]	; (800a658 <MX_GPIO_Init+0x164>)
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	4a52      	ldr	r2, [pc, #328]	; (800a658 <MX_GPIO_Init+0x164>)
 800a510:	f043 0310 	orr.w	r3, r3, #16
 800a514:	6313      	str	r3, [r2, #48]	; 0x30
 800a516:	4b50      	ldr	r3, [pc, #320]	; (800a658 <MX_GPIO_Init+0x164>)
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	f003 0310 	and.w	r3, r3, #16
 800a51e:	623b      	str	r3, [r7, #32]
 800a520:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a522:	4b4d      	ldr	r3, [pc, #308]	; (800a658 <MX_GPIO_Init+0x164>)
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	4a4c      	ldr	r2, [pc, #304]	; (800a658 <MX_GPIO_Init+0x164>)
 800a528:	f043 0302 	orr.w	r3, r3, #2
 800a52c:	6313      	str	r3, [r2, #48]	; 0x30
 800a52e:	4b4a      	ldr	r3, [pc, #296]	; (800a658 <MX_GPIO_Init+0x164>)
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	61fb      	str	r3, [r7, #28]
 800a538:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a53a:	4b47      	ldr	r3, [pc, #284]	; (800a658 <MX_GPIO_Init+0x164>)
 800a53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53e:	4a46      	ldr	r2, [pc, #280]	; (800a658 <MX_GPIO_Init+0x164>)
 800a540:	f043 0308 	orr.w	r3, r3, #8
 800a544:	6313      	str	r3, [r2, #48]	; 0x30
 800a546:	4b44      	ldr	r3, [pc, #272]	; (800a658 <MX_GPIO_Init+0x164>)
 800a548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54a:	f003 0308 	and.w	r3, r3, #8
 800a54e:	61bb      	str	r3, [r7, #24]
 800a550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a552:	4b41      	ldr	r3, [pc, #260]	; (800a658 <MX_GPIO_Init+0x164>)
 800a554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a556:	4a40      	ldr	r2, [pc, #256]	; (800a658 <MX_GPIO_Init+0x164>)
 800a558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55c:	6313      	str	r3, [r2, #48]	; 0x30
 800a55e:	4b3e      	ldr	r3, [pc, #248]	; (800a658 <MX_GPIO_Init+0x164>)
 800a560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a56a:	4b3b      	ldr	r3, [pc, #236]	; (800a658 <MX_GPIO_Init+0x164>)
 800a56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56e:	4a3a      	ldr	r2, [pc, #232]	; (800a658 <MX_GPIO_Init+0x164>)
 800a570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a574:	6313      	str	r3, [r2, #48]	; 0x30
 800a576:	4b38      	ldr	r3, [pc, #224]	; (800a658 <MX_GPIO_Init+0x164>)
 800a578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57e:	613b      	str	r3, [r7, #16]
 800a580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a582:	4b35      	ldr	r3, [pc, #212]	; (800a658 <MX_GPIO_Init+0x164>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	4a34      	ldr	r2, [pc, #208]	; (800a658 <MX_GPIO_Init+0x164>)
 800a588:	f043 0320 	orr.w	r3, r3, #32
 800a58c:	6313      	str	r3, [r2, #48]	; 0x30
 800a58e:	4b32      	ldr	r3, [pc, #200]	; (800a658 <MX_GPIO_Init+0x164>)
 800a590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a59a:	4b2f      	ldr	r3, [pc, #188]	; (800a658 <MX_GPIO_Init+0x164>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	4a2e      	ldr	r2, [pc, #184]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a6:	4b2c      	ldr	r3, [pc, #176]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ae:	60bb      	str	r3, [r7, #8]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5b2:	4b29      	ldr	r3, [pc, #164]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	4a28      	ldr	r2, [pc, #160]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5b8:	f043 0301 	orr.w	r3, r3, #1
 800a5bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a5be:	4b26      	ldr	r3, [pc, #152]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	607b      	str	r3, [r7, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a5ca:	4b23      	ldr	r3, [pc, #140]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	4a22      	ldr	r2, [pc, #136]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5d6:	4b20      	ldr	r3, [pc, #128]	; (800a658 <MX_GPIO_Init+0x164>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5de:	603b      	str	r3, [r7, #0]
 800a5e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a5e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a5e8:	4b1c      	ldr	r3, [pc, #112]	; (800a65c <MX_GPIO_Init+0x168>)
 800a5ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a5f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	481a      	ldr	r0, [pc, #104]	; (800a660 <MX_GPIO_Init+0x16c>)
 800a5f8:	f7fa fa48 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a5fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a602:	2300      	movs	r3, #0
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a606:	2300      	movs	r3, #0
 800a608:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a60a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a60e:	4619      	mov	r1, r3
 800a610:	4813      	ldr	r0, [pc, #76]	; (800a660 <MX_GPIO_Init+0x16c>)
 800a612:	f7fa fa3b 	bl	8004a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a616:	2301      	movs	r3, #1
 800a618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a61a:	4b10      	ldr	r3, [pc, #64]	; (800a65c <MX_GPIO_Init+0x168>)
 800a61c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a626:	4619      	mov	r1, r3
 800a628:	480e      	ldr	r0, [pc, #56]	; (800a664 <MX_GPIO_Init+0x170>)
 800a62a:	f7fa fa2f 	bl	8004a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800a62e:	2200      	movs	r2, #0
 800a630:	2100      	movs	r1, #0
 800a632:	2006      	movs	r0, #6
 800a634:	f7f8 fd1f 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a638:	2006      	movs	r0, #6
 800a63a:	f7f8 fd38 	bl	80030ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a63e:	2200      	movs	r2, #0
 800a640:	2100      	movs	r1, #0
 800a642:	2028      	movs	r0, #40	; 0x28
 800a644:	f7f8 fd17 	bl	8003076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a648:	2028      	movs	r0, #40	; 0x28
 800a64a:	f7f8 fd30 	bl	80030ae <HAL_NVIC_EnableIRQ>

}
 800a64e:	bf00      	nop
 800a650:	3738      	adds	r7, #56	; 0x38
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	40023800 	.word	0x40023800
 800a65c:	10110000 	.word	0x10110000
 800a660:	40022000 	.word	0x40022000
 800a664:	40020000 	.word	0x40020000

0800a668 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
	uint32_t  lcd_status = LCD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	607b      	str	r3, [r7, #4]

	/* Initialize the LCD */
	lcd_status = BSP_LCD_Init();
 800a672:	f7f6 fd3c 	bl	80010ee <BSP_LCD_Init>
 800a676:	4603      	mov	r3, r0
 800a678:	607b      	str	r3, [r7, #4]
	while(lcd_status != LCD_OK);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1fc      	bne.n	800a67a <LCD_Config+0x12>

	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800a680:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a684:	2000      	movs	r0, #0
 800a686:	f7f6 fecf 	bl	8001428 <BSP_LCD_LayerDefaultInit>

	/* Clear the LCD */
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295
 800a68e:	f7f6 ff77 	bl	8001580 <BSP_LCD_Clear>

	/* Set LCD Example description */
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800a692:	481f      	ldr	r0, [pc, #124]	; (800a710 <LCD_Config+0xa8>)
 800a694:	f7f6 ff28 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font12);
 800a698:	481e      	ldr	r0, [pc, #120]	; (800a714 <LCD_Config+0xac>)
 800a69a:	f7f6 ff57 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t *)"Copyright (c) Holy Fathers company", CENTER_MODE);
 800a69e:	f7f6 feb7 	bl	8001410 <BSP_LCD_GetYSize>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3b14      	subs	r3, #20
 800a6a8:	b299      	uxth	r1, r3
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4a1a      	ldr	r2, [pc, #104]	; (800a718 <LCD_Config+0xb0>)
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f7f6 ffd2 	bl	8001658 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 800a6b4:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800a6b8:	f7f6 ff16 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 35);
 800a6bc:	f7f6 fe9c 	bl	80013f8 <BSP_LCD_GetXSize>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	2323      	movs	r3, #35	; 0x23
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f7f7 f9f9 	bl	8001ac0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d2:	f7f6 ff09 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_CYAN);
 800a6d6:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800a6da:	f7f6 ff1d 	bl	8001518 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 800a6de:	480f      	ldr	r0, [pc, #60]	; (800a71c <LCD_Config+0xb4>)
 800a6e0:	f7f6 ff34 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"The Reversi", CENTER_MODE);
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4a0e      	ldr	r2, [pc, #56]	; (800a720 <LCD_Config+0xb8>)
 800a6e8:	210a      	movs	r1, #10
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f7f6 ffb4 	bl	8001658 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a6f0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a6f4:	f7f6 fef8 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	f7f6 ff0c 	bl	8001518 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 800a700:	4806      	ldr	r0, [pc, #24]	; (800a71c <LCD_Config+0xb4>)
 800a702:	f7f6 ff23 	bl	800154c <BSP_LCD_SetFont>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	ff000080 	.word	0xff000080
 800a714:	20000040 	.word	0x20000040
 800a718:	0800b518 	.word	0x0800b518
 800a71c:	20000038 	.word	0x20000038
 800a720:	0800b53c 	.word	0x0800b53c
 800a724:	00000000 	.word	0x00000000

0800a728 <printBoardGame>:

void printBoardGame()
{
 800a728:	b590      	push	{r4, r7, lr}
 800a72a:	ed2d 8b02 	vpush	{d8}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0

	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 800a732:	485d      	ldr	r0, [pc, #372]	; (800a8a8 <printBoardGame+0x180>)
 800a734:	f7f6 fed8 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(BSP_LCD_GetXSize()/2.10, BSP_LCD_GetYSize()/10, 400, 400);
 800a738:	f7f6 fe5e 	bl	80013f8 <BSP_LCD_GetXSize>
 800a73c:	ee07 0a90 	vmov	s15, r0
 800a740:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800a744:	ed9f 5b54 	vldr	d5, [pc, #336]	; 800a898 <printBoardGame+0x170>
 800a748:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a74c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800a750:	ee17 3a90 	vmov	r3, s15
 800a754:	b29c      	uxth	r4, r3
 800a756:	f7f6 fe5b 	bl	8001410 <BSP_LCD_GetYSize>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b53      	ldr	r3, [pc, #332]	; (800a8ac <printBoardGame+0x184>)
 800a75e:	fba3 2302 	umull	r2, r3, r3, r2
 800a762:	08db      	lsrs	r3, r3, #3
 800a764:	b299      	uxth	r1, r3
 800a766:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a76a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a76e:	4620      	mov	r0, r4
 800a770:	f7f7 f9a6 	bl	8001ac0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800a774:	484e      	ldr	r0, [pc, #312]	; (800a8b0 <printBoardGame+0x188>)
 800a776:	f7f6 feb7 	bl	80014e8 <BSP_LCD_SetTextColor>

	for(int i = 0; i<=8; i++)
 800a77a:	2300      	movs	r3, #0
 800a77c:	607b      	str	r3, [r7, #4]
 800a77e:	e02c      	b.n	800a7da <printBoardGame+0xb2>
	{
		BSP_LCD_DrawVLine(BSP_LCD_GetXSize()/2.10 + (BSP_LCD_GetXSize()/16)*i, BSP_LCD_GetYSize()/10, 400);
 800a780:	f7f6 fe3a 	bl	80013f8 <BSP_LCD_GetXSize>
 800a784:	ee07 0a90 	vmov	s15, r0
 800a788:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a78c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800a898 <printBoardGame+0x170>
 800a790:	ee87 8b06 	vdiv.f64	d8, d7, d6
 800a794:	f7f6 fe30 	bl	80013f8 <BSP_LCD_GetXSize>
 800a798:	4603      	mov	r3, r0
 800a79a:	091b      	lsrs	r3, r3, #4
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	fb02 f303 	mul.w	r3, r2, r3
 800a7a2:	ee07 3a90 	vmov	s15, r3
 800a7a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a7aa:	ee38 7b07 	vadd.f64	d7, d8, d7
 800a7ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800a7b2:	ee17 3a90 	vmov	r3, s15
 800a7b6:	b29c      	uxth	r4, r3
 800a7b8:	f7f6 fe2a 	bl	8001410 <BSP_LCD_GetYSize>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	4b3b      	ldr	r3, [pc, #236]	; (800a8ac <printBoardGame+0x184>)
 800a7c0:	fba3 2302 	umull	r2, r3, r3, r2
 800a7c4:	08db      	lsrs	r3, r3, #3
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7f7 f844 	bl	800185c <BSP_LCD_DrawVLine>
	for(int i = 0; i<=8; i++)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	607b      	str	r3, [r7, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b08      	cmp	r3, #8
 800a7de:	ddcf      	ble.n	800a780 <printBoardGame+0x58>
	}
	for(int j = 0; j<=8; j++){
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	e03a      	b.n	800a85c <printBoardGame+0x134>
		BSP_LCD_DrawHLine(BSP_LCD_GetXSize()/2.10, BSP_LCD_GetYSize()/10 + (BSP_LCD_GetYSize()/9.6)*j, 400);
 800a7e6:	f7f6 fe07 	bl	80013f8 <BSP_LCD_GetXSize>
 800a7ea:	ee07 0a90 	vmov	s15, r0
 800a7ee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800a7f2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800a898 <printBoardGame+0x170>
 800a7f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800a7fe:	ee17 3a90 	vmov	r3, s15
 800a802:	b29c      	uxth	r4, r3
 800a804:	f7f6 fe04 	bl	8001410 <BSP_LCD_GetYSize>
 800a808:	4602      	mov	r2, r0
 800a80a:	4b28      	ldr	r3, [pc, #160]	; (800a8ac <printBoardGame+0x184>)
 800a80c:	fba3 2302 	umull	r2, r3, r3, r2
 800a810:	08db      	lsrs	r3, r3, #3
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800a81a:	f7f6 fdf9 	bl	8001410 <BSP_LCD_GetYSize>
 800a81e:	ee07 0a90 	vmov	s15, r0
 800a822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a826:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 800a8a0 <printBoardGame+0x178>
 800a82a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	ee07 3a90 	vmov	s15, r3
 800a834:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a838:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a83c:	ee38 7b07 	vadd.f64	d7, d8, d7
 800a840:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800a844:	ee17 3a90 	vmov	r3, s15
 800a848:	b29b      	uxth	r3, r3
 800a84a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a84e:	4619      	mov	r1, r3
 800a850:	4620      	mov	r0, r4
 800a852:	f7f6 ffc5 	bl	80017e0 <BSP_LCD_DrawHLine>
	for(int j = 0; j<=8; j++){
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	3301      	adds	r3, #1
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2b08      	cmp	r3, #8
 800a860:	ddc1      	ble.n	800a7e6 <printBoardGame+0xbe>
	}

	sprintf(string, "Player 1 turn");
 800a862:	4a14      	ldr	r2, [pc, #80]	; (800a8b4 <printBoardGame+0x18c>)
 800a864:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <printBoardGame+0x190>)
 800a866:	4614      	mov	r4, r2
 800a868:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	6061      	str	r1, [r4, #4]
 800a86e:	60a2      	str	r2, [r4, #8]
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	81a3      	strh	r3, [r4, #12]
	BSP_LCD_SetFont(&Font24);
 800a874:	4811      	ldr	r0, [pc, #68]	; (800a8bc <printBoardGame+0x194>)
 800a876:	f7f6 fe69 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(90,100 , (uint8_t *)string, LEFT_MODE);
 800a87a:	2303      	movs	r3, #3
 800a87c:	4a0d      	ldr	r2, [pc, #52]	; (800a8b4 <printBoardGame+0x18c>)
 800a87e:	2164      	movs	r1, #100	; 0x64
 800a880:	205a      	movs	r0, #90	; 0x5a
 800a882:	f7f6 fee9 	bl	8001658 <BSP_LCD_DisplayStringAt>
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	ecbd 8b02 	vpop	{d8}
 800a890:	bd90      	pop	{r4, r7, pc}
 800a892:	bf00      	nop
 800a894:	f3af 8000 	nop.w
 800a898:	cccccccd 	.word	0xcccccccd
 800a89c:	4000cccc 	.word	0x4000cccc
 800a8a0:	33333333 	.word	0x33333333
 800a8a4:	40233333 	.word	0x40233333
 800a8a8:	ffd3d3d3 	.word	0xffd3d3d3
 800a8ac:	cccccccd 	.word	0xcccccccd
 800a8b0:	ff000080 	.word	0xff000080
 800a8b4:	20000c68 	.word	0x20000c68
 800a8b8:	0800b548 	.word	0x0800b548
 800a8bc:	20000038 	.word	0x20000038

0800a8c0 <printScoreTable>:

void printScoreTable()
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
	BSP_LCD_DrawVLine(10, 50, 375);
 800a8c4:	f240 1277 	movw	r2, #375	; 0x177
 800a8c8:	2132      	movs	r1, #50	; 0x32
 800a8ca:	200a      	movs	r0, #10
 800a8cc:	f7f6 ffc6 	bl	800185c <BSP_LCD_DrawVLine>
	BSP_LCD_DrawHLine(10, 50, 350);
 800a8d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a8d4:	2132      	movs	r1, #50	; 0x32
 800a8d6:	200a      	movs	r0, #10
 800a8d8:	f7f6 ff82 	bl	80017e0 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(10, 85, 350);
 800a8dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a8e0:	2155      	movs	r1, #85	; 0x55
 800a8e2:	200a      	movs	r0, #10
 800a8e4:	f7f6 ff7c 	bl	80017e0 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(10, 425, 350);
 800a8e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a8ec:	f240 11a9 	movw	r1, #425	; 0x1a9
 800a8f0:	200a      	movs	r0, #10
 800a8f2:	f7f6 ff75 	bl	80017e0 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(360, 50, 375);
 800a8f6:	f240 1277 	movw	r2, #375	; 0x177
 800a8fa:	2132      	movs	r1, #50	; 0x32
 800a8fc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800a900:	f7f6 ffac 	bl	800185c <BSP_LCD_DrawVLine>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800a904:	480a      	ldr	r0, [pc, #40]	; (800a930 <printScoreTable+0x70>)
 800a906:	f7f6 fdef 	bl	80014e8 <BSP_LCD_SetTextColor>

	sprintf(string, "Game Info");
 800a90a:	4a0a      	ldr	r2, [pc, #40]	; (800a934 <printScoreTable+0x74>)
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <printScoreTable+0x78>)
 800a90e:	cb03      	ldmia	r3!, {r0, r1}
 800a910:	6010      	str	r0, [r2, #0]
 800a912:	6051      	str	r1, [r2, #4]
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	8113      	strh	r3, [r2, #8]
	BSP_LCD_SetFont(&Font24);
 800a918:	4808      	ldr	r0, [pc, #32]	; (800a93c <printScoreTable+0x7c>)
 800a91a:	f7f6 fe17 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(90,55 , (uint8_t *)string, LEFT_MODE);
 800a91e:	2303      	movs	r3, #3
 800a920:	4a04      	ldr	r2, [pc, #16]	; (800a934 <printScoreTable+0x74>)
 800a922:	2137      	movs	r1, #55	; 0x37
 800a924:	205a      	movs	r0, #90	; 0x5a
 800a926:	f7f6 fe97 	bl	8001658 <BSP_LCD_DisplayStringAt>
}
 800a92a:	bf00      	nop
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	ff000080 	.word	0xff000080
 800a934:	20000c68 	.word	0x20000c68
 800a938:	0800b558 	.word	0x0800b558
 800a93c:	20000038 	.word	0x20000038

0800a940 <TempCalc>:

void TempCalc ()
{
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
	flagTemperatura = 0;
 800a944:	4b13      	ldr	r3, [pc, #76]	; (800a994 <TempCalc+0x54>)
 800a946:	2200      	movs	r2, #0
 800a948:	701a      	strb	r2, [r3, #0]
	ConvertedValue=HAL_ADC_GetValue(&hadc1);
 800a94a:	4813      	ldr	r0, [pc, #76]	; (800a998 <TempCalc+0x58>)
 800a94c:	f7f8 f87c 	bl	8002a48 <HAL_ADC_GetValue>
 800a950:	4602      	mov	r2, r0
 800a952:	4b12      	ldr	r3, [pc, #72]	; (800a99c <TempCalc+0x5c>)
 800a954:	601a      	str	r2, [r3, #0]
	JTemp = ((((ConvertedValue * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800a956:	4b11      	ldr	r3, [pc, #68]	; (800a99c <TempCalc+0x5c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800a95e:	fb02 f203 	mul.w	r2, r2, r3
 800a962:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <TempCalc+0x60>)
 800a964:	fba3 1302 	umull	r1, r3, r3, r2
 800a968:	1ad2      	subs	r2, r2, r3
 800a96a:	0852      	lsrs	r2, r2, #1
 800a96c:	4413      	add	r3, r2
 800a96e:	0ada      	lsrs	r2, r3, #11
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	461a      	mov	r2, r3
 800a97a:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <TempCalc+0x64>)
 800a97c:	4413      	add	r3, r2
 800a97e:	4a0a      	ldr	r2, [pc, #40]	; (800a9a8 <TempCalc+0x68>)
 800a980:	fba2 2303 	umull	r2, r3, r2, r3
 800a984:	08db      	lsrs	r3, r3, #3
 800a986:	3319      	adds	r3, #25
 800a988:	461a      	mov	r2, r3
 800a98a:	4b08      	ldr	r3, [pc, #32]	; (800a9ac <TempCalc+0x6c>)
 800a98c:	601a      	str	r2, [r3, #0]
}
 800a98e:	bf00      	nop
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000298 	.word	0x20000298
 800a998:	20000df8 	.word	0x20000df8
 800a99c:	20000860 	.word	0x20000860
 800a9a0:	00100101 	.word	0x00100101
 800a9a4:	ffffe250 	.word	0xffffe250
 800a9a8:	51eb851f 	.word	0x51eb851f
 800a9ac:	2000029c 	.word	0x2000029c

0800a9b0 <firstPlays>:
	}
	flagTouch=0;
}

void firstPlays ()
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a9b4:	481c      	ldr	r0, [pc, #112]	; (800aa28 <firstPlays+0x78>)
 800a9b6:	f7f6 fd97 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(555, 225, 15);
 800a9ba:	220f      	movs	r2, #15
 800a9bc:	21e1      	movs	r1, #225	; 0xe1
 800a9be:	f240 202b 	movw	r0, #555	; 0x22b
 800a9c2:	f7f7 f8d7 	bl	8001b74 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a9c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a9ca:	f7f6 fd8d 	bl	80014e8 <BSP_LCD_SetTextColor>

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW );
 800a9ce:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800a9d2:	f7f6 fd89 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(605, 225, 15);
 800a9d6:	220f      	movs	r2, #15
 800a9d8:	21e1      	movs	r1, #225	; 0xe1
 800a9da:	f240 205d 	movw	r0, #605	; 0x25d
 800a9de:	f7f7 f8c9 	bl	8001b74 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a9e2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a9e6:	f7f6 fd7f 	bl	80014e8 <BSP_LCD_SetTextColor>

	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW );
 800a9ea:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800a9ee:	f7f6 fd7b 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(555, 275, 15);
 800a9f2:	220f      	movs	r2, #15
 800a9f4:	f240 1113 	movw	r1, #275	; 0x113
 800a9f8:	f240 202b 	movw	r0, #555	; 0x22b
 800a9fc:	f7f7 f8ba 	bl	8001b74 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800aa00:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800aa04:	f7f6 fd70 	bl	80014e8 <BSP_LCD_SetTextColor>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800aa08:	4807      	ldr	r0, [pc, #28]	; (800aa28 <firstPlays+0x78>)
 800aa0a:	f7f6 fd6d 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(605, 275, 15);
 800aa0e:	220f      	movs	r2, #15
 800aa10:	f240 1113 	movw	r1, #275	; 0x113
 800aa14:	f240 205d 	movw	r0, #605	; 0x25d
 800aa18:	f7f7 f8ac 	bl	8001b74 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800aa1c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800aa20:	f7f6 fd62 	bl	80014e8 <BSP_LCD_SetTextColor>
}
 800aa24:	bf00      	nop
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	ff0000ff 	.word	0xff0000ff

0800aa2c <printMenu>:
void printMenu()
{
 800aa2c:	b598      	push	{r3, r4, r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295
 800aa34:	f7f6 fda4 	bl	8001580 <BSP_LCD_Clear>

	BSP_LCD_DrawVLine(250, 50, 375);
 800aa38:	f240 1277 	movw	r2, #375	; 0x177
 800aa3c:	2132      	movs	r1, #50	; 0x32
 800aa3e:	20fa      	movs	r0, #250	; 0xfa
 800aa40:	f7f6 ff0c 	bl	800185c <BSP_LCD_DrawVLine>
	BSP_LCD_DrawHLine(250, 50, 300);
 800aa44:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa48:	2132      	movs	r1, #50	; 0x32
 800aa4a:	20fa      	movs	r0, #250	; 0xfa
 800aa4c:	f7f6 fec8 	bl	80017e0 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(250, 85, 300);
 800aa50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa54:	2155      	movs	r1, #85	; 0x55
 800aa56:	20fa      	movs	r0, #250	; 0xfa
 800aa58:	f7f6 fec2 	bl	80017e0 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(250, 425, 300);
 800aa5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa60:	f240 11a9 	movw	r1, #425	; 0x1a9
 800aa64:	20fa      	movs	r0, #250	; 0xfa
 800aa66:	f7f6 febb 	bl	80017e0 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(550, 50, 375);
 800aa6a:	f240 1277 	movw	r2, #375	; 0x177
 800aa6e:	2132      	movs	r1, #50	; 0x32
 800aa70:	f240 2026 	movw	r0, #550	; 0x226
 800aa74:	f7f6 fef2 	bl	800185c <BSP_LCD_DrawVLine>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800aa78:	4840      	ldr	r0, [pc, #256]	; (800ab7c <printMenu+0x150>)
 800aa7a:	f7f6 fd35 	bl	80014e8 <BSP_LCD_SetTextColor>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800aa7e:	483f      	ldr	r0, [pc, #252]	; (800ab7c <printMenu+0x150>)
 800aa80:	f7f6 fd32 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(250, 50, 300 , 35);
 800aa84:	2323      	movs	r3, #35	; 0x23
 800aa86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa8a:	2132      	movs	r1, #50	; 0x32
 800aa8c:	20fa      	movs	r0, #250	; 0xfa
 800aa8e:	f7f7 f817 	bl	8001ac0 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800aa92:	f04f 30ff 	mov.w	r0, #4294967295
 800aa96:	f7f6 fd27 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 800aa9a:	4838      	ldr	r0, [pc, #224]	; (800ab7c <printMenu+0x150>)
 800aa9c:	f7f6 fd3c 	bl	8001518 <BSP_LCD_SetBackColor>



	sprintf(string, "Menu");
 800aaa0:	4b37      	ldr	r3, [pc, #220]	; (800ab80 <printMenu+0x154>)
 800aaa2:	4a38      	ldr	r2, [pc, #224]	; (800ab84 <printMenu+0x158>)
 800aaa4:	6810      	ldr	r0, [r2, #0]
 800aaa6:	6018      	str	r0, [r3, #0]
 800aaa8:	7912      	ldrb	r2, [r2, #4]
 800aaaa:	711a      	strb	r2, [r3, #4]
	BSP_LCD_SetFont(&Font24);
 800aaac:	4836      	ldr	r0, [pc, #216]	; (800ab88 <printMenu+0x15c>)
 800aaae:	f7f6 fd4d 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,55 , (uint8_t *)string, CENTER_MODE);
 800aab2:	2301      	movs	r3, #1
 800aab4:	4a32      	ldr	r2, [pc, #200]	; (800ab80 <printMenu+0x154>)
 800aab6:	2137      	movs	r1, #55	; 0x37
 800aab8:	200a      	movs	r0, #10
 800aaba:	f7f6 fdcd 	bl	8001658 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800aabe:	482f      	ldr	r0, [pc, #188]	; (800ab7c <printMenu+0x150>)
 800aac0:	f7f6 fd12 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	f7f6 fd26 	bl	8001518 <BSP_LCD_SetBackColor>
	sprintf(string, "Single Player");
 800aacc:	4a2c      	ldr	r2, [pc, #176]	; (800ab80 <printMenu+0x154>)
 800aace:	4b2f      	ldr	r3, [pc, #188]	; (800ab8c <printMenu+0x160>)
 800aad0:	4614      	mov	r4, r2
 800aad2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aad4:	6020      	str	r0, [r4, #0]
 800aad6:	6061      	str	r1, [r4, #4]
 800aad8:	60a2      	str	r2, [r4, #8]
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	81a3      	strh	r3, [r4, #12]
	BSP_LCD_SetFont(&Font24);
 800aade:	482a      	ldr	r0, [pc, #168]	; (800ab88 <printMenu+0x15c>)
 800aae0:	f7f6 fd34 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(15,125 , (uint8_t *)string, CENTER_MODE);
 800aae4:	2301      	movs	r3, #1
 800aae6:	4a26      	ldr	r2, [pc, #152]	; (800ab80 <printMenu+0x154>)
 800aae8:	217d      	movs	r1, #125	; 0x7d
 800aaea:	200f      	movs	r0, #15
 800aaec:	f7f6 fdb4 	bl	8001658 <BSP_LCD_DisplayStringAt>
	sprintf(string, "Multiplayer");
 800aaf0:	4a23      	ldr	r2, [pc, #140]	; (800ab80 <printMenu+0x154>)
 800aaf2:	4b27      	ldr	r3, [pc, #156]	; (800ab90 <printMenu+0x164>)
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aaf8:	6020      	str	r0, [r4, #0]
 800aafa:	6061      	str	r1, [r4, #4]
 800aafc:	60a2      	str	r2, [r4, #8]
	BSP_LCD_SetFont(&Font24);
 800aafe:	4822      	ldr	r0, [pc, #136]	; (800ab88 <printMenu+0x15c>)
 800ab00:	f7f6 fd24 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(15,200 , (uint8_t *)string, CENTER_MODE);
 800ab04:	2301      	movs	r3, #1
 800ab06:	4a1e      	ldr	r2, [pc, #120]	; (800ab80 <printMenu+0x154>)
 800ab08:	21c8      	movs	r1, #200	; 0xc8
 800ab0a:	200f      	movs	r0, #15
 800ab0c:	f7f6 fda4 	bl	8001658 <BSP_LCD_DisplayStringAt>
	sprintf(string, "Score");
 800ab10:	4b1b      	ldr	r3, [pc, #108]	; (800ab80 <printMenu+0x154>)
 800ab12:	4a20      	ldr	r2, [pc, #128]	; (800ab94 <printMenu+0x168>)
 800ab14:	6810      	ldr	r0, [r2, #0]
 800ab16:	6018      	str	r0, [r3, #0]
 800ab18:	8892      	ldrh	r2, [r2, #4]
 800ab1a:	809a      	strh	r2, [r3, #4]
	BSP_LCD_SetFont(&Font24);
 800ab1c:	481a      	ldr	r0, [pc, #104]	; (800ab88 <printMenu+0x15c>)
 800ab1e:	f7f6 fd15 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,275 , (uint8_t *)string, CENTER_MODE);
 800ab22:	2301      	movs	r3, #1
 800ab24:	4a16      	ldr	r2, [pc, #88]	; (800ab80 <printMenu+0x154>)
 800ab26:	f240 1113 	movw	r1, #275	; 0x113
 800ab2a:	200a      	movs	r0, #10
 800ab2c:	f7f6 fd94 	bl	8001658 <BSP_LCD_DisplayStringAt>
	sprintf(string, "Rules");
 800ab30:	4b13      	ldr	r3, [pc, #76]	; (800ab80 <printMenu+0x154>)
 800ab32:	4a19      	ldr	r2, [pc, #100]	; (800ab98 <printMenu+0x16c>)
 800ab34:	6810      	ldr	r0, [r2, #0]
 800ab36:	6018      	str	r0, [r3, #0]
 800ab38:	8892      	ldrh	r2, [r2, #4]
 800ab3a:	809a      	strh	r2, [r3, #4]
	BSP_LCD_SetFont(&Font24);
 800ab3c:	4812      	ldr	r0, [pc, #72]	; (800ab88 <printMenu+0x15c>)
 800ab3e:	f7f6 fd05 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(10,350 , (uint8_t *)string, CENTER_MODE);
 800ab42:	2301      	movs	r3, #1
 800ab44:	4a0e      	ldr	r2, [pc, #56]	; (800ab80 <printMenu+0x154>)
 800ab46:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800ab4a:	200a      	movs	r0, #10
 800ab4c:	f7f6 fd84 	bl	8001658 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800ab50:	480a      	ldr	r0, [pc, #40]	; (800ab7c <printMenu+0x150>)
 800ab52:	f7f6 fcc9 	bl	80014e8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font12);
 800ab56:	4811      	ldr	r0, [pc, #68]	; (800ab9c <printMenu+0x170>)
 800ab58:	f7f6 fcf8 	bl	800154c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t *)"Copyright (c) Holy Fathers Company", CENTER_MODE);
 800ab5c:	f7f6 fc58 	bl	8001410 <BSP_LCD_GetYSize>
 800ab60:	4603      	mov	r3, r0
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	3b14      	subs	r3, #20
 800ab66:	b299      	uxth	r1, r3
 800ab68:	2301      	movs	r3, #1
 800ab6a:	4a0d      	ldr	r2, [pc, #52]	; (800aba0 <printMenu+0x174>)
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f7f6 fd73 	bl	8001658 <BSP_LCD_DisplayStringAt>

	flagPrintMenu=0;
 800ab72:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <printMenu+0x178>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
}
 800ab78:	bf00      	nop
 800ab7a:	bd98      	pop	{r3, r4, r7, pc}
 800ab7c:	ff000080 	.word	0xff000080
 800ab80:	20000c68 	.word	0x20000c68
 800ab84:	0800b574 	.word	0x0800b574
 800ab88:	20000038 	.word	0x20000038
 800ab8c:	0800b57c 	.word	0x0800b57c
 800ab90:	0800b58c 	.word	0x0800b58c
 800ab94:	0800b598 	.word	0x0800b598
 800ab98:	0800b5a0 	.word	0x0800b5a0
 800ab9c:	20000040 	.word	0x20000040
 800aba0:	0800b5a8 	.word	0x0800b5a8
 800aba4:	2000029a 	.word	0x2000029a

0800aba8 <touchMenu>:

int touchMenu()
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0

	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=120 && TS_State.touchY[0]<=200)
 800abac:	4b2a      	ldr	r3, [pc, #168]	; (800ac58 <touchMenu+0xb0>)
 800abae:	885b      	ldrh	r3, [r3, #2]
 800abb0:	2bf9      	cmp	r3, #249	; 0xf9
 800abb2:	d90f      	bls.n	800abd4 <touchMenu+0x2c>
 800abb4:	4b28      	ldr	r3, [pc, #160]	; (800ac58 <touchMenu+0xb0>)
 800abb6:	885b      	ldrh	r3, [r3, #2]
 800abb8:	f240 2226 	movw	r2, #550	; 0x226
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d809      	bhi.n	800abd4 <touchMenu+0x2c>
 800abc0:	4b25      	ldr	r3, [pc, #148]	; (800ac58 <touchMenu+0xb0>)
 800abc2:	88db      	ldrh	r3, [r3, #6]
 800abc4:	2b77      	cmp	r3, #119	; 0x77
 800abc6:	d905      	bls.n	800abd4 <touchMenu+0x2c>
 800abc8:	4b23      	ldr	r3, [pc, #140]	; (800ac58 <touchMenu+0xb0>)
 800abca:	88db      	ldrh	r3, [r3, #6]
 800abcc:	2bc8      	cmp	r3, #200	; 0xc8
 800abce:	d801      	bhi.n	800abd4 <touchMenu+0x2c>
	{
		printBoardGame();// single player
 800abd0:	f7ff fdaa 	bl	800a728 <printBoardGame>
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=201 && TS_State.touchY[0]<=260)
 800abd4:	4b20      	ldr	r3, [pc, #128]	; (800ac58 <touchMenu+0xb0>)
 800abd6:	885b      	ldrh	r3, [r3, #2]
 800abd8:	2bf9      	cmp	r3, #249	; 0xf9
 800abda:	d908      	bls.n	800abee <touchMenu+0x46>
 800abdc:	4b1e      	ldr	r3, [pc, #120]	; (800ac58 <touchMenu+0xb0>)
 800abde:	885b      	ldrh	r3, [r3, #2]
 800abe0:	f240 2226 	movw	r2, #550	; 0x226
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d802      	bhi.n	800abee <touchMenu+0x46>
 800abe8:	4b1b      	ldr	r3, [pc, #108]	; (800ac58 <touchMenu+0xb0>)
 800abea:	88db      	ldrh	r3, [r3, #6]
 800abec:	2bc8      	cmp	r3, #200	; 0xc8
	{
		//BSP_LED_Toggle(LED_GREEN);//multiplayer
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=261 && TS_State.touchY[0]<=310)
 800abee:	4b1a      	ldr	r3, [pc, #104]	; (800ac58 <touchMenu+0xb0>)
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	2bf9      	cmp	r3, #249	; 0xf9
 800abf4:	d912      	bls.n	800ac1c <touchMenu+0x74>
 800abf6:	4b18      	ldr	r3, [pc, #96]	; (800ac58 <touchMenu+0xb0>)
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	f240 2226 	movw	r2, #550	; 0x226
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d80c      	bhi.n	800ac1c <touchMenu+0x74>
 800ac02:	4b15      	ldr	r3, [pc, #84]	; (800ac58 <touchMenu+0xb0>)
 800ac04:	88db      	ldrh	r3, [r3, #6]
 800ac06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac0a:	d907      	bls.n	800ac1c <touchMenu+0x74>
 800ac0c:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <touchMenu+0xb0>)
 800ac0e:	88db      	ldrh	r3, [r3, #6]
 800ac10:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800ac14:	d802      	bhi.n	800ac1c <touchMenu+0x74>
	{
		BSP_LED_Toggle(LED_RED);
 800ac16:	2000      	movs	r0, #0
 800ac18:	f7f6 f880 	bl	8000d1c <BSP_LED_Toggle>
	}
	if(TS_State.touchX[0]>=250 && TS_State.touchX[0]<=550 && TS_State.touchY[0]>=311 && TS_State.touchY[0]<=360)
 800ac1c:	4b0e      	ldr	r3, [pc, #56]	; (800ac58 <touchMenu+0xb0>)
 800ac1e:	885b      	ldrh	r3, [r3, #2]
 800ac20:	2bf9      	cmp	r3, #249	; 0xf9
 800ac22:	d912      	bls.n	800ac4a <touchMenu+0xa2>
 800ac24:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <touchMenu+0xb0>)
 800ac26:	885b      	ldrh	r3, [r3, #2]
 800ac28:	f240 2226 	movw	r2, #550	; 0x226
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d80c      	bhi.n	800ac4a <touchMenu+0xa2>
 800ac30:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <touchMenu+0xb0>)
 800ac32:	88db      	ldrh	r3, [r3, #6]
 800ac34:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 800ac38:	d907      	bls.n	800ac4a <touchMenu+0xa2>
 800ac3a:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <touchMenu+0xb0>)
 800ac3c:	88db      	ldrh	r3, [r3, #6]
 800ac3e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800ac42:	d802      	bhi.n	800ac4a <touchMenu+0xa2>
	{
		BSP_LED_Toggle(LED_GREEN);
 800ac44:	2001      	movs	r0, #1
 800ac46:	f7f6 f869 	bl	8000d1c <BSP_LED_Toggle>
	}

	flagTouch=0;
 800ac4a:	4b04      	ldr	r3, [pc, #16]	; (800ac5c <touchMenu+0xb4>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	701a      	strb	r2, [r3, #0]
}
 800ac50:	bf00      	nop
 800ac52:	4618      	mov	r0, r3
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20000f20 	.word	0x20000f20
 800ac5c:	20000299 	.word	0x20000299

0800ac60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1) //para ficar dependurado
	{
		BSP_LED_On(LED_GREEN);
 800ac64:	2001      	movs	r0, #1
 800ac66:	f7f6 f825 	bl	8000cb4 <BSP_LED_On>
		HAL_Delay(1000);
 800ac6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac6e:	f7f7 fdc5 	bl	80027fc <HAL_Delay>
		BSP_LED_Off(LED_GREEN);HAL_Delay(1000);
 800ac72:	2001      	movs	r0, #1
 800ac74:	f7f6 f838 	bl	8000ce8 <BSP_LED_Off>
 800ac78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac7c:	f7f7 fdbe 	bl	80027fc <HAL_Delay>
		BSP_LED_On(LED_GREEN);
 800ac80:	e7f0      	b.n	800ac64 <Error_Handler+0x4>
	...

0800ac84 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <SD_CheckStatus+0x38>)
 800ac90:	2201      	movs	r2, #1
 800ac92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ac94:	f7fe feb4 	bl	8009a00 <BSP_SD_GetCardState>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d107      	bne.n	800acae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ac9e:	4b07      	ldr	r3, [pc, #28]	; (800acbc <SD_CheckStatus+0x38>)
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	f023 0301 	bic.w	r3, r3, #1
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	4b04      	ldr	r3, [pc, #16]	; (800acbc <SD_CheckStatus+0x38>)
 800acac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800acae:	4b03      	ldr	r3, [pc, #12]	; (800acbc <SD_CheckStatus+0x38>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	b2db      	uxtb	r3, r3
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	2000005a 	.word	0x2000005a

0800acc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <SD_initialize+0x38>)
 800accc:	2201      	movs	r2, #1
 800acce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800acd0:	f7fe fe34 	bl	800993c <BSP_SD_Init>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d107      	bne.n	800acea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800acda:	79fb      	ldrb	r3, [r7, #7]
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff ffd1 	bl	800ac84 <SD_CheckStatus>
 800ace2:	4603      	mov	r3, r0
 800ace4:	461a      	mov	r2, r3
 800ace6:	4b04      	ldr	r3, [pc, #16]	; (800acf8 <SD_initialize+0x38>)
 800ace8:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800acea:	4b03      	ldr	r3, [pc, #12]	; (800acf8 <SD_initialize+0x38>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	b2db      	uxtb	r3, r3
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	2000005a 	.word	0x2000005a

0800acfc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7ff ffbb 	bl	800ac84 <SD_CheckStatus>
 800ad0e:	4603      	mov	r3, r0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607a      	str	r2, [r7, #4]
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	68b8      	ldr	r0, [r7, #8]
 800ad36:	f7fe fe27 	bl	8009988 <BSP_SD_ReadBlocks>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d107      	bne.n	800ad50 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ad40:	bf00      	nop
 800ad42:	f7fe fe5d 	bl	8009a00 <BSP_SD_GetCardState>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1fa      	bne.n	800ad42 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	68b8      	ldr	r0, [r7, #8]
 800ad78:	f7fe fe24 	bl	80099c4 <BSP_SD_WriteBlocks>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d107      	bne.n	800ad92 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ad82:	bf00      	nop
 800ad84:	f7fe fe3c 	bl	8009a00 <BSP_SD_GetCardState>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1fa      	bne.n	800ad84 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	603a      	str	r2, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
 800ada8:	460b      	mov	r3, r1
 800adaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800adb2:	4b25      	ldr	r3, [pc, #148]	; (800ae48 <SD_ioctl+0xac>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <SD_ioctl+0x28>
 800adc0:	2303      	movs	r3, #3
 800adc2:	e03c      	b.n	800ae3e <SD_ioctl+0xa2>

  switch (cmd)
 800adc4:	79bb      	ldrb	r3, [r7, #6]
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d834      	bhi.n	800ae34 <SD_ioctl+0x98>
 800adca:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <SD_ioctl+0x34>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800ade1 	.word	0x0800ade1
 800add4:	0800ade9 	.word	0x0800ade9
 800add8:	0800ae01 	.word	0x0800ae01
 800addc:	0800ae1b 	.word	0x0800ae1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ade6:	e028      	b.n	800ae3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ade8:	f107 030c 	add.w	r3, r7, #12
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe fe17 	bl	8009a20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800adf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800adfe:	e01c      	b.n	800ae3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae00:	f107 030c 	add.w	r3, r7, #12
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fe fe0b 	bl	8009a20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ae18:	e00f      	b.n	800ae3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae1a:	f107 030c 	add.w	r3, r7, #12
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe fdfe 	bl	8009a20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae26:	0a5a      	lsrs	r2, r3, #9
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ae32:	e002      	b.n	800ae3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ae34:	2304      	movs	r3, #4
 800ae36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ae3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3730      	adds	r7, #48	; 0x30
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	2000005a 	.word	0x2000005a

0800ae4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <HAL_MspInit+0x44>)
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	4a0e      	ldr	r2, [pc, #56]	; (800ae90 <HAL_MspInit+0x44>)
 800ae58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae5c:	6413      	str	r3, [r2, #64]	; 0x40
 800ae5e:	4b0c      	ldr	r3, [pc, #48]	; (800ae90 <HAL_MspInit+0x44>)
 800ae60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae66:	607b      	str	r3, [r7, #4]
 800ae68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae6a:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <HAL_MspInit+0x44>)
 800ae6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae6e:	4a08      	ldr	r2, [pc, #32]	; (800ae90 <HAL_MspInit+0x44>)
 800ae70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae74:	6453      	str	r3, [r2, #68]	; 0x44
 800ae76:	4b06      	ldr	r3, [pc, #24]	; (800ae90 <HAL_MspInit+0x44>)
 800ae78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae7e:	603b      	str	r3, [r7, #0]
 800ae80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	40023800 	.word	0x40023800

0800ae94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <HAL_ADC_MspInit+0x38>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d10b      	bne.n	800aebe <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800aea6:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <HAL_ADC_MspInit+0x3c>)
 800aea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeaa:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <HAL_ADC_MspInit+0x3c>)
 800aeac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeb0:	6453      	str	r3, [r2, #68]	; 0x44
 800aeb2:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <HAL_ADC_MspInit+0x3c>)
 800aeb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800aebe:	bf00      	nop
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	40012000 	.word	0x40012000
 800aed0:	40023800 	.word	0x40023800

0800aed4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a0a      	ldr	r2, [pc, #40]	; (800af0c <HAL_DMA2D_MspInit+0x38>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d10b      	bne.n	800aefe <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800aee6:	4b0a      	ldr	r3, [pc, #40]	; (800af10 <HAL_DMA2D_MspInit+0x3c>)
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	4a09      	ldr	r2, [pc, #36]	; (800af10 <HAL_DMA2D_MspInit+0x3c>)
 800aeec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aef0:	6313      	str	r3, [r2, #48]	; 0x30
 800aef2:	4b07      	ldr	r3, [pc, #28]	; (800af10 <HAL_DMA2D_MspInit+0x3c>)
 800aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800aefe:	bf00      	nop
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	4002b000 	.word	0x4002b000
 800af10:	40023800 	.word	0x40023800

0800af14 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af1c:	f107 0314 	add.w	r3, r7, #20
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	609a      	str	r2, [r3, #8]
 800af28:	60da      	str	r2, [r3, #12]
 800af2a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a17      	ldr	r2, [pc, #92]	; (800af90 <HAL_DSI_MspInit+0x7c>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d127      	bne.n	800af86 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800af36:	4b17      	ldr	r3, [pc, #92]	; (800af94 <HAL_DSI_MspInit+0x80>)
 800af38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3a:	4a16      	ldr	r2, [pc, #88]	; (800af94 <HAL_DSI_MspInit+0x80>)
 800af3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af40:	6453      	str	r3, [r2, #68]	; 0x44
 800af42:	4b14      	ldr	r3, [pc, #80]	; (800af94 <HAL_DSI_MspInit+0x80>)
 800af44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af4a:	613b      	str	r3, [r7, #16]
 800af4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800af4e:	4b11      	ldr	r3, [pc, #68]	; (800af94 <HAL_DSI_MspInit+0x80>)
 800af50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af52:	4a10      	ldr	r2, [pc, #64]	; (800af94 <HAL_DSI_MspInit+0x80>)
 800af54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af58:	6313      	str	r3, [r2, #48]	; 0x30
 800af5a:	4b0e      	ldr	r3, [pc, #56]	; (800af94 <HAL_DSI_MspInit+0x80>)
 800af5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800af66:	2304      	movs	r3, #4
 800af68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af6a:	2302      	movs	r3, #2
 800af6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af72:	2300      	movs	r3, #0
 800af74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800af76:	230d      	movs	r3, #13
 800af78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800af7a:	f107 0314 	add.w	r3, r7, #20
 800af7e:	4619      	mov	r1, r3
 800af80:	4805      	ldr	r0, [pc, #20]	; (800af98 <HAL_DSI_MspInit+0x84>)
 800af82:	f7f9 fd83 	bl	8004a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800af86:	bf00      	nop
 800af88:	3728      	adds	r7, #40	; 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	40016c00 	.word	0x40016c00
 800af94:	40023800 	.word	0x40023800
 800af98:	40022400 	.word	0x40022400

0800af9c <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a08      	ldr	r2, [pc, #32]	; (800afcc <HAL_DSI_MspDeInit+0x30>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d109      	bne.n	800afc2 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <HAL_DSI_MspDeInit+0x34>)
 800afb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb2:	4a07      	ldr	r2, [pc, #28]	; (800afd0 <HAL_DSI_MspDeInit+0x34>)
 800afb4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800afb8:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800afba:	2104      	movs	r1, #4
 800afbc:	4805      	ldr	r0, [pc, #20]	; (800afd4 <HAL_DSI_MspDeInit+0x38>)
 800afbe:	f7f9 ff0f 	bl	8004de0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800afc2:	bf00      	nop
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	40016c00 	.word	0x40016c00
 800afd0:	40023800 	.word	0x40023800
 800afd4:	40022400 	.word	0x40022400

0800afd8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a0a      	ldr	r2, [pc, #40]	; (800b010 <HAL_LTDC_MspInit+0x38>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d10b      	bne.n	800b002 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800afea:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <HAL_LTDC_MspInit+0x3c>)
 800afec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afee:	4a09      	ldr	r2, [pc, #36]	; (800b014 <HAL_LTDC_MspInit+0x3c>)
 800aff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aff4:	6453      	str	r3, [r2, #68]	; 0x44
 800aff6:	4b07      	ldr	r3, [pc, #28]	; (800b014 <HAL_LTDC_MspInit+0x3c>)
 800aff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	40016800 	.word	0x40016800
 800b014:	40023800 	.word	0x40023800

0800b018 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08c      	sub	sp, #48	; 0x30
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b020:	f107 031c 	add.w	r3, r7, #28
 800b024:	2200      	movs	r2, #0
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	605a      	str	r2, [r3, #4]
 800b02a:	609a      	str	r2, [r3, #8]
 800b02c:	60da      	str	r2, [r3, #12]
 800b02e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a33      	ldr	r2, [pc, #204]	; (800b104 <HAL_SD_MspInit+0xec>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d160      	bne.n	800b0fc <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800b03a:	4b33      	ldr	r3, [pc, #204]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03e:	4a32      	ldr	r2, [pc, #200]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b044:	6453      	str	r3, [r2, #68]	; 0x44
 800b046:	4b30      	ldr	r3, [pc, #192]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04e:	61bb      	str	r3, [r7, #24]
 800b050:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b052:	4b2d      	ldr	r3, [pc, #180]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b056:	4a2c      	ldr	r2, [pc, #176]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b058:	f043 0302 	orr.w	r3, r3, #2
 800b05c:	6313      	str	r3, [r2, #48]	; 0x30
 800b05e:	4b2a      	ldr	r3, [pc, #168]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b06a:	4b27      	ldr	r3, [pc, #156]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06e:	4a26      	ldr	r2, [pc, #152]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b070:	f043 0308 	orr.w	r3, r3, #8
 800b074:	6313      	str	r3, [r2, #48]	; 0x30
 800b076:	4b24      	ldr	r3, [pc, #144]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07a:	f003 0308 	and.w	r3, r3, #8
 800b07e:	613b      	str	r3, [r7, #16]
 800b080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b082:	4b21      	ldr	r3, [pc, #132]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b086:	4a20      	ldr	r2, [pc, #128]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b08c:	6313      	str	r3, [r2, #48]	; 0x30
 800b08e:	4b1e      	ldr	r3, [pc, #120]	; (800b108 <HAL_SD_MspInit+0xf0>)
 800b090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800b09a:	2318      	movs	r3, #24
 800b09c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b09e:	2302      	movs	r3, #2
 800b0a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800b0aa:	230a      	movs	r3, #10
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0ae:	f107 031c 	add.w	r3, r7, #28
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4815      	ldr	r0, [pc, #84]	; (800b10c <HAL_SD_MspInit+0xf4>)
 800b0b6:	f7f9 fce9 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800b0ba:	23c0      	movs	r3, #192	; 0xc0
 800b0bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0be:	2302      	movs	r3, #2
 800b0c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800b0ca:	230b      	movs	r3, #11
 800b0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b0ce:	f107 031c 	add.w	r3, r7, #28
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	480e      	ldr	r0, [pc, #56]	; (800b110 <HAL_SD_MspInit+0xf8>)
 800b0d6:	f7f9 fcd9 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800b0da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b0de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800b0ec:	230b      	movs	r3, #11
 800b0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b0f0:	f107 031c 	add.w	r3, r7, #28
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4807      	ldr	r0, [pc, #28]	; (800b114 <HAL_SD_MspInit+0xfc>)
 800b0f8:	f7f9 fcc8 	bl	8004a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800b0fc:	bf00      	nop
 800b0fe:	3730      	adds	r7, #48	; 0x30
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	40011c00 	.word	0x40011c00
 800b108:	40023800 	.word	0x40023800
 800b10c:	40020400 	.word	0x40020400
 800b110:	40020c00 	.word	0x40020c00
 800b114:	40021800 	.word	0x40021800

0800b118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a27      	ldr	r2, [pc, #156]	; (800b1c4 <HAL_TIM_Base_MspInit+0xac>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d114      	bne.n	800b154 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b12a:	4b27      	ldr	r3, [pc, #156]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	4a26      	ldr	r2, [pc, #152]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b130:	f043 0310 	orr.w	r3, r3, #16
 800b134:	6413      	str	r3, [r2, #64]	; 0x40
 800b136:	4b24      	ldr	r3, [pc, #144]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f003 0310 	and.w	r3, r3, #16
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b142:	2200      	movs	r2, #0
 800b144:	2100      	movs	r1, #0
 800b146:	2036      	movs	r0, #54	; 0x36
 800b148:	f7f7 ff95 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b14c:	2036      	movs	r0, #54	; 0x36
 800b14e:	f7f7 ffae 	bl	80030ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800b152:	e032      	b.n	800b1ba <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a1c      	ldr	r2, [pc, #112]	; (800b1cc <HAL_TIM_Base_MspInit+0xb4>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d114      	bne.n	800b188 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b15e:	4b1a      	ldr	r3, [pc, #104]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	4a19      	ldr	r2, [pc, #100]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b164:	f043 0320 	orr.w	r3, r3, #32
 800b168:	6413      	str	r3, [r2, #64]	; 0x40
 800b16a:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	f003 0320 	and.w	r3, r3, #32
 800b172:	613b      	str	r3, [r7, #16]
 800b174:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b176:	2200      	movs	r2, #0
 800b178:	2100      	movs	r1, #0
 800b17a:	2037      	movs	r0, #55	; 0x37
 800b17c:	f7f7 ff7b 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b180:	2037      	movs	r0, #55	; 0x37
 800b182:	f7f7 ff94 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 800b186:	e018      	b.n	800b1ba <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM13)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a10      	ldr	r2, [pc, #64]	; (800b1d0 <HAL_TIM_Base_MspInit+0xb8>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d113      	bne.n	800b1ba <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800b192:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b196:	4a0c      	ldr	r2, [pc, #48]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b19c:	6413      	str	r3, [r2, #64]	; 0x40
 800b19e:	4b0a      	ldr	r3, [pc, #40]	; (800b1c8 <HAL_TIM_Base_MspInit+0xb0>)
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	202c      	movs	r0, #44	; 0x2c
 800b1b0:	f7f7 ff61 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800b1b4:	202c      	movs	r0, #44	; 0x2c
 800b1b6:	f7f7 ff7a 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 800b1ba:	bf00      	nop
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	40001000 	.word	0x40001000
 800b1c8:	40023800 	.word	0x40023800
 800b1cc:	40001400 	.word	0x40001400
 800b1d0:	40001c00 	.word	0x40001c00

0800b1d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b1da:	1d3b      	adds	r3, r7, #4
 800b1dc:	2200      	movs	r2, #0
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	605a      	str	r2, [r3, #4]
 800b1e2:	609a      	str	r2, [r3, #8]
 800b1e4:	60da      	str	r2, [r3, #12]
 800b1e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800b1e8:	4b43      	ldr	r3, [pc, #268]	; (800b2f8 <HAL_FMC_MspInit+0x124>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d17e      	bne.n	800b2ee <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800b1f0:	4b41      	ldr	r3, [pc, #260]	; (800b2f8 <HAL_FMC_MspInit+0x124>)
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b1f6:	4b41      	ldr	r3, [pc, #260]	; (800b2fc <HAL_FMC_MspInit+0x128>)
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	4a40      	ldr	r2, [pc, #256]	; (800b2fc <HAL_FMC_MspInit+0x128>)
 800b1fc:	f043 0301 	orr.w	r3, r3, #1
 800b200:	6393      	str	r3, [r2, #56]	; 0x38
 800b202:	4b3e      	ldr	r3, [pc, #248]	; (800b2fc <HAL_FMC_MspInit+0x128>)
 800b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b206:	f003 0301 	and.w	r3, r3, #1
 800b20a:	603b      	str	r3, [r7, #0]
 800b20c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 800b20e:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b212:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b214:	2302      	movs	r3, #2
 800b216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b21c:	2303      	movs	r3, #3
 800b21e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b220:	230c      	movs	r3, #12
 800b222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b224:	1d3b      	adds	r3, r7, #4
 800b226:	4619      	mov	r1, r3
 800b228:	4835      	ldr	r0, [pc, #212]	; (800b300 <HAL_FMC_MspInit+0x12c>)
 800b22a:	f7f9 fc2f 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800b22e:	2360      	movs	r3, #96	; 0x60
 800b230:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b232:	2302      	movs	r3, #2
 800b234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b23a:	2303      	movs	r3, #3
 800b23c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b23e:	230c      	movs	r3, #12
 800b240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b242:	1d3b      	adds	r3, r7, #4
 800b244:	4619      	mov	r1, r3
 800b246:	482f      	ldr	r0, [pc, #188]	; (800b304 <HAL_FMC_MspInit+0x130>)
 800b248:	f7f9 fc20 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800b24c:	f248 1337 	movw	r3, #33079	; 0x8137
 800b250:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b252:	2302      	movs	r3, #2
 800b254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b25a:	2303      	movs	r3, #3
 800b25c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b25e:	230c      	movs	r3, #12
 800b260:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b262:	1d3b      	adds	r3, r7, #4
 800b264:	4619      	mov	r1, r3
 800b266:	4828      	ldr	r0, [pc, #160]	; (800b308 <HAL_FMC_MspInit+0x134>)
 800b268:	f7f9 fc10 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800b26c:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b270:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b272:	2302      	movs	r3, #2
 800b274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b27a:	2303      	movs	r3, #3
 800b27c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b27e:	230c      	movs	r3, #12
 800b280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b282:	1d3b      	adds	r3, r7, #4
 800b284:	4619      	mov	r1, r3
 800b286:	4821      	ldr	r0, [pc, #132]	; (800b30c <HAL_FMC_MspInit+0x138>)
 800b288:	f7f9 fc00 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5 
 800b28c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800b290:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1 
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b292:	2302      	movs	r3, #2
 800b294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b29a:	2303      	movs	r3, #3
 800b29c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b29e:	230c      	movs	r3, #12
 800b2a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b2a2:	1d3b      	adds	r3, r7, #4
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	481a      	ldr	r0, [pc, #104]	; (800b310 <HAL_FMC_MspInit+0x13c>)
 800b2a8:	f7f9 fbf0 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b2ac:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b2b0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b2be:	230c      	movs	r3, #12
 800b2c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b2c2:	1d3b      	adds	r3, r7, #4
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4813      	ldr	r0, [pc, #76]	; (800b314 <HAL_FMC_MspInit+0x140>)
 800b2c8:	f7f9 fbe0 	bl	8004a8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800b2cc:	f64f 7320 	movw	r3, #65312	; 0xff20
 800b2d0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b2de:	230c      	movs	r3, #12
 800b2e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b2e2:	1d3b      	adds	r3, r7, #4
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	480c      	ldr	r0, [pc, #48]	; (800b318 <HAL_FMC_MspInit+0x144>)
 800b2e8:	f7f9 fbd0 	bl	8004a8c <HAL_GPIO_Init>
 800b2ec:	e000      	b.n	800b2f0 <HAL_FMC_MspInit+0x11c>
    return;
 800b2ee:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200002a0 	.word	0x200002a0
 800b2fc:	40023800 	.word	0x40023800
 800b300:	40021000 	.word	0x40021000
 800b304:	40020400 	.word	0x40020400
 800b308:	40021800 	.word	0x40021800
 800b30c:	40020c00 	.word	0x40020c00
 800b310:	40022000 	.word	0x40022000
 800b314:	40021400 	.word	0x40021400
 800b318:	40021c00 	.word	0x40021c00

0800b31c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b324:	f7ff ff56 	bl	800b1d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b334:	bf00      	nop
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b33e:	b480      	push	{r7}
 800b340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b342:	e7fe      	b.n	800b342 <HardFault_Handler+0x4>

0800b344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b348:	e7fe      	b.n	800b348 <MemManage_Handler+0x4>

0800b34a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b34a:	b480      	push	{r7}
 800b34c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b34e:	e7fe      	b.n	800b34e <BusFault_Handler+0x4>

0800b350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b350:	b480      	push	{r7}
 800b352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b354:	e7fe      	b.n	800b354 <UsageFault_Handler+0x4>

0800b356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b356:	b480      	push	{r7}
 800b358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b35a:	bf00      	nop
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b368:	bf00      	nop
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b372:	b480      	push	{r7}
 800b374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b376:	bf00      	nop
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b384:	f7f7 fa1a 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b388:	bf00      	nop
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800b390:	2001      	movs	r0, #1
 800b392:	f7f9 fe7b 	bl	800508c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800b396:	bf00      	nop
 800b398:	bd80      	pop	{r7, pc}

0800b39a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b39e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b3a2:	f7f9 fe73 	bl	800508c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b3a6:	bf00      	nop
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800b3b0:	4802      	ldr	r0, [pc, #8]	; (800b3bc <TIM8_UP_TIM13_IRQHandler+0x10>)
 800b3b2:	f7fd f97d 	bl	80086b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800b3b6:	bf00      	nop
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20000e44 	.word	0x20000e44

0800b3c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b3c4:	4802      	ldr	r0, [pc, #8]	; (800b3d0 <TIM6_DAC_IRQHandler+0x10>)
 800b3c6:	f7fd f973 	bl	80086b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b3ca:	bf00      	nop
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000e88 	.word	0x20000e88

0800b3d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b3d8:	4802      	ldr	r0, [pc, #8]	; (800b3e4 <TIM7_IRQHandler+0x10>)
 800b3da:	f7fd f969 	bl	80086b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000f60 	.word	0x20000f60

0800b3e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b3ec:	4b15      	ldr	r3, [pc, #84]	; (800b444 <SystemInit+0x5c>)
 800b3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f2:	4a14      	ldr	r2, [pc, #80]	; (800b444 <SystemInit+0x5c>)
 800b3f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b3fc:	4b12      	ldr	r3, [pc, #72]	; (800b448 <SystemInit+0x60>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a11      	ldr	r2, [pc, #68]	; (800b448 <SystemInit+0x60>)
 800b402:	f043 0301 	orr.w	r3, r3, #1
 800b406:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b408:	4b0f      	ldr	r3, [pc, #60]	; (800b448 <SystemInit+0x60>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b40e:	4b0e      	ldr	r3, [pc, #56]	; (800b448 <SystemInit+0x60>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	490d      	ldr	r1, [pc, #52]	; (800b448 <SystemInit+0x60>)
 800b414:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <SystemInit+0x64>)
 800b416:	4013      	ands	r3, r2
 800b418:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b41a:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <SystemInit+0x60>)
 800b41c:	4a0c      	ldr	r2, [pc, #48]	; (800b450 <SystemInit+0x68>)
 800b41e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b420:	4b09      	ldr	r3, [pc, #36]	; (800b448 <SystemInit+0x60>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a08      	ldr	r2, [pc, #32]	; (800b448 <SystemInit+0x60>)
 800b426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b42a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <SystemInit+0x60>)
 800b42e:	2200      	movs	r2, #0
 800b430:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b432:	4b04      	ldr	r3, [pc, #16]	; (800b444 <SystemInit+0x5c>)
 800b434:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b438:	609a      	str	r2, [r3, #8]
#endif
}
 800b43a:	bf00      	nop
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	e000ed00 	.word	0xe000ed00
 800b448:	40023800 	.word	0x40023800
 800b44c:	fef6ffff 	.word	0xfef6ffff
 800b450:	24003010 	.word	0x24003010

0800b454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b48c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b45a:	e003      	b.n	800b464 <LoopCopyDataInit>

0800b45c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b45c:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b45e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b462:	3104      	adds	r1, #4

0800b464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b464:	480b      	ldr	r0, [pc, #44]	; (800b494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b466:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b46a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b46c:	d3f6      	bcc.n	800b45c <CopyDataInit>
  ldr  r2, =_sbss
 800b46e:	4a0b      	ldr	r2, [pc, #44]	; (800b49c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b470:	e002      	b.n	800b478 <LoopFillZerobss>

0800b472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b474:	f842 3b04 	str.w	r3, [r2], #4

0800b478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b478:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b47a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b47c:	d3f9      	bcc.n	800b472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b47e:	f7ff ffb3 	bl	800b3e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b482:	f000 f811 	bl	800b4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b486:	f7fe fbd3 	bl	8009c30 <main>
  bx  lr    
 800b48a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b48c:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800b490:	0800d79c 	.word	0x0800d79c
  ldr  r0, =_sdata
 800b494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b498:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 800b49c:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 800b4a0:	20000fa0 	.word	0x20000fa0

0800b4a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b4a4:	e7fe      	b.n	800b4a4 <ADC_IRQHandler>
	...

0800b4a8 <__libc_init_array>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	4e0d      	ldr	r6, [pc, #52]	; (800b4e0 <__libc_init_array+0x38>)
 800b4ac:	4c0d      	ldr	r4, [pc, #52]	; (800b4e4 <__libc_init_array+0x3c>)
 800b4ae:	1ba4      	subs	r4, r4, r6
 800b4b0:	10a4      	asrs	r4, r4, #2
 800b4b2:	2500      	movs	r5, #0
 800b4b4:	42a5      	cmp	r5, r4
 800b4b6:	d109      	bne.n	800b4cc <__libc_init_array+0x24>
 800b4b8:	4e0b      	ldr	r6, [pc, #44]	; (800b4e8 <__libc_init_array+0x40>)
 800b4ba:	4c0c      	ldr	r4, [pc, #48]	; (800b4ec <__libc_init_array+0x44>)
 800b4bc:	f000 f820 	bl	800b500 <_init>
 800b4c0:	1ba4      	subs	r4, r4, r6
 800b4c2:	10a4      	asrs	r4, r4, #2
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	42a5      	cmp	r5, r4
 800b4c8:	d105      	bne.n	800b4d6 <__libc_init_array+0x2e>
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4d0:	4798      	blx	r3
 800b4d2:	3501      	adds	r5, #1
 800b4d4:	e7ee      	b.n	800b4b4 <__libc_init_array+0xc>
 800b4d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4da:	4798      	blx	r3
 800b4dc:	3501      	adds	r5, #1
 800b4de:	e7f2      	b.n	800b4c6 <__libc_init_array+0x1e>
 800b4e0:	0800d794 	.word	0x0800d794
 800b4e4:	0800d794 	.word	0x0800d794
 800b4e8:	0800d794 	.word	0x0800d794
 800b4ec:	0800d798 	.word	0x0800d798

0800b4f0 <memset>:
 800b4f0:	4402      	add	r2, r0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d100      	bne.n	800b4fa <memset+0xa>
 800b4f8:	4770      	bx	lr
 800b4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b4fe:	e7f9      	b.n	800b4f4 <memset+0x4>

0800b500 <_init>:
 800b500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b502:	bf00      	nop
 800b504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b506:	bc08      	pop	{r3}
 800b508:	469e      	mov	lr, r3
 800b50a:	4770      	bx	lr

0800b50c <_fini>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr
